
TWI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000233e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000233e  000023b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002238  00000000  00000000  000023bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000158d  00000000  00000000  000045f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008965  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a2cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 9d 11 	jmp	0x233a	; 0x233a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#define F_CPU 8000000UL



void main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	// local variable to return data in
	u8 local_u8Data=0;
     b40:	19 82       	std	Y+1, r1	; 0x01

	// Initialize DIO --> PORTD LCD Data, PORTB LCD Control, PORTC TWI
	MDIO_voidInit();
     b42:	0e 94 8d 09 	call	0x131a	; 0x131a <MDIO_voidInit>

	// Initialize TWI in Master Mode
	TWI_voidInitMaster(0);
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TWI_voidInitMaster>

	// Send byte to EEPROM
	EEPROM_voidSendDataByte(5, 7);
     b4c:	85 e0       	ldi	r24, 0x05	; 5
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	0e 94 af 09 	call	0x135e	; 0x135e <EEPROM_voidSendDataByte>

	// Read Byte from EEPROM
	local_u8Data= EEPROM_u8ReadDataByte(5);
     b56:	85 e0       	ldi	r24, 0x05	; 5
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <EEPROM_u8ReadDataByte>
     b5e:	89 83       	std	Y+1, r24	; 0x01

	if (local_u8Data == 7)
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	87 30       	cpi	r24, 0x07	; 7
     b64:	29 f4       	brne	.+10     	; 0xb70 <main+0x3a>
	{
		MDIO_voidSetPinValue(0,0,1);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>
     b70:	ff cf       	rjmp	.-2      	; 0xb70 <main+0x3a>

00000b72 <MDIO_voidSetPinDirection>:


// MDIO_voidSetPinDirection(DIO_PORTA, PIN0, DIO_OUTPUT);

void MDIO_voidSetPinDirection(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	2d 97       	sbiw	r28, 0x0d	; 13
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	6a 83       	std	Y+2, r22	; 0x02
     b8a:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	84 30       	cpi	r24, 0x04	; 4
     b90:	08 f0       	brcs	.+2      	; 0xb94 <MDIO_voidSetPinDirection+0x22>
     b92:	09 c1       	rjmp	.+530    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	88 30       	cpi	r24, 0x08	; 8
     b98:	08 f0       	brcs	.+2      	; 0xb9c <MDIO_voidSetPinDirection+0x2a>
     b9a:	05 c1       	rjmp	.+522    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <MDIO_voidSetPinDirection+0x32>
     ba2:	01 c1       	rjmp	.+514    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_portID)
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	3d 87       	std	Y+13, r19	; 0x0d
     bac:	2c 87       	std	Y+12, r18	; 0x0c
     bae:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <MDIO_voidSetPinDirection+0x48>
     bb8:	4f c0       	rjmp	.+158    	; 0xc58 <MDIO_voidSetPinDirection+0xe6>
     bba:	2c 85       	ldd	r18, Y+12	; 0x0c
     bbc:	3d 85       	ldd	r19, Y+13	; 0x0d
     bbe:	22 30       	cpi	r18, 0x02	; 2
     bc0:	31 05       	cpc	r19, r1
     bc2:	2c f4       	brge	.+10     	; 0xbce <MDIO_voidSetPinDirection+0x5c>
     bc4:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc6:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	71 f0       	breq	.+28     	; 0xbe8 <MDIO_voidSetPinDirection+0x76>
     bcc:	ec c0       	rjmp	.+472    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
     bce:	2c 85       	ldd	r18, Y+12	; 0x0c
     bd0:	3d 85       	ldd	r19, Y+13	; 0x0d
     bd2:	22 30       	cpi	r18, 0x02	; 2
     bd4:	31 05       	cpc	r19, r1
     bd6:	09 f4       	brne	.+2      	; 0xbda <MDIO_voidSetPinDirection+0x68>
     bd8:	77 c0       	rjmp	.+238    	; 0xcc8 <MDIO_voidSetPinDirection+0x156>
     bda:	8c 85       	ldd	r24, Y+12	; 0x0c
     bdc:	9d 85       	ldd	r25, Y+13	; 0x0d
     bde:	83 30       	cpi	r24, 0x03	; 3
     be0:	91 05       	cpc	r25, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <MDIO_voidSetPinDirection+0x74>
     be4:	a9 c0       	rjmp	.+338    	; 0xd38 <MDIO_voidSetPinDirection+0x1c6>
     be6:	df c0       	rjmp	.+446    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	3b 87       	std	Y+11, r19	; 0x0b
     bf0:	2a 87       	std	Y+10, r18	; 0x0a
     bf2:	8a 85       	ldd	r24, Y+10	; 0x0a
     bf4:	9b 85       	ldd	r25, Y+11	; 0x0b
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	31 f0       	breq	.+12     	; 0xc06 <MDIO_voidSetPinDirection+0x94>
     bfa:	2a 85       	ldd	r18, Y+10	; 0x0a
     bfc:	3b 85       	ldd	r19, Y+11	; 0x0b
     bfe:	21 30       	cpi	r18, 0x01	; 1
     c00:	31 05       	cpc	r19, r1
     c02:	b1 f0       	breq	.+44     	; 0xc30 <MDIO_voidSetPinDirection+0xbe>
     c04:	d0 c0       	rjmp	.+416    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
     c06:	aa e3       	ldi	r26, 0x3A	; 58
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ea e3       	ldi	r30, 0x3A	; 58
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <MDIO_voidSetPinDirection+0xb2>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <MDIO_voidSetPinDirection+0xae>
     c28:	80 95       	com	r24
     c2a:	84 23       	and	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	bb c0       	rjmp	.+374    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
     c30:	aa e3       	ldi	r26, 0x3A	; 58
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	ea e3       	ldi	r30, 0x3A	; 58
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <MDIO_voidSetPinDirection+0xdc>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <MDIO_voidSetPinDirection+0xd8>
     c52:	84 2b       	or	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	a7 c0       	rjmp	.+334    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	39 87       	std	Y+9, r19	; 0x09
     c60:	28 87       	std	Y+8, r18	; 0x08
     c62:	88 85       	ldd	r24, Y+8	; 0x08
     c64:	99 85       	ldd	r25, Y+9	; 0x09
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	31 f0       	breq	.+12     	; 0xc76 <MDIO_voidSetPinDirection+0x104>
     c6a:	28 85       	ldd	r18, Y+8	; 0x08
     c6c:	39 85       	ldd	r19, Y+9	; 0x09
     c6e:	21 30       	cpi	r18, 0x01	; 1
     c70:	31 05       	cpc	r19, r1
     c72:	b1 f0       	breq	.+44     	; 0xca0 <MDIO_voidSetPinDirection+0x12e>
     c74:	98 c0       	rjmp	.+304    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
     c76:	a7 e3       	ldi	r26, 0x37	; 55
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e7 e3       	ldi	r30, 0x37	; 55
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	48 2f       	mov	r20, r24
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 2e       	mov	r0, r18
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <MDIO_voidSetPinDirection+0x122>
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	0a 94       	dec	r0
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <MDIO_voidSetPinDirection+0x11e>
     c98:	80 95       	com	r24
     c9a:	84 23       	and	r24, r20
     c9c:	8c 93       	st	X, r24
     c9e:	83 c0       	rjmp	.+262    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
     ca0:	a7 e3       	ldi	r26, 0x37	; 55
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e7 e3       	ldi	r30, 0x37	; 55
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	48 2f       	mov	r20, r24
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	02 2e       	mov	r0, r18
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <MDIO_voidSetPinDirection+0x14c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	0a 94       	dec	r0
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <MDIO_voidSetPinDirection+0x148>
     cc2:	84 2b       	or	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	6f c0       	rjmp	.+222    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3f 83       	std	Y+7, r19	; 0x07
     cd0:	2e 83       	std	Y+6, r18	; 0x06
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	9f 81       	ldd	r25, Y+7	; 0x07
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	31 f0       	breq	.+12     	; 0xce6 <MDIO_voidSetPinDirection+0x174>
     cda:	2e 81       	ldd	r18, Y+6	; 0x06
     cdc:	3f 81       	ldd	r19, Y+7	; 0x07
     cde:	21 30       	cpi	r18, 0x01	; 1
     ce0:	31 05       	cpc	r19, r1
     ce2:	b1 f0       	breq	.+44     	; 0xd10 <MDIO_voidSetPinDirection+0x19e>
     ce4:	60 c0       	rjmp	.+192    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
     ce6:	a4 e3       	ldi	r26, 0x34	; 52
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e3       	ldi	r30, 0x34	; 52
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <MDIO_voidSetPinDirection+0x192>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <MDIO_voidSetPinDirection+0x18e>
     d08:	80 95       	com	r24
     d0a:	84 23       	and	r24, r20
     d0c:	8c 93       	st	X, r24
     d0e:	4b c0       	rjmp	.+150    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
     d10:	a4 e3       	ldi	r26, 0x34	; 52
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e4 e3       	ldi	r30, 0x34	; 52
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 2e       	mov	r0, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <MDIO_voidSetPinDirection+0x1bc>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <MDIO_voidSetPinDirection+0x1b8>
     d32:	84 2b       	or	r24, r20
     d34:	8c 93       	st	X, r24
     d36:	37 c0       	rjmp	.+110    	; 0xda6 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3d 83       	std	Y+5, r19	; 0x05
     d40:	2c 83       	std	Y+4, r18	; 0x04
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	31 f0       	breq	.+12     	; 0xd56 <MDIO_voidSetPinDirection+0x1e4>
     d4a:	2c 81       	ldd	r18, Y+4	; 0x04
     d4c:	3d 81       	ldd	r19, Y+5	; 0x05
     d4e:	21 30       	cpi	r18, 0x01	; 1
     d50:	31 05       	cpc	r19, r1
     d52:	b1 f0       	breq	.+44     	; 0xd80 <MDIO_voidSetPinDirection+0x20e>
     d54:	28 c0       	rjmp	.+80     	; 0xda6 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
     d56:	a1 e3       	ldi	r26, 0x31	; 49
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e1 e3       	ldi	r30, 0x31	; 49
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <MDIO_voidSetPinDirection+0x202>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <MDIO_voidSetPinDirection+0x1fe>
     d78:	80 95       	com	r24
     d7a:	84 23       	and	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	13 c0       	rjmp	.+38     	; 0xda6 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
     d80:	a1 e3       	ldi	r26, 0x31	; 49
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e1 e3       	ldi	r30, 0x31	; 49
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <MDIO_voidSetPinDirection+0x22c>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <MDIO_voidSetPinDirection+0x228>
     da2:	84 2b       	or	r24, r20
     da4:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     da6:	2d 96       	adiw	r28, 0x0d	; 13
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	2d 97       	sbiw	r28, 0x0d	; 13
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	6a 83       	std	Y+2, r22	; 0x02
     dd0:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_SET) )
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	08 f0       	brcs	.+2      	; 0xdda <MDIO_voidSetPinValue+0x22>
     dd8:	09 c1       	rjmp	.+530    	; 0xfec <MDIO_voidSetPinValue+0x234>
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	88 30       	cpi	r24, 0x08	; 8
     dde:	08 f0       	brcs	.+2      	; 0xde2 <MDIO_voidSetPinValue+0x2a>
     de0:	05 c1       	rjmp	.+522    	; 0xfec <MDIO_voidSetPinValue+0x234>
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	08 f0       	brcs	.+2      	; 0xdea <MDIO_voidSetPinValue+0x32>
     de8:	01 c1       	rjmp	.+514    	; 0xfec <MDIO_voidSetPinValue+0x234>
	{
		switch (A_portID)
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	3d 87       	std	Y+13, r19	; 0x0d
     df2:	2c 87       	std	Y+12, r18	; 0x0c
     df4:	8c 85       	ldd	r24, Y+12	; 0x0c
     df6:	9d 85       	ldd	r25, Y+13	; 0x0d
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <MDIO_voidSetPinValue+0x48>
     dfe:	4f c0       	rjmp	.+158    	; 0xe9e <MDIO_voidSetPinValue+0xe6>
     e00:	2c 85       	ldd	r18, Y+12	; 0x0c
     e02:	3d 85       	ldd	r19, Y+13	; 0x0d
     e04:	22 30       	cpi	r18, 0x02	; 2
     e06:	31 05       	cpc	r19, r1
     e08:	2c f4       	brge	.+10     	; 0xe14 <MDIO_voidSetPinValue+0x5c>
     e0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e0c:	9d 85       	ldd	r25, Y+13	; 0x0d
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	71 f0       	breq	.+28     	; 0xe2e <MDIO_voidSetPinValue+0x76>
     e12:	ec c0       	rjmp	.+472    	; 0xfec <MDIO_voidSetPinValue+0x234>
     e14:	2c 85       	ldd	r18, Y+12	; 0x0c
     e16:	3d 85       	ldd	r19, Y+13	; 0x0d
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <MDIO_voidSetPinValue+0x68>
     e1e:	77 c0       	rjmp	.+238    	; 0xf0e <MDIO_voidSetPinValue+0x156>
     e20:	8c 85       	ldd	r24, Y+12	; 0x0c
     e22:	9d 85       	ldd	r25, Y+13	; 0x0d
     e24:	83 30       	cpi	r24, 0x03	; 3
     e26:	91 05       	cpc	r25, r1
     e28:	09 f4       	brne	.+2      	; 0xe2c <MDIO_voidSetPinValue+0x74>
     e2a:	a9 c0       	rjmp	.+338    	; 0xf7e <MDIO_voidSetPinValue+0x1c6>
     e2c:	df c0       	rjmp	.+446    	; 0xfec <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	3b 87       	std	Y+11, r19	; 0x0b
     e36:	2a 87       	std	Y+10, r18	; 0x0a
     e38:	8a 85       	ldd	r24, Y+10	; 0x0a
     e3a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	31 f0       	breq	.+12     	; 0xe4c <MDIO_voidSetPinValue+0x94>
     e40:	2a 85       	ldd	r18, Y+10	; 0x0a
     e42:	3b 85       	ldd	r19, Y+11	; 0x0b
     e44:	21 30       	cpi	r18, 0x01	; 1
     e46:	31 05       	cpc	r19, r1
     e48:	b1 f0       	breq	.+44     	; 0xe76 <MDIO_voidSetPinValue+0xbe>
     e4a:	d0 c0       	rjmp	.+416    	; 0xfec <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_pinID);
     e4c:	ab e3       	ldi	r26, 0x3B	; 59
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	eb e3       	ldi	r30, 0x3B	; 59
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <MDIO_voidSetPinValue+0xb2>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <MDIO_voidSetPinValue+0xae>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	bb c0       	rjmp	.+374    	; 0xfec <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_pinID);
     e76:	ab e3       	ldi	r26, 0x3B	; 59
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	eb e3       	ldi	r30, 0x3B	; 59
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <MDIO_voidSetPinValue+0xdc>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <MDIO_voidSetPinValue+0xd8>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	a7 c0       	rjmp	.+334    	; 0xfec <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	39 87       	std	Y+9, r19	; 0x09
     ea6:	28 87       	std	Y+8, r18	; 0x08
     ea8:	88 85       	ldd	r24, Y+8	; 0x08
     eaa:	99 85       	ldd	r25, Y+9	; 0x09
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	31 f0       	breq	.+12     	; 0xebc <MDIO_voidSetPinValue+0x104>
     eb0:	28 85       	ldd	r18, Y+8	; 0x08
     eb2:	39 85       	ldd	r19, Y+9	; 0x09
     eb4:	21 30       	cpi	r18, 0x01	; 1
     eb6:	31 05       	cpc	r19, r1
     eb8:	b1 f0       	breq	.+44     	; 0xee6 <MDIO_voidSetPinValue+0x12e>
     eba:	98 c0       	rjmp	.+304    	; 0xfec <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_pinID);
     ebc:	a8 e3       	ldi	r26, 0x38	; 56
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e8 e3       	ldi	r30, 0x38	; 56
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <MDIO_voidSetPinValue+0x122>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <MDIO_voidSetPinValue+0x11e>
     ede:	80 95       	com	r24
     ee0:	84 23       	and	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	83 c0       	rjmp	.+262    	; 0xfec <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_pinID);
     ee6:	a8 e3       	ldi	r26, 0x38	; 56
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e8 e3       	ldi	r30, 0x38	; 56
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <MDIO_voidSetPinValue+0x14c>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <MDIO_voidSetPinValue+0x148>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	6f c0       	rjmp	.+222    	; 0xfec <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3f 83       	std	Y+7, r19	; 0x07
     f16:	2e 83       	std	Y+6, r18	; 0x06
     f18:	8e 81       	ldd	r24, Y+6	; 0x06
     f1a:	9f 81       	ldd	r25, Y+7	; 0x07
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	31 f0       	breq	.+12     	; 0xf2c <MDIO_voidSetPinValue+0x174>
     f20:	2e 81       	ldd	r18, Y+6	; 0x06
     f22:	3f 81       	ldd	r19, Y+7	; 0x07
     f24:	21 30       	cpi	r18, 0x01	; 1
     f26:	31 05       	cpc	r19, r1
     f28:	b1 f0       	breq	.+44     	; 0xf56 <MDIO_voidSetPinValue+0x19e>
     f2a:	60 c0       	rjmp	.+192    	; 0xfec <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_pinID);
     f2c:	a5 e3       	ldi	r26, 0x35	; 53
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e5 e3       	ldi	r30, 0x35	; 53
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <MDIO_voidSetPinValue+0x192>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <MDIO_voidSetPinValue+0x18e>
     f4e:	80 95       	com	r24
     f50:	84 23       	and	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	4b c0       	rjmp	.+150    	; 0xfec <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_pinID);
     f56:	a5 e3       	ldi	r26, 0x35	; 53
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e5 e3       	ldi	r30, 0x35	; 53
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <MDIO_voidSetPinValue+0x1bc>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <MDIO_voidSetPinValue+0x1b8>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	37 c0       	rjmp	.+110    	; 0xfec <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	3d 83       	std	Y+5, r19	; 0x05
     f86:	2c 83       	std	Y+4, r18	; 0x04
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	31 f0       	breq	.+12     	; 0xf9c <MDIO_voidSetPinValue+0x1e4>
     f90:	2c 81       	ldd	r18, Y+4	; 0x04
     f92:	3d 81       	ldd	r19, Y+5	; 0x05
     f94:	21 30       	cpi	r18, 0x01	; 1
     f96:	31 05       	cpc	r19, r1
     f98:	b1 f0       	breq	.+44     	; 0xfc6 <MDIO_voidSetPinValue+0x20e>
     f9a:	28 c0       	rjmp	.+80     	; 0xfec <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_pinID);
     f9c:	a2 e3       	ldi	r26, 0x32	; 50
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e2 e3       	ldi	r30, 0x32	; 50
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <MDIO_voidSetPinValue+0x202>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <MDIO_voidSetPinValue+0x1fe>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	13 c0       	rjmp	.+38     	; 0xfec <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_pinID);
     fc6:	a2 e3       	ldi	r26, 0x32	; 50
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e2 e3       	ldi	r30, 0x32	; 50
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <MDIO_voidSetPinValue+0x22c>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <MDIO_voidSetPinValue+0x228>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     fec:	2d 96       	adiw	r28, 0x0d	; 13
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <MDIO_getPinValue>:




DIO_VALUE_e MDIO_getPinValue(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <MDIO_getPinValue+0x6>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <MDIO_getPinValue+0x8>
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	08 f0       	brcs	.+2      	; 0x1018 <MDIO_getPinValue+0x1a>
    1016:	6b c0       	rjmp	.+214    	; 0x10ee <MDIO_getPinValue+0xf0>
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	88 30       	cpi	r24, 0x08	; 8
    101c:	08 f0       	brcs	.+2      	; 0x1020 <MDIO_getPinValue+0x22>
    101e:	67 c0       	rjmp	.+206    	; 0x10ee <MDIO_getPinValue+0xf0>
	{
		switch (A_portID)
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3d 83       	std	Y+5, r19	; 0x05
    1028:	2c 83       	std	Y+4, r18	; 0x04
    102a:	4c 81       	ldd	r20, Y+4	; 0x04
    102c:	5d 81       	ldd	r21, Y+5	; 0x05
    102e:	41 30       	cpi	r20, 0x01	; 1
    1030:	51 05       	cpc	r21, r1
    1032:	41 f1       	breq	.+80     	; 0x1084 <MDIO_getPinValue+0x86>
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	9d 81       	ldd	r25, Y+5	; 0x05
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	91 05       	cpc	r25, r1
    103c:	34 f4       	brge	.+12     	; 0x104a <MDIO_getPinValue+0x4c>
    103e:	2c 81       	ldd	r18, Y+4	; 0x04
    1040:	3d 81       	ldd	r19, Y+5	; 0x05
    1042:	21 15       	cp	r18, r1
    1044:	31 05       	cpc	r19, r1
    1046:	61 f0       	breq	.+24     	; 0x1060 <MDIO_getPinValue+0x62>
    1048:	52 c0       	rjmp	.+164    	; 0x10ee <MDIO_getPinValue+0xf0>
    104a:	4c 81       	ldd	r20, Y+4	; 0x04
    104c:	5d 81       	ldd	r21, Y+5	; 0x05
    104e:	42 30       	cpi	r20, 0x02	; 2
    1050:	51 05       	cpc	r21, r1
    1052:	51 f1       	breq	.+84     	; 0x10a8 <MDIO_getPinValue+0xaa>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	b9 f1       	breq	.+110    	; 0x10cc <MDIO_getPinValue+0xce>
    105e:	47 c0       	rjmp	.+142    	; 0x10ee <MDIO_getPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    1060:	e9 e3       	ldi	r30, 0x39	; 57
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a9 01       	movw	r20, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <MDIO_getPinValue+0x7a>
    1074:	55 95       	asr	r21
    1076:	47 95       	ror	r20
    1078:	8a 95       	dec	r24
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <MDIO_getPinValue+0x76>
    107c:	ca 01       	movw	r24, r20
    107e:	81 70       	andi	r24, 0x01	; 1
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	35 c0       	rjmp	.+106    	; 0x10ee <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    1084:	e6 e3       	ldi	r30, 0x36	; 54
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a9 01       	movw	r20, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <MDIO_getPinValue+0x9e>
    1098:	55 95       	asr	r21
    109a:	47 95       	ror	r20
    109c:	8a 95       	dec	r24
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <MDIO_getPinValue+0x9a>
    10a0:	ca 01       	movw	r24, r20
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	23 c0       	rjmp	.+70     	; 0x10ee <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    10a8:	e3 e3       	ldi	r30, 0x33	; 51
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a9 01       	movw	r20, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <MDIO_getPinValue+0xc2>
    10bc:	55 95       	asr	r21
    10be:	47 95       	ror	r20
    10c0:	8a 95       	dec	r24
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <MDIO_getPinValue+0xbe>
    10c4:	ca 01       	movw	r24, r20
    10c6:	81 70       	andi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	11 c0       	rjmp	.+34     	; 0x10ee <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    10cc:	e0 e3       	ldi	r30, 0x30	; 48
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <MDIO_getPinValue+0xe6>
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <MDIO_getPinValue+0xe2>
    10e8:	ca 01       	movw	r24, r20
    10ea:	81 70       	andi	r24, 0x01	; 1
    10ec:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <MDIO_voidTogglePinValue+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <MDIO_voidTogglePinValue+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	08 f0       	brcs	.+2      	; 0x1118 <MDIO_voidTogglePinValue+0x18>
    1116:	72 c0       	rjmp	.+228    	; 0x11fc <MDIO_voidTogglePinValue+0xfc>
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 30       	cpi	r24, 0x08	; 8
    111c:	08 f0       	brcs	.+2      	; 0x1120 <MDIO_voidTogglePinValue+0x20>
    111e:	6e c0       	rjmp	.+220    	; 0x11fc <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_portID)
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 83       	std	Y+4, r19	; 0x04
    1128:	2b 83       	std	Y+3, r18	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	49 f1       	breq	.+82     	; 0x1186 <MDIO_voidTogglePinValue+0x86>
    1134:	2b 81       	ldd	r18, Y+3	; 0x03
    1136:	3c 81       	ldd	r19, Y+4	; 0x04
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <MDIO_voidTogglePinValue+0x48>
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <MDIO_voidTogglePinValue+0x5e>
    1146:	5a c0       	rjmp	.+180    	; 0x11fc <MDIO_voidTogglePinValue+0xfc>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	71 f1       	breq	.+92     	; 0x11ae <MDIO_voidTogglePinValue+0xae>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	e9 f1       	breq	.+122    	; 0x11d6 <MDIO_voidTogglePinValue+0xd6>
    115c:	4f c0       	rjmp	.+158    	; 0x11fc <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    115e:	ab e3       	ldi	r26, 0x3B	; 59
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	eb e3       	ldi	r30, 0x3B	; 59
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <MDIO_voidTogglePinValue+0x7c>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <MDIO_voidTogglePinValue+0x78>
    1180:	84 27       	eor	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	3b c0       	rjmp	.+118    	; 0x11fc <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1186:	a8 e3       	ldi	r26, 0x38	; 56
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e8 e3       	ldi	r30, 0x38	; 56
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <MDIO_voidTogglePinValue+0xa4>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <MDIO_voidTogglePinValue+0xa0>
    11a8:	84 27       	eor	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	27 c0       	rjmp	.+78     	; 0x11fc <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    11ae:	a5 e3       	ldi	r26, 0x35	; 53
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e5 e3       	ldi	r30, 0x35	; 53
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <MDIO_voidTogglePinValue+0xcc>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <MDIO_voidTogglePinValue+0xc8>
    11d0:	84 27       	eor	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	13 c0       	rjmp	.+38     	; 0x11fc <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    11d6:	a2 e3       	ldi	r26, 0x32	; 50
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e2 e3       	ldi	r30, 0x32	; 50
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <MDIO_voidTogglePinValue+0xf4>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <MDIO_voidTogglePinValue+0xf0>
    11f8:	84 27       	eor	r24, r20
    11fa:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <MDIO_voidSetPortDirection+0x6>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <MDIO_voidSetPortDirection+0x8>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	90 f5       	brcc	.+100    	; 0x1284 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_portID)
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	3c 83       	std	Y+4, r19	; 0x04
    1228:	2b 83       	std	Y+3, r18	; 0x03
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	91 05       	cpc	r25, r1
    1232:	d1 f0       	breq	.+52     	; 0x1268 <MDIO_voidSetPortDirection+0x5e>
    1234:	2b 81       	ldd	r18, Y+3	; 0x03
    1236:	3c 81       	ldd	r19, Y+4	; 0x04
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	2c f4       	brge	.+10     	; 0x1248 <MDIO_voidSetPortDirection+0x3e>
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	61 f0       	breq	.+24     	; 0x125e <MDIO_voidSetPortDirection+0x54>
    1246:	1e c0       	rjmp	.+60     	; 0x1284 <MDIO_voidSetPortDirection+0x7a>
    1248:	2b 81       	ldd	r18, Y+3	; 0x03
    124a:	3c 81       	ldd	r19, Y+4	; 0x04
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	81 f0       	breq	.+32     	; 0x1272 <MDIO_voidSetPortDirection+0x68>
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	83 30       	cpi	r24, 0x03	; 3
    1258:	91 05       	cpc	r25, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <MDIO_voidSetPortDirection+0x72>
    125c:	13 c0       	rjmp	.+38     	; 0x1284 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    125e:	ea e3       	ldi	r30, 0x3A	; 58
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    127c:	e1 e3       	ldi	r30, 0x31	; 49
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <MDIO_voidSetPortValue+0x6>
    1298:	00 d0       	rcall	.+0      	; 0x129a <MDIO_voidSetPortValue+0x8>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	90 f5       	brcc	.+100    	; 0x130c <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_portID)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3c 83       	std	Y+4, r19	; 0x04
    12b0:	2b 83       	std	Y+3, r18	; 0x03
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	91 05       	cpc	r25, r1
    12ba:	d1 f0       	breq	.+52     	; 0x12f0 <MDIO_voidSetPortValue+0x5e>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <MDIO_voidSetPortValue+0x3e>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <MDIO_voidSetPortValue+0x54>
    12ce:	1e c0       	rjmp	.+60     	; 0x130c <MDIO_voidSetPortValue+0x7a>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	81 f0       	breq	.+32     	; 0x12fa <MDIO_voidSetPortValue+0x68>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	91 05       	cpc	r25, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <MDIO_voidSetPortValue+0x72>
    12e4:	13 c0       	rjmp	.+38     	; 0x130c <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
    12ee:	0e c0       	rjmp	.+28     	; 0x130c <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    12f0:	e8 e3       	ldi	r30, 0x38	; 56
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
    12f8:	09 c0       	rjmp	.+18     	; 0x130c <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    12fa:	e5 e3       	ldi	r30, 0x35	; 53
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
    1302:	04 c0       	rjmp	.+8      	; 0x130c <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    1304:	e2 e3       	ldi	r30, 0x32	; 50
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <MDIO_voidInit>:


void MDIO_voidInit (void)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    1322:	ea e3       	ldi	r30, 0x3A	; 58
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    1328:	e7 e3       	ldi	r30, 0x37	; 55
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	88 e0       	ldi	r24, 0x08	; 8
    132e:	80 83       	st	Z, r24
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    1330:	e4 e3       	ldi	r30, 0x34	; 52
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    1338:	e1 e3       	ldi	r30, 0x31	; 49
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	88 e3       	ldi	r24, 0x38	; 56
    133e:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    1340:	eb e3       	ldi	r30, 0x3B	; 59
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	10 82       	st	Z, r1
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    134c:	e5 e3       	ldi	r30, 0x35	; 53
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    1352:	e2 e3       	ldi	r30, 0x32	; 50
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <EEPROM_voidSendDataByte>:
#include "../Include/HAL/EEPROM/EEPROM_Cfg.h"
#include "../Include/HAL/EEPROM/EEPROM_Private.h"
#include "../Include/MCAL/DIO/DIO_Interface.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	62 97       	sbiw	r28, 0x12	; 18
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	99 8b       	std	Y+17, r25	; 0x11
    1374:	88 8b       	std	Y+16, r24	; 0x10
    1376:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    1378:	88 89       	ldd	r24, Y+16	; 0x10
    137a:	99 89       	ldd	r25, Y+17	; 0x11
    137c:	89 2f       	mov	r24, r25
    137e:	99 27       	eor	r25, r25
    1380:	80 65       	ori	r24, 0x50	; 80
    1382:	8f 87       	std	Y+15, r24	; 0x0f
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    1384:	0e 94 28 10 	call	0x2050	; 0x2050 <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    1388:	8f 85       	ldd	r24, Y+15	; 0x0f
    138a:	0e 94 75 10 	call	0x20ea	; 0x20ea <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    138e:	88 89       	ldd	r24, Y+16	; 0x10
    1390:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send the data byte to the memory location*/
	TWI_ErrorStatusMasterWriteDataByteWithACK(Copy_u8DataByte);
    1394:	8a 89       	ldd	r24, Y+18	; 0x12
    1396:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send stop condition*/
	TWI_voidSendStopCondition();
    139a:	0e 94 3d 11 	call	0x227a	; 0x227a <TWI_voidSendStopCondition>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a0 e2       	ldi	r26, 0x20	; 32
    13a4:	b1 e4       	ldi	r27, 0x41	; 65
    13a6:	8b 87       	std	Y+11, r24	; 0x0b
    13a8:	9c 87       	std	Y+12, r25	; 0x0c
    13aa:	ad 87       	std	Y+13, r26	; 0x0d
    13ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	4a ef       	ldi	r20, 0xFA	; 250
    13bc:	54 e4       	ldi	r21, 0x44	; 68
    13be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	8f 83       	std	Y+7, r24	; 0x07
    13c8:	98 87       	std	Y+8, r25	; 0x08
    13ca:	a9 87       	std	Y+9, r26	; 0x09
    13cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ce:	6f 81       	ldd	r22, Y+7	; 0x07
    13d0:	78 85       	ldd	r23, Y+8	; 0x08
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e8       	ldi	r20, 0x80	; 128
    13dc:	5f e3       	ldi	r21, 0x3F	; 63
    13de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13e2:	88 23       	and	r24, r24
    13e4:	2c f4       	brge	.+10     	; 0x13f0 <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	3f c0       	rjmp	.+126    	; 0x146e <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	3f ef       	ldi	r19, 0xFF	; 255
    13fc:	4f e7       	ldi	r20, 0x7F	; 127
    13fe:	57 e4       	ldi	r21, 0x47	; 71
    1400:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1404:	18 16       	cp	r1, r24
    1406:	4c f5       	brge	.+82     	; 0x145a <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1408:	6b 85       	ldd	r22, Y+11	; 0x0b
    140a:	7c 85       	ldd	r23, Y+12	; 0x0c
    140c:	8d 85       	ldd	r24, Y+13	; 0x0d
    140e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e2       	ldi	r20, 0x20	; 32
    1416:	51 e4       	ldi	r21, 0x41	; 65
    1418:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
    1430:	0f c0       	rjmp	.+30     	; 0x1450 <EEPROM_voidSendDataByte+0xf2>
    1432:	88 ec       	ldi	r24, 0xC8	; 200
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	9c 83       	std	Y+4, r25	; 0x04
    1438:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <EEPROM_voidSendDataByte+0xe0>
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	69 f7       	brne	.-38     	; 0x1432 <EEPROM_voidSendDataByte+0xd4>
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <EEPROM_voidSendDataByte+0x11c>
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    1482:	62 96       	adiw	r28, 0x12	; 18
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <EEPROM_u8ReadDataByte+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <EEPROM_u8ReadDataByte+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9c 83       	std	Y+4, r25	; 0x04
    14a2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8AddressPacket, Local_u8Data;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	89 2f       	mov	r24, r25
    14aa:	99 27       	eor	r25, r25
    14ac:	80 65       	ori	r24, 0x50	; 80
    14ae:	89 83       	std	Y+1, r24	; 0x01
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_ErrorStatusSendStartConditionWithACK();
    14b0:	0e 94 28 10 	call	0x2050	; 0x2050 <TWI_ErrorStatusSendStartConditionWithACK>

	/*Send the address packet with write request*/
	TWI_ErrorStatusSendSlaveAddressWithWriteACK(Local_u8AddressPacket);
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	0e 94 75 10 	call	0x20ea	; 0x20ea <TWI_ErrorStatusSendSlaveAddressWithWriteACK>

	/*Send the rest 8bits of the location address*/
	TWI_ErrorStatusMasterWriteDataByteWithACK((u8)Copy_u16LocationAddress);
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_ErrorStatusMasterWriteDataByteWithACK>

	/*Send repeated start to change write request into read request*/
	TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    14c0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

	/*Send the address packet with read request*/
	TWI_ErrorStatusSendSlaveAddressWithReadACK(Local_u8AddressPacket);
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	0e 94 ad 10 	call	0x215a	; 0x215a <TWI_ErrorStatusSendSlaveAddressWithReadACK>

	/*Get the data from memory*/
	TWI_ErrorStatusMasterReadDataByteWithACK(&Local_u8Data);
    14ca:	ce 01       	movw	r24, r28
    14cc:	02 96       	adiw	r24, 0x02	; 2
    14ce:	0e 94 0e 11 	call	0x221c	; 0x221c <TWI_ErrorStatusMasterReadDataByteWithACK>

	/*send the stop condition*/
	TWI_voidSendStopCondition();
    14d2:	0e 94 3d 11 	call	0x227a	; 0x227a <TWI_voidSendStopCondition>

	return Local_u8Data;
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_Interface.h"
#include "../Include/MCAL/GI/GI_Private.h"
#include "../Include/MCAL/GI/GI_Cfg.h"

void MGI_voidEnable(void)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , GLOBAL_INTERUPPT_ENABLE_BIT);
    14ee:	af e5       	ldi	r26, 0x5F	; 95
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ef e5       	ldi	r30, 0x5F	; 95
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	80 68       	ori	r24, 0x80	; 128
    14fa:	8c 93       	st	X, r24
}
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <MGI_voidDisable>:

void MGI_voidDisable(void)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , GLOBAL_INTERUPPT_ENABLE_BIT);
    150a:	af e5       	ldi	r26, 0x5F	; 95
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ef e5       	ldi	r30, 0x5F	; 95
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 77       	andi	r24, 0x7F	; 127
    1516:	8c 93       	st	X, r24
}
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <HLCD_voidSendCommand>:
#include "../Include/HAL/LCD/LCD_Private.h"
#include "../Include/HAL/LCD/LCD_Cfg.h"
#define F_CPU 8000000UL

void HLCD_voidSendCommand(u8 A_u8Command)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	2f 97       	sbiw	r28, 0x0f	; 15
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	8f 87       	std	Y+15, r24	; 0x0f
	// To Send Command 	(RS-->0) (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_RESET);
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	63 e0       	ldi	r22, 0x03	; 3
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_RESET);
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	64 e0       	ldi	r22, 0x04	; 4
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>

	//Send Command
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	6f 85       	ldd	r22, Y+15	; 0x0f
    154c:	0e 94 49 09 	call	0x1292	; 0x1292 <MDIO_voidSetPortValue>

	//Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_SET);
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	65 e0       	ldi	r22, 0x05	; 5
    1554:	41 e0       	ldi	r20, 0x01	; 1
    1556:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 e0       	ldi	r26, 0x00	; 0
    1560:	b0 e4       	ldi	r27, 0x40	; 64
    1562:	8b 87       	std	Y+11, r24	; 0x0b
    1564:	9c 87       	std	Y+12, r25	; 0x0c
    1566:	ad 87       	std	Y+13, r26	; 0x0d
    1568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	6b 85       	ldd	r22, Y+11	; 0x0b
    156c:	7c 85       	ldd	r23, Y+12	; 0x0c
    156e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1570:	9e 85       	ldd	r25, Y+14	; 0x0e
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a ef       	ldi	r20, 0xFA	; 250
    1578:	54 e4       	ldi	r21, 0x44	; 68
    157a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	8f 83       	std	Y+7, r24	; 0x07
    1584:	98 87       	std	Y+8, r25	; 0x08
    1586:	a9 87       	std	Y+9, r26	; 0x09
    1588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <HLCD_voidSendCommand+0xee>
    15ee:	88 ec       	ldi	r24, 0xC8	; 200
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <HLCD_voidSendCommand+0xdc>
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <HLCD_voidSendCommand+0xd0>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <HLCD_voidSendCommand+0x118>
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_RESET);
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	65 e0       	ldi	r22, 0x05	; 5
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>
}
    1648:	2f 96       	adiw	r28, 0x0f	; 15
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Data)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	2f 97       	sbiw	r28, 0x0f	; 15
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	8f 87       	std	Y+15, r24	; 0x0f
	// To Send Data 	(RS-->1) (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_SET);
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	63 e0       	ldi	r22, 0x03	; 3
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_RESET);
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	64 e0       	ldi	r22, 0x04	; 4
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>

	// Send Data
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	6f 85       	ldd	r22, Y+15	; 0x0f
    1688:	0e 94 49 09 	call	0x1292	; 0x1292 <MDIO_voidSetPortValue>

	//Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_SET);
    168c:	83 e0       	ldi	r24, 0x03	; 3
    168e:	65 e0       	ldi	r22, 0x05	; 5
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e0       	ldi	r26, 0x00	; 0
    169c:	b0 e4       	ldi	r27, 0x40	; 64
    169e:	8b 87       	std	Y+11, r24	; 0x0b
    16a0:	9c 87       	std	Y+12, r25	; 0x0c
    16a2:	ad 87       	std	Y+13, r26	; 0x0d
    16a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4a ef       	ldi	r20, 0xFA	; 250
    16b4:	54 e4       	ldi	r21, 0x44	; 68
    16b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	8f 83       	std	Y+7, r24	; 0x07
    16c0:	98 87       	std	Y+8, r25	; 0x08
    16c2:	a9 87       	std	Y+9, r26	; 0x09
    16c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c6:	6f 81       	ldd	r22, Y+7	; 0x07
    16c8:	78 85       	ldd	r23, Y+8	; 0x08
    16ca:	89 85       	ldd	r24, Y+9	; 0x09
    16cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e8       	ldi	r20, 0x80	; 128
    16d4:	5f e3       	ldi	r21, 0x3F	; 63
    16d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16da:	88 23       	and	r24, r24
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	3f c0       	rjmp	.+126    	; 0x1766 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    16e8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ea:	78 85       	ldd	r23, Y+8	; 0x08
    16ec:	89 85       	ldd	r24, Y+9	; 0x09
    16ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	3f ef       	ldi	r19, 0xFF	; 255
    16f4:	4f e7       	ldi	r20, 0x7F	; 127
    16f6:	57 e4       	ldi	r21, 0x47	; 71
    16f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16fc:	18 16       	cp	r1, r24
    16fe:	4c f5       	brge	.+82     	; 0x1752 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1700:	6b 85       	ldd	r22, Y+11	; 0x0b
    1702:	7c 85       	ldd	r23, Y+12	; 0x0c
    1704:	8d 85       	ldd	r24, Y+13	; 0x0d
    1706:	9e 85       	ldd	r25, Y+14	; 0x0e
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e2       	ldi	r20, 0x20	; 32
    170e:	51 e4       	ldi	r21, 0x41	; 65
    1710:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	0f c0       	rjmp	.+30     	; 0x1748 <HLCD_voidSendData+0xee>
    172a:	88 ec       	ldi	r24, 0xC8	; 200
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <HLCD_voidSendData+0xdc>
    173a:	9c 83       	std	Y+4, r25	; 0x04
    173c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	69 f7       	brne	.-38     	; 0x172a <HLCD_voidSendData+0xd0>
    1750:	14 c0       	rjmp	.+40     	; 0x177a <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1752:	6f 81       	ldd	r22, Y+7	; 0x07
    1754:	78 85       	ldd	r23, Y+8	; 0x08
    1756:	89 85       	ldd	r24, Y+9	; 0x09
    1758:	9a 85       	ldd	r25, Y+10	; 0x0a
    175a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <HLCD_voidSendData+0x118>
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_RESET);
    177a:	83 e0       	ldi	r24, 0x03	; 3
    177c:	65 e0       	ldi	r22, 0x05	; 5
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>
}
    1784:	2f 96       	adiw	r28, 0x0f	; 15
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <HLCD_voidInit>:

void HLCD_voidInit(void)
{
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	c6 54       	subi	r28, 0x46	; 70
    17a4:	d0 40       	sbci	r29, 0x00	; 0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	fe 01       	movw	r30, r28
    17b2:	ed 5b       	subi	r30, 0xBD	; 189
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 ef       	ldi	r26, 0xF0	; 240
    17bc:	b1 e4       	ldi	r27, 0x41	; 65
    17be:	80 83       	st	Z, r24
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	a2 83       	std	Z+2, r26	; 0x02
    17c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c6:	8e 01       	movw	r16, r28
    17c8:	01 5c       	subi	r16, 0xC1	; 193
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	fe 01       	movw	r30, r28
    17ce:	ed 5b       	subi	r30, 0xBD	; 189
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a ef       	ldi	r20, 0xFA	; 250
    17e0:	54 e4       	ldi	r21, 0x44	; 68
    17e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	80 83       	st	Z, r24
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	a2 83       	std	Z+2, r26	; 0x02
    17f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f4:	fe 01       	movw	r30, r28
    17f6:	ff 96       	adiw	r30, 0x3f	; 63
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    180c:	88 23       	and	r24, r24
    180e:	2c f4       	brge	.+10     	; 0x181a <HLCD_voidInit+0x84>
		__ticks = 1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9e af       	std	Y+62, r25	; 0x3e
    1816:	8d af       	std	Y+61, r24	; 0x3d
    1818:	46 c0       	rjmp	.+140    	; 0x18a6 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    181a:	fe 01       	movw	r30, r28
    181c:	ff 96       	adiw	r30, 0x3f	; 63
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	64 f5       	brge	.+88     	; 0x188e <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	fe 01       	movw	r30, r28
    1838:	ed 5b       	subi	r30, 0xBD	; 189
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e2       	ldi	r20, 0x20	; 32
    184a:	51 e4       	ldi	r21, 0x41	; 65
    184c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9e af       	std	Y+62, r25	; 0x3e
    1862:	8d af       	std	Y+61, r24	; 0x3d
    1864:	0f c0       	rjmp	.+30     	; 0x1884 <HLCD_voidInit+0xee>
    1866:	88 ec       	ldi	r24, 0xC8	; 200
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9c af       	std	Y+60, r25	; 0x3c
    186c:	8b af       	std	Y+59, r24	; 0x3b
    186e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1870:	9c ad       	ldd	r25, Y+60	; 0x3c
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <HLCD_voidInit+0xdc>
    1876:	9c af       	std	Y+60, r25	; 0x3c
    1878:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187a:	8d ad       	ldd	r24, Y+61	; 0x3d
    187c:	9e ad       	ldd	r25, Y+62	; 0x3e
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	9e af       	std	Y+62, r25	; 0x3e
    1882:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1884:	8d ad       	ldd	r24, Y+61	; 0x3d
    1886:	9e ad       	ldd	r25, Y+62	; 0x3e
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	69 f7       	brne	.-38     	; 0x1866 <HLCD_voidInit+0xd0>
    188c:	16 c0       	rjmp	.+44     	; 0x18ba <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188e:	fe 01       	movw	r30, r28
    1890:	ff 96       	adiw	r30, 0x3f	; 63
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e af       	std	Y+62, r25	; 0x3e
    18a4:	8d af       	std	Y+61, r24	; 0x3d
    18a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18aa:	9a af       	std	Y+58, r25	; 0x3a
    18ac:	89 af       	std	Y+57, r24	; 0x39
    18ae:	89 ad       	ldd	r24, Y+57	; 0x39
    18b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <HLCD_voidInit+0x11c>
    18b6:	9a af       	std	Y+58, r25	; 0x3a
    18b8:	89 af       	std	Y+57, r24	; 0x39
	// wait for more than 30ms after VDD rises to 4.5V
	_delay_ms(30);

	//Function Set Command then wait for 39us
	HLCD_voidSendCommand(FUCNTION_SET);
    18ba:	88 e3       	ldi	r24, 0x38	; 56
    18bc:	0e 94 8f 0a 	call	0x151e	; 0x151e <HLCD_voidSendCommand>
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a0 e8       	ldi	r26, 0x80	; 128
    18c6:	bf e3       	ldi	r27, 0x3F	; 63
    18c8:	8d ab       	std	Y+53, r24	; 0x35
    18ca:	9e ab       	std	Y+54, r25	; 0x36
    18cc:	af ab       	std	Y+55, r26	; 0x37
    18ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	6d a9       	ldd	r22, Y+53	; 0x35
    18d2:	7e a9       	ldd	r23, Y+54	; 0x36
    18d4:	8f a9       	ldd	r24, Y+55	; 0x37
    18d6:	98 ad       	ldd	r25, Y+56	; 0x38
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a ef       	ldi	r20, 0xFA	; 250
    18de:	54 e4       	ldi	r21, 0x44	; 68
    18e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	89 ab       	std	Y+49, r24	; 0x31
    18ea:	9a ab       	std	Y+50, r25	; 0x32
    18ec:	ab ab       	std	Y+51, r26	; 0x33
    18ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18f0:	69 a9       	ldd	r22, Y+49	; 0x31
    18f2:	7a a9       	ldd	r23, Y+50	; 0x32
    18f4:	8b a9       	ldd	r24, Y+51	; 0x33
    18f6:	9c a9       	ldd	r25, Y+52	; 0x34
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e8       	ldi	r20, 0x80	; 128
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1904:	88 23       	and	r24, r24
    1906:	2c f4       	brge	.+10     	; 0x1912 <HLCD_voidInit+0x17c>
		__ticks = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	98 ab       	std	Y+48, r25	; 0x30
    190e:	8f a7       	std	Y+47, r24	; 0x2f
    1910:	3f c0       	rjmp	.+126    	; 0x1990 <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1912:	69 a9       	ldd	r22, Y+49	; 0x31
    1914:	7a a9       	ldd	r23, Y+50	; 0x32
    1916:	8b a9       	ldd	r24, Y+51	; 0x33
    1918:	9c a9       	ldd	r25, Y+52	; 0x34
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	4f e7       	ldi	r20, 0x7F	; 127
    1920:	57 e4       	ldi	r21, 0x47	; 71
    1922:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1926:	18 16       	cp	r1, r24
    1928:	4c f5       	brge	.+82     	; 0x197c <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192a:	6d a9       	ldd	r22, Y+53	; 0x35
    192c:	7e a9       	ldd	r23, Y+54	; 0x36
    192e:	8f a9       	ldd	r24, Y+55	; 0x37
    1930:	98 ad       	ldd	r25, Y+56	; 0x38
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <HLCD_voidInit+0x1dc>
    1954:	88 ec       	ldi	r24, 0xC8	; 200
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9e a7       	std	Y+46, r25	; 0x2e
    195a:	8d a7       	std	Y+45, r24	; 0x2d
    195c:	8d a5       	ldd	r24, Y+45	; 0x2d
    195e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <HLCD_voidInit+0x1ca>
    1964:	9e a7       	std	Y+46, r25	; 0x2e
    1966:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1968:	8f a5       	ldd	r24, Y+47	; 0x2f
    196a:	98 a9       	ldd	r25, Y+48	; 0x30
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	98 ab       	std	Y+48, r25	; 0x30
    1970:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1972:	8f a5       	ldd	r24, Y+47	; 0x2f
    1974:	98 a9       	ldd	r25, Y+48	; 0x30
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	69 f7       	brne	.-38     	; 0x1954 <HLCD_voidInit+0x1be>
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197c:	69 a9       	ldd	r22, Y+49	; 0x31
    197e:	7a a9       	ldd	r23, Y+50	; 0x32
    1980:	8b a9       	ldd	r24, Y+51	; 0x33
    1982:	9c a9       	ldd	r25, Y+52	; 0x34
    1984:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	98 ab       	std	Y+48, r25	; 0x30
    198e:	8f a7       	std	Y+47, r24	; 0x2f
    1990:	8f a5       	ldd	r24, Y+47	; 0x2f
    1992:	98 a9       	ldd	r25, Y+48	; 0x30
    1994:	9c a7       	std	Y+44, r25	; 0x2c
    1996:	8b a7       	std	Y+43, r24	; 0x2b
    1998:	8b a5       	ldd	r24, Y+43	; 0x2b
    199a:	9c a5       	ldd	r25, Y+44	; 0x2c
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <HLCD_voidInit+0x206>
    19a0:	9c a7       	std	Y+44, r25	; 0x2c
    19a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Display On\Off Control then wait for 39us
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    19a4:	8f e0       	ldi	r24, 0x0F	; 15
    19a6:	0e 94 8f 0a 	call	0x151e	; 0x151e <HLCD_voidSendCommand>
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a0 e8       	ldi	r26, 0x80	; 128
    19b0:	bf e3       	ldi	r27, 0x3F	; 63
    19b2:	8f a3       	std	Y+39, r24	; 0x27
    19b4:	98 a7       	std	Y+40, r25	; 0x28
    19b6:	a9 a7       	std	Y+41, r26	; 0x29
    19b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	6f a1       	ldd	r22, Y+39	; 0x27
    19bc:	78 a5       	ldd	r23, Y+40	; 0x28
    19be:	89 a5       	ldd	r24, Y+41	; 0x29
    19c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a ef       	ldi	r20, 0xFA	; 250
    19c8:	54 e4       	ldi	r21, 0x44	; 68
    19ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8b a3       	std	Y+35, r24	; 0x23
    19d4:	9c a3       	std	Y+36, r25	; 0x24
    19d6:	ad a3       	std	Y+37, r26	; 0x25
    19d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19da:	6b a1       	ldd	r22, Y+35	; 0x23
    19dc:	7c a1       	ldd	r23, Y+36	; 0x24
    19de:	8d a1       	ldd	r24, Y+37	; 0x25
    19e0:	9e a1       	ldd	r25, Y+38	; 0x26
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	2c f4       	brge	.+10     	; 0x19fc <HLCD_voidInit+0x266>
		__ticks = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9a a3       	std	Y+34, r25	; 0x22
    19f8:	89 a3       	std	Y+33, r24	; 0x21
    19fa:	3f c0       	rjmp	.+126    	; 0x1a7a <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    19fc:	6b a1       	ldd	r22, Y+35	; 0x23
    19fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1a00:	8d a1       	ldd	r24, Y+37	; 0x25
    1a02:	9e a1       	ldd	r25, Y+38	; 0x26
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	3f ef       	ldi	r19, 0xFF	; 255
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	57 e4       	ldi	r21, 0x47	; 71
    1a0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	4c f5       	brge	.+82     	; 0x1a66 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a14:	6f a1       	ldd	r22, Y+39	; 0x27
    1a16:	78 a5       	ldd	r23, Y+40	; 0x28
    1a18:	89 a5       	ldd	r24, Y+41	; 0x29
    1a1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e2       	ldi	r20, 0x20	; 32
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9a a3       	std	Y+34, r25	; 0x22
    1a3a:	89 a3       	std	Y+33, r24	; 0x21
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <HLCD_voidInit+0x2c6>
    1a3e:	88 ec       	ldi	r24, 0xC8	; 200
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	98 a3       	std	Y+32, r25	; 0x20
    1a44:	8f 8f       	std	Y+31, r24	; 0x1f
    1a46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a48:	98 a1       	ldd	r25, Y+32	; 0x20
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <HLCD_voidInit+0x2b4>
    1a4e:	98 a3       	std	Y+32, r25	; 0x20
    1a50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	89 a1       	ldd	r24, Y+33	; 0x21
    1a54:	9a a1       	ldd	r25, Y+34	; 0x22
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	9a a3       	std	Y+34, r25	; 0x22
    1a5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <HLCD_voidInit+0x2a8>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	6b a1       	ldd	r22, Y+35	; 0x23
    1a68:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9a a3       	std	Y+34, r25	; 0x22
    1a78:	89 a3       	std	Y+33, r24	; 0x21
    1a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a80:	8d 8f       	std	Y+29, r24	; 0x1d
    1a82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <HLCD_voidInit+0x2f0>
    1a8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Display Clear then wait for 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	0e 94 8f 0a 	call	0x151e	; 0x151e <HLCD_voidSendCommand>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e4       	ldi	r27, 0x40	; 64
    1a9c:	89 8f       	std	Y+25, r24	; 0x19
    1a9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1aa0:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a ef       	ldi	r20, 0xFA	; 250
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8d 8b       	std	Y+21, r24	; 0x15
    1abe:	9e 8b       	std	Y+22, r25	; 0x16
    1ac0:	af 8b       	std	Y+23, r26	; 0x17
    1ac2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aca:	98 8d       	ldd	r25, Y+24	; 0x18
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <HLCD_voidInit+0x350>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 8b       	std	Y+20, r25	; 0x14
    1ae2:	8b 8b       	std	Y+19, r24	; 0x13
    1ae4:	3f c0       	rjmp	.+126    	; 0x1b64 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aea:	8f 89       	ldd	r24, Y+23	; 0x17
    1aec:	98 8d       	ldd	r25, Y+24	; 0x18
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	4c f5       	brge	.+82     	; 0x1b50 <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afe:	69 8d       	ldd	r22, Y+25	; 0x19
    1b00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e2       	ldi	r20, 0x20	; 32
    1b0c:	51 e4       	ldi	r21, 0x41	; 65
    1b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <HLCD_voidInit+0x3b0>
    1b28:	88 ec       	ldi	r24, 0xC8	; 200
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9a 8b       	std	Y+18, r25	; 0x12
    1b2e:	89 8b       	std	Y+17, r24	; 0x11
    1b30:	89 89       	ldd	r24, Y+17	; 0x11
    1b32:	9a 89       	ldd	r25, Y+18	; 0x12
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <HLCD_voidInit+0x39e>
    1b38:	9a 8b       	std	Y+18, r25	; 0x12
    1b3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	9c 8b       	std	Y+20, r25	; 0x14
    1b44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	8b 89       	ldd	r24, Y+19	; 0x13
    1b48:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <HLCD_voidInit+0x392>
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	6d 89       	ldd	r22, Y+21	; 0x15
    1b52:	7e 89       	ldd	r23, Y+22	; 0x16
    1b54:	8f 89       	ldd	r24, Y+23	; 0x17
    1b56:	98 8d       	ldd	r25, Y+24	; 0x18
    1b58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9c 8b       	std	Y+20, r25	; 0x14
    1b62:	8b 8b       	std	Y+19, r24	; 0x13
    1b64:	8b 89       	ldd	r24, Y+19	; 0x13
    1b66:	9c 89       	ldd	r25, Y+20	; 0x14
    1b68:	98 8b       	std	Y+16, r25	; 0x10
    1b6a:	8f 87       	std	Y+15, r24	; 0x0f
    1b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6e:	98 89       	ldd	r25, Y+16	; 0x10
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <HLCD_voidInit+0x3da>
    1b74:	98 8b       	std	Y+16, r25	; 0x10
    1b76:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	// Entry Mode then wait for 39us
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1b78:	86 e0       	ldi	r24, 0x06	; 6
    1b7a:	0e 94 8f 0a 	call	0x151e	; 0x151e <HLCD_voidSendCommand>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e8       	ldi	r26, 0x80	; 128
    1b84:	bf e3       	ldi	r27, 0x3F	; 63
    1b86:	8b 87       	std	Y+11, r24	; 0x0b
    1b88:	9c 87       	std	Y+12, r25	; 0x0c
    1b8a:	ad 87       	std	Y+13, r26	; 0x0d
    1b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a ef       	ldi	r20, 0xFA	; 250
    1b9c:	54 e4       	ldi	r21, 0x44	; 68
    1b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8f 83       	std	Y+7, r24	; 0x07
    1ba8:	98 87       	std	Y+8, r25	; 0x08
    1baa:	a9 87       	std	Y+9, r26	; 0x09
    1bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <HLCD_voidInit+0x43a>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <HLCD_voidInit+0x49a>
    1c12:	88 ec       	ldi	r24, 0xC8	; 200
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c 83       	std	Y+4, r25	; 0x04
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <HLCD_voidInit+0x488>
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <HLCD_voidInit+0x47c>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <HLCD_voidInit+0x4c4>
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1c62:	ca 5b       	subi	r28, 0xBA	; 186
    1c64:	df 4f       	sbci	r29, 0xFF	; 255
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	2e 97       	sbiw	r28, 0x0e	; 14
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
	// Display Clear then wait for 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	0e 94 8f 0a 	call	0x151e	; 0x151e <HLCD_voidSendCommand>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e0       	ldi	r26, 0x00	; 0
    1c9a:	b0 e4       	ldi	r27, 0x40	; 64
    1c9c:	8b 87       	std	Y+11, r24	; 0x0b
    1c9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ca0:	ad 87       	std	Y+13, r26	; 0x0d
    1ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a ef       	ldi	r20, 0xFA	; 250
    1cb2:	54 e4       	ldi	r21, 0x44	; 68
    1cb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8f 83       	std	Y+7, r24	; 0x07
    1cbe:	98 87       	std	Y+8, r25	; 0x08
    1cc0:	a9 87       	std	Y+9, r26	; 0x09
    1cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc6:	78 85       	ldd	r23, Y+8	; 0x08
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce8:	78 85       	ldd	r23, Y+8	; 0x08
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <HLCD_voidClearDisplay+0xcc>
    1d28:	88 ec       	ldi	r24, 0xC8	; 200
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9c 83       	std	Y+4, r25	; 0x04
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <HLCD_voidClearDisplay+0xba>
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <HLCD_voidClearDisplay+0xae>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <HLCD_voidClearDisplay+0xf6>
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d78:	2e 96       	adiw	r28, 0x0e	; 14
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <HLCD_voidDisplayString>:

void HLCD_voidDisplayString(u8 *A_u8PtrToString)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <HLCD_voidDisplayString+0x6>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	0b c0       	rjmp	.+22     	; 0x1db0 <HLCD_voidDisplayString+0x26>

	while(*A_u8PtrToString >0)
	{

		HLCD_voidSendData(*A_u8PtrToString++);
    1d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9e:	20 81       	ld	r18, Z
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	82 2f       	mov	r24, r18
    1dac:	0e 94 2d 0b 	call	0x165a	; 0x165a <HLCD_voidSendData>
}

void HLCD_voidDisplayString(u8 *A_u8PtrToString)
{

	while(*A_u8PtrToString >0)
    1db0:	e9 81       	ldd	r30, Y+1	; 0x01
    1db2:	fa 81       	ldd	r31, Y+2	; 0x02
    1db4:	80 81       	ld	r24, Z
    1db6:	88 23       	and	r24, r24
    1db8:	81 f7       	brne	.-32     	; 0x1d9a <HLCD_voidDisplayString+0x10>
	{

		HLCD_voidSendData(*A_u8PtrToString++);
	}
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <HLCD_voidGoToPos>:


void HLCD_voidGoToPos(LCD_ROW_e A_LCDRow, LCD_COL_e A_LCDCol)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <HLCD_voidGoToPos+0x6>
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <HLCD_voidGoToPos+0x8>
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_LCDRow)
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	3c 83       	std	Y+4, r19	; 0x04
    1ddc:	2b 83       	std	Y+3, r18	; 0x03
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	91 05       	cpc	r25, r1
    1de6:	31 f0       	breq	.+12     	; 0x1df4 <HLCD_voidGoToPos+0x30>
    1de8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dea:	3c 81       	ldd	r19, Y+4	; 0x04
    1dec:	22 30       	cpi	r18, 0x02	; 2
    1dee:	31 05       	cpc	r19, r1
    1df0:	31 f0       	breq	.+12     	; 0x1dfe <HLCD_voidGoToPos+0x3a>
    1df2:	09 c0       	rjmp	.+18     	; 0x1e06 <HLCD_voidGoToPos+0x42>
	{
	case LCD_ROW1:
		HLCD_voidSendCommand(ROW1_BASE_ADD + A_LCDCol);
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	81 58       	subi	r24, 0x81	; 129
    1df8:	0e 94 8f 0a 	call	0x151e	; 0x151e <HLCD_voidSendCommand>
    1dfc:	04 c0       	rjmp	.+8      	; 0x1e06 <HLCD_voidGoToPos+0x42>
		break;
	case LCD_ROW2:
		HLCD_voidSendCommand(ROW2_BASE_ADD + A_LCDCol);
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	81 54       	subi	r24, 0x41	; 65
    1e02:	0e 94 8f 0a 	call	0x151e	; 0x151e <HLCD_voidSendCommand>
		break;
	default:
		break;
	}

}
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(u32 A_u32Number)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <HLCD_voidDisplayNumber+0x6>
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <HLCD_voidDisplayNumber+0x8>
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
	u32 local_u32Number=1;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01
	if(A_u32Number == 0 )
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	31 f5       	brne	.+76     	; 0x1e80 <HLCD_voidDisplayNumber+0x6c>
	{
		HLCD_voidSendData('0');
    1e34:	80 e3       	ldi	r24, 0x30	; 48
    1e36:	0e 94 2d 0b 	call	0x165a	; 0x165a <HLCD_voidSendData>
    1e3a:	22 c0       	rjmp	.+68     	; 0x1e80 <HLCD_voidDisplayNumber+0x6c>
	}

	while(local_u32Number != 0)
	{
		local_u32Number = (local_u32Number *10) +(A_u32Number %10);
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	9c 01       	movw	r18, r24
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	c9 01       	movw	r24, r18
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	f9 01       	movw	r30, r18
    1e52:	e8 0f       	add	r30, r24
    1e54:	f9 1f       	adc	r31, r25
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	2a e0       	ldi	r18, 0x0A	; 10
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	b9 01       	movw	r22, r18
    1e60:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodhi4>
    1e64:	8e 0f       	add	r24, r30
    1e66:	9f 1f       	adc	r25, r31
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	89 83       	std	Y+1, r24	; 0x01
		A_u32Number = A_u32Number/10;
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	2a e0       	ldi	r18, 0x0A	; 10
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	b9 01       	movw	r22, r18
    1e76:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodhi4>
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
	if(A_u32Number == 0 )
	{
		HLCD_voidSendData('0');
	}

	while(local_u32Number != 0)
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	d1 f6       	brne	.-76     	; 0x1e3c <HLCD_voidDisplayNumber+0x28>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <HLCD_voidDisplayNumber+0x9e>
		A_u32Number = A_u32Number/10;

	}
	while(local_u32Number != 1)
	{
		HLCD_voidSendData( (local_u32Number %10) + 48);
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	2a e0       	ldi	r18, 0x0A	; 10
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	b9 01       	movw	r22, r18
    1e94:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodhi4>
    1e98:	80 5d       	subi	r24, 0xD0	; 208
    1e9a:	0e 94 2d 0b 	call	0x165a	; 0x165a <HLCD_voidSendData>
		local_u32Number = local_u32Number/10;
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	2a e0       	ldi	r18, 0x0A	; 10
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	b9 01       	movw	r22, r18
    1ea8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodhi4>
    1eac:	cb 01       	movw	r24, r22
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
	{
		local_u32Number = (local_u32Number *10) +(A_u32Number %10);
		A_u32Number = A_u32Number/10;

	}
	while(local_u32Number != 1)
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	91 05       	cpc	r25, r1
    1eba:	39 f7       	brne	.-50     	; 0x1e8a <HLCD_voidDisplayNumber+0x76>
	{
		HLCD_voidSendData( (local_u32Number %10) + 48);
		local_u32Number = local_u32Number/10;
	}
}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <HLCD_voidSendSpecialSymbol>:




void HLCD_voidSendSpecialSymbol(u8 *A_pu8SymbolArray,LCD_PATTERNS_e A_patternNum, LCD_ROW_e A_RowNo, LCD_COL_e A_ColNo )
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	27 97       	sbiw	r28, 0x07	; 7
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	6d 83       	std	Y+5, r22	; 0x05
    1ee4:	4e 83       	std	Y+6, r20	; 0x06
    1ee6:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress;

	//Calculate CGRAM Address
	local_u8CGRAMAddress = A_patternNum * 8;
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	80 64       	ori	r24, 0x40	; 64
    1f00:	8a 83       	std	Y+2, r24	; 0x02
	// send Set CGRAM Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	0e 94 8f 0a 	call	0x151e	; 0x151e <HLCD_voidSendCommand>

	for(u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    1f08:	19 82       	std	Y+1, r1	; 0x01
    1f0a:	0e c0       	rjmp	.+28     	; 0x1f28 <HLCD_voidSendSpecialSymbol+0x5e>
	{
		// send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	fc 01       	movw	r30, r24
    1f18:	e2 0f       	add	r30, r18
    1f1a:	f3 1f       	adc	r31, r19
    1f1c:	80 81       	ld	r24, Z
    1f1e:	0e 94 2d 0b 	call	0x165a	; 0x165a <HLCD_voidSendData>
	local_u8CGRAMAddress = A_patternNum * 8;
	SET_BIT(local_u8CGRAMAddress,6);
	// send Set CGRAM Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);

	for(u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	88 30       	cpi	r24, 0x08	; 8
    1f2c:	78 f3       	brcs	.-34     	; 0x1f0c <HLCD_voidSendSpecialSymbol+0x42>
	{
		// send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
	}
		// Send Command to Set DDRAM Address
		HLCD_voidGoToPos(A_RowNo,A_ColNo);
    1f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f30:	6f 81       	ldd	r22, Y+7	; 0x07
    1f32:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <HLCD_voidGoToPos>

		//Display Pattern
		HLCD_voidSendData(A_patternNum);
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	0e 94 2d 0b 	call	0x165a	; 0x165a <HLCD_voidSendData>

}
    1f3c:	27 96       	adiw	r28, 0x07	; 7
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <HLED_voidTurnLEDOn>:
#include "../Include/HAL/LED/LED_Private.h"
#include "../Include/HAL/LED/LED_cfg.h"


void HLED_voidTurnLEDOn(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <HLED_voidTurnLEDOn+0x6>
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_portID ,A_pinID , DIO_SET);
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>
}
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <HLED_voidTurnLEDOff>:
void HLED_voidTurnLEDOff(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <HLED_voidTurnLEDOff+0x6>
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_portID ,A_pinID , DIO_RESET);
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	6a 81       	ldd	r22, Y+2	; 0x02
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MDIO_voidSetPinValue>
}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <HLED_voidToggleLED>:
void HLED_voidToggleLED(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <HLED_voidToggleLED+0x6>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_portID,A_pinID);
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	6a 81       	ldd	r22, Y+2	; 0x02
    1fa4:	0e 94 80 08 	call	0x1100	; 0x1100 <MDIO_voidTogglePinValue>
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <TWI_voidInitMaster>:
#include "../include/MCAL/TWI/TWI_Private.h"
#include "../include/MCAL/TWI/TWI_Cfg.h"

/*Set Master Address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	0f 92       	push	r0
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    1fbe:	a6 e5       	ldi	r26, 0x56	; 86
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e6 e5       	ldi	r30, 0x56	; 86
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 64       	ori	r24, 0x40	; 64
    1fca:	8c 93       	st	X, r24

	/*Set SCL frequency to 100KHz, with 8MHz system frequency*/
	/*1- Set TWBR = 2*/
	TWBR = 2;
    1fcc:	e0 e2       	ldi	r30, 0x20	; 32
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	80 83       	st	Z, r24
	/*2- Clear The Prescaler bit (TWPS0 - TWPS1)*/
	CLR_BIT(TWSR, TWSR_TWPS0);
    1fd4:	a1 e2       	ldi	r26, 0x21	; 33
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e1 e2       	ldi	r30, 0x21	; 33
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	8e 7f       	andi	r24, 0xFE	; 254
    1fe0:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
    1fe2:	a1 e2       	ldi	r26, 0x21	; 33
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e1 e2       	ldi	r30, 0x21	; 33
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	8d 7f       	andi	r24, 0xFD	; 253
    1fee:	8c 93       	st	X, r24

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	88 23       	and	r24, r24
    1ff4:	29 f0       	breq	.+10     	; 0x2000 <TWI_voidInitMaster+0x4e>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/ //bits from 1 to 7
		TWAR = (Copy_u8Address << 1);
    1ff6:	e2 e2       	ldi	r30, 0x22	; 34
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	88 0f       	add	r24, r24
    1ffe:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    2000:	a6 e5       	ldi	r26, 0x56	; 86
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e6 e5       	ldi	r30, 0x56	; 86
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	84 60       	ori	r24, 0x04	; 4
    200c:	8c 93       	st	X, r24
}
    200e:	0f 90       	pop	r0
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	0f 92       	push	r0
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Required Address to The Slave*/
	TWAR = Copy_u8Address << 1;
    2022:	e2 e2       	ldi	r30, 0x22	; 34
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	88 0f       	add	r24, r24
    202a:	80 83       	st	Z, r24

	/*Enable Acknowledge Bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    202c:	a6 e5       	ldi	r26, 0x56	; 86
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e6 e5       	ldi	r30, 0x56	; 86
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	80 64       	ori	r24, 0x40	; 64
    2038:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    203a:	a6 e5       	ldi	r26, 0x56	; 86
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e6 e5       	ldi	r30, 0x56	; 86
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	84 60       	ori	r24, 0x04	; 4
    2046:	8c 93       	st	X, r24
}
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <TWI_ErrorStatusSendStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendStartConditionWithACK(void)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	0f 92       	push	r0
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    205a:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA);
    205c:	a6 e5       	ldi	r26, 0x56	; 86
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e6 e5       	ldi	r30, 0x56	; 86
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	80 62       	ori	r24, 0x20	; 32
    2068:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    206a:	a6 e5       	ldi	r26, 0x56	; 86
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e6 e5       	ldi	r30, 0x56	; 86
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 68       	ori	r24, 0x80	; 128
    2076:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    2078:	e6 e5       	ldi	r30, 0x56	; 86
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	88 23       	and	r24, r24
    2080:	dc f7       	brge	.-10     	; 0x2078 <TWI_ErrorStatusSendStartConditionWithACK+0x28>

	if((TWSR & STATUS_BIT_MASK) != START_ACK)
    2082:	e1 e2       	ldi	r30, 0x21	; 33
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	88 7f       	andi	r24, 0xF8	; 248
    208e:	90 70       	andi	r25, 0x00	; 0
    2090:	88 30       	cpi	r24, 0x08	; 8
    2092:	91 05       	cpc	r25, r1
    2094:	11 f0       	breq	.+4      	; 0x209a <TWI_ErrorStatusSendStartConditionWithACK+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
}
    209c:	0f 90       	pop	r0
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	0f 92       	push	r0
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    20ae:	19 82       	std	Y+1, r1	; 0x01
	// clear INT flag
	// Send Repeated Start Condition
	// Enable TWI
	TWCR |= (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
    20b0:	a6 e5       	ldi	r26, 0x56	; 86
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e6 e5       	ldi	r30, 0x56	; 86
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	84 6a       	ori	r24, 0xA4	; 164
    20bc:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    20be:	e6 e5       	ldi	r30, 0x56	; 86
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	88 23       	and	r24, r24
    20c6:	dc f7       	brge	.-10     	; 0x20be <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x1a>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != REP_START_ACK)
    20c8:	e1 e2       	ldi	r30, 0x21	; 33
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	88 7f       	andi	r24, 0xF8	; 248
    20d4:	90 70       	andi	r25, 0x00	; 0
    20d6:	80 31       	cpi	r24, 0x10	; 16
    20d8:	91 05       	cpc	r25, r1
    20da:	11 f0       	breq	.+4      	; 0x20e0 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x3c>
	{
		Local_ErrorStatus = RepeatedStartError;
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do Nothing*/
	}
	return Local_ErrorStatus;
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <TWI_ErrorStatusSendSlaveAddressWithWriteACK>:


TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithWriteACK(u8 Copy_u8SlaveAddress)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x6>
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    20f6:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    20f8:	e3 e2       	ldi	r30, 0x23	; 35
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	88 0f       	add	r24, r24
    2100:	80 83       	st	Z, r24

	/*Set The Write Request in the LSB in the data Register*/
	CLR_BIT(TWDR, TWDR_TWD0);
    2102:	a3 e2       	ldi	r26, 0x23	; 35
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e3 e2       	ldi	r30, 0x23	; 35
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	8e 7f       	andi	r24, 0xFE	; 254
    210e:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    2110:	a6 e5       	ldi	r26, 0x56	; 86
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e6 e5       	ldi	r30, 0x56	; 86
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8f 7d       	andi	r24, 0xDF	; 223
    211c:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    211e:	a6 e5       	ldi	r26, 0x56	; 86
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e6 e5       	ldi	r30, 0x56	; 86
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	80 68       	ori	r24, 0x80	; 128
    212a:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    212c:	e6 e5       	ldi	r30, 0x56	; 86
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	88 23       	and	r24, r24
    2134:	dc f7       	brge	.-10     	; 0x212c <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_WR_ACK)
    2136:	e1 e2       	ldi	r30, 0x21	; 33
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	88 7f       	andi	r24, 0xF8	; 248
    2142:	90 70       	andi	r25, 0x00	; 0
    2144:	88 31       	cpi	r24, 0x18	; 24
    2146:	91 05       	cpc	r25, r1
    2148:	11 f0       	breq	.+4      	; 0x214e <TWI_ErrorStatusSendSlaveAddressWithWriteACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    214e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <TWI_ErrorStatusSendSlaveAddressWithReadACK>:



TWI_ErrorStatus_t TWI_ErrorStatusSendSlaveAddressWithReadACK(u8 Copy_u8SlaveAddress)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	00 d0       	rcall	.+0      	; 0x2160 <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x6>
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    2166:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7 bits slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    2168:	e3 e2       	ldi	r30, 0x23	; 35
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	88 0f       	add	r24, r24
    2170:	80 83       	st	Z, r24

	/*Set The Read Request in the LSB in the data Register*/
	SET_BIT(TWDR, TWDR_TWD0);
    2172:	a3 e2       	ldi	r26, 0x23	; 35
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e3 e2       	ldi	r30, 0x23	; 35
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	81 60       	ori	r24, 0x01	; 1
    217e:	8c 93       	st	X, r24

	/*Clear The Start Condition Bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    2180:	a6 e5       	ldi	r26, 0x56	; 86
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e6 e5       	ldi	r30, 0x56	; 86
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	8f 7d       	andi	r24, 0xDF	; 223
    218c:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    218e:	a6 e5       	ldi	r26, 0x56	; 86
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e6 e5       	ldi	r30, 0x56	; 86
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	80 68       	ori	r24, 0x80	; 128
    219a:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    219c:	e6 e5       	ldi	r30, 0x56	; 86
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	88 23       	and	r24, r24
    21a4:	dc f7       	brge	.-10     	; 0x219c <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x42>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != SLAVE_ADD_AND_RD_ACK)
    21a6:	e1 e2       	ldi	r30, 0x21	; 33
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	88 2f       	mov	r24, r24
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	88 7f       	andi	r24, 0xF8	; 248
    21b2:	90 70       	andi	r25, 0x00	; 0
    21b4:	80 34       	cpi	r24, 0x40	; 64
    21b6:	91 05       	cpc	r25, r1
    21b8:	11 f0       	breq	.+4      	; 0x21be <TWI_ErrorStatusSendSlaveAddressWithReadACK+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
    21ba:	84 e0       	ldi	r24, 0x04	; 4
    21bc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    21be:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <TWI_ErrorStatusMasterWriteDataByteWithACK>:




TWI_ErrorStatus_t TWI_ErrorStatusMasterWriteDataByteWithACK(u8 Copy_u8DataByte)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x6>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    21d6:	19 82       	std	Y+1, r1	; 0x01

	/*Set The Data To The TWDR Register*/
	TWDR = Copy_u8DataByte;
    21d8:	e3 e2       	ldi	r30, 0x23	; 35
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	80 83       	st	Z, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    21e0:	a6 e5       	ldi	r26, 0x56	; 86
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e6 e5       	ldi	r30, 0x56	; 86
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	80 68       	ori	r24, 0x80	; 128
    21ec:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    21ee:	e6 e5       	ldi	r30, 0x56	; 86
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	88 23       	and	r24, r24
    21f6:	dc f7       	brge	.-10     	; 0x21ee <TWI_ErrorStatusMasterWriteDataByteWithACK+0x24>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_WR_BYTE_ACK)
    21f8:	e1 e2       	ldi	r30, 0x21	; 33
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	88 7f       	andi	r24, 0xF8	; 248
    2204:	90 70       	andi	r25, 0x00	; 0
    2206:	88 32       	cpi	r24, 0x28	; 40
    2208:	91 05       	cpc	r25, r1
    220a:	11 f0       	breq	.+4      	; 0x2210 <TWI_ErrorStatusMasterWriteDataByteWithACK+0x46>
	{
		Local_ErrorStatus = MasterWriteByteWithACKError;
    220c:	85 e0       	ldi	r24, 0x05	; 5
    220e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    2210:	89 81       	ldd	r24, Y+1	; 0x01
}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <TWI_ErrorStatusMasterReadDataByteWithACK>:


TWI_ErrorStatus_t TWI_ErrorStatusMasterReadDataByteWithACK(u8 * Copy_pu8ReceivedByte)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	00 d0       	rcall	.+0      	; 0x2222 <TWI_ErrorStatusMasterReadDataByteWithACK+0x6>
    2222:	0f 92       	push	r0
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	9b 83       	std	Y+3, r25	; 0x03
    222a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    222c:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The TWINT Flag, To Make The Slave To Send its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    222e:	a6 e5       	ldi	r26, 0x56	; 86
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e6 e5       	ldi	r30, 0x56	; 86
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	80 68       	ori	r24, 0x80	; 128
    223a:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0 );
    223c:	e6 e5       	ldi	r30, 0x56	; 86
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	88 23       	and	r24, r24
    2244:	dc f7       	brge	.-10     	; 0x223c <TWI_ErrorStatusMasterReadDataByteWithACK+0x20>

	/*Check For The Condition Status Code*/
	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    2246:	e1 e2       	ldi	r30, 0x21	; 33
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	88 7f       	andi	r24, 0xF8	; 248
    2252:	90 70       	andi	r25, 0x00	; 0
    2254:	80 35       	cpi	r24, 0x50	; 80
    2256:	91 05       	cpc	r25, r1
    2258:	19 f0       	breq	.+6      	; 0x2260 <TWI_ErrorStatusMasterReadDataByteWithACK+0x44>
	{
		Local_ErrorStatus = MasterReadByteWithACKError;
    225a:	86 e0       	ldi	r24, 0x06	; 6
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	06 c0       	rjmp	.+12     	; 0x226c <TWI_ErrorStatusMasterReadDataByteWithACK+0x50>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_pu8ReceivedByte = TWDR;
    2260:	e3 e2       	ldi	r30, 0x23	; 35
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	ea 81       	ldd	r30, Y+2	; 0x02
    2268:	fb 81       	ldd	r31, Y+3	; 0x03
    226a:	80 83       	st	Z, r24
	}

	return Local_ErrorStatus;
    226c:	89 81       	ldd	r24, Y+1	; 0x01

}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <TWI_voidSendStopCondition>:


void TWI_voidSendStopCondition(void)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
	/*Send a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    2282:	a6 e5       	ldi	r26, 0x56	; 86
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e6 e5       	ldi	r30, 0x56	; 86
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	80 61       	ori	r24, 0x10	; 16
    228e:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    2290:	a6 e5       	ldi	r26, 0x56	; 86
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e6 e5       	ldi	r30, 0x56	; 86
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	80 68       	ori	r24, 0x80	; 128
    229c:	8c 93       	st	X, r24
}
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <__udivmodhi4>:
    22a4:	aa 1b       	sub	r26, r26
    22a6:	bb 1b       	sub	r27, r27
    22a8:	51 e1       	ldi	r21, 0x11	; 17
    22aa:	07 c0       	rjmp	.+14     	; 0x22ba <__udivmodhi4_ep>

000022ac <__udivmodhi4_loop>:
    22ac:	aa 1f       	adc	r26, r26
    22ae:	bb 1f       	adc	r27, r27
    22b0:	a6 17       	cp	r26, r22
    22b2:	b7 07       	cpc	r27, r23
    22b4:	10 f0       	brcs	.+4      	; 0x22ba <__udivmodhi4_ep>
    22b6:	a6 1b       	sub	r26, r22
    22b8:	b7 0b       	sbc	r27, r23

000022ba <__udivmodhi4_ep>:
    22ba:	88 1f       	adc	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	5a 95       	dec	r21
    22c0:	a9 f7       	brne	.-22     	; 0x22ac <__udivmodhi4_loop>
    22c2:	80 95       	com	r24
    22c4:	90 95       	com	r25
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	08 95       	ret

000022cc <__prologue_saves__>:
    22cc:	2f 92       	push	r2
    22ce:	3f 92       	push	r3
    22d0:	4f 92       	push	r4
    22d2:	5f 92       	push	r5
    22d4:	6f 92       	push	r6
    22d6:	7f 92       	push	r7
    22d8:	8f 92       	push	r8
    22da:	9f 92       	push	r9
    22dc:	af 92       	push	r10
    22de:	bf 92       	push	r11
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	ca 1b       	sub	r28, r26
    22f6:	db 0b       	sbc	r29, r27
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	09 94       	ijmp

00002304 <__epilogue_restores__>:
    2304:	2a 88       	ldd	r2, Y+18	; 0x12
    2306:	39 88       	ldd	r3, Y+17	; 0x11
    2308:	48 88       	ldd	r4, Y+16	; 0x10
    230a:	5f 84       	ldd	r5, Y+15	; 0x0f
    230c:	6e 84       	ldd	r6, Y+14	; 0x0e
    230e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2310:	8c 84       	ldd	r8, Y+12	; 0x0c
    2312:	9b 84       	ldd	r9, Y+11	; 0x0b
    2314:	aa 84       	ldd	r10, Y+10	; 0x0a
    2316:	b9 84       	ldd	r11, Y+9	; 0x09
    2318:	c8 84       	ldd	r12, Y+8	; 0x08
    231a:	df 80       	ldd	r13, Y+7	; 0x07
    231c:	ee 80       	ldd	r14, Y+6	; 0x06
    231e:	fd 80       	ldd	r15, Y+5	; 0x05
    2320:	0c 81       	ldd	r16, Y+4	; 0x04
    2322:	1b 81       	ldd	r17, Y+3	; 0x03
    2324:	aa 81       	ldd	r26, Y+2	; 0x02
    2326:	b9 81       	ldd	r27, Y+1	; 0x01
    2328:	ce 0f       	add	r28, r30
    232a:	d1 1d       	adc	r29, r1
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	ed 01       	movw	r28, r26
    2338:	08 95       	ret

0000233a <_exit>:
    233a:	f8 94       	cli

0000233c <__stop_program>:
    233c:	ff cf       	rjmp	.-2      	; 0x233c <__stop_program>
