
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f2  00800060  000038ce  00003942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003384  00000000  00000000  00003b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000015af  00000000  00000000  00006eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00008467  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  000085e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  000087ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  0000a7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  0000b939  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000c93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000cadc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000cd9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d64b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 35       	cpi	r26, 0x52	; 82
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <main>
      7a:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e1       	ldi	r26, 0x1E	; 30
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e1       	ldi	r24, 0x1E	; 30
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 5a 1c 	jmp	0x38b4	; 0x38b4 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	ea 5d       	subi	r30, 0xDA	; 218
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <SmartHomeLoginPassword>:

#define F_CPU 12000000UL


void SmartHomeLoginPassword()
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	ae 97       	sbiw	r28, 0x2e	; 46
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
	u16 L_Password;
	u8 PasswordStatus = UnValid;
     cda:	1c a6       	std	Y+44, r1	; 0x2c

	HLCD_vDisplayString("Enter password: ");
     cdc:	80 e6       	ldi	r24, 0x60	; 96
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
	HLCD_vGoToPos(LCD_ROW2 , LCD_COL1);
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	0e 94 a3 19 	call	0x3346	; 0x3346 <HLCD_vGoToPos>



	for(u8 i=0; i <3; i++)
     cec:	1b a6       	std	Y+43, r1	; 0x2b
     cee:	8a c1       	rjmp	.+788    	; 0x1004 <SmartHomeLoginPassword+0x33e>
	{
		L_Password= HKEYPAD_u16MultiDigitInput();
     cf0:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <HKEYPAD_u16MultiDigitInput>
     cf4:	9e a7       	std	Y+46, r25	; 0x2e
     cf6:	8d a7       	std	Y+45, r24	; 0x2d

		if(L_Password == Password)
     cf8:	8d a5       	ldd	r24, Y+45	; 0x2d
     cfa:	9e a5       	ldd	r25, Y+46	; 0x2e
     cfc:	8b 37       	cpi	r24, 0x7B	; 123
     cfe:	91 05       	cpc	r25, r1
     d00:	11 f4       	brne	.+4      	; 0xd06 <SmartHomeLoginPassword+0x40>
		{
			PasswordStatus = Valid;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	8c a7       	std	Y+44, r24	; 0x2c
		}
		if(PasswordStatus == Valid)
     d06:	8c a5       	ldd	r24, Y+44	; 0x2c
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	09 f0       	breq	.+2      	; 0xd0e <SmartHomeLoginPassword+0x48>
     d0c:	7b c0       	rjmp	.+246    	; 0xe04 <SmartHomeLoginPassword+0x13e>
		{
			HLCD_vClearDisplay();
     d0e:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
			HLCD_vDisplayString("Welcome Helal");
     d12:	81 e7       	ldi	r24, 0x71	; 113
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a8 e4       	ldi	r26, 0x48	; 72
     d20:	b3 e4       	ldi	r27, 0x43	; 67
     d22:	8f a3       	std	Y+39, r24	; 0x27
     d24:	98 a7       	std	Y+40, r25	; 0x28
     d26:	a9 a7       	std	Y+41, r26	; 0x29
     d28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2a:	6f a1       	ldd	r22, Y+39	; 0x27
     d2c:	78 a5       	ldd	r23, Y+40	; 0x28
     d2e:	89 a5       	ldd	r24, Y+41	; 0x29
     d30:	9a a5       	ldd	r25, Y+42	; 0x2a
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e8       	ldi	r19, 0x80	; 128
     d36:	4b e3       	ldi	r20, 0x3B	; 59
     d38:	55 e4       	ldi	r21, 0x45	; 69
     d3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8b a3       	std	Y+35, r24	; 0x23
     d44:	9c a3       	std	Y+36, r25	; 0x24
     d46:	ad a3       	std	Y+37, r26	; 0x25
     d48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d4a:	6b a1       	ldd	r22, Y+35	; 0x23
     d4c:	7c a1       	ldd	r23, Y+36	; 0x24
     d4e:	8d a1       	ldd	r24, Y+37	; 0x25
     d50:	9e a1       	ldd	r25, Y+38	; 0x26
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e8       	ldi	r20, 0x80	; 128
     d58:	5f e3       	ldi	r21, 0x3F	; 63
     d5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d5e:	88 23       	and	r24, r24
     d60:	2c f4       	brge	.+10     	; 0xd6c <SmartHomeLoginPassword+0xa6>
		__ticks = 1;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9a a3       	std	Y+34, r25	; 0x22
     d68:	89 a3       	std	Y+33, r24	; 0x21
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <SmartHomeLoginPassword+0x124>
	else if (__tmp > 65535)
     d6c:	6b a1       	ldd	r22, Y+35	; 0x23
     d6e:	7c a1       	ldd	r23, Y+36	; 0x24
     d70:	8d a1       	ldd	r24, Y+37	; 0x25
     d72:	9e a1       	ldd	r25, Y+38	; 0x26
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	3f ef       	ldi	r19, 0xFF	; 255
     d78:	4f e7       	ldi	r20, 0x7F	; 127
     d7a:	57 e4       	ldi	r21, 0x47	; 71
     d7c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d80:	18 16       	cp	r1, r24
     d82:	4c f5       	brge	.+82     	; 0xdd6 <SmartHomeLoginPassword+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d84:	6f a1       	ldd	r22, Y+39	; 0x27
     d86:	78 a5       	ldd	r23, Y+40	; 0x28
     d88:	89 a5       	ldd	r24, Y+41	; 0x29
     d8a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9a a3       	std	Y+34, r25	; 0x22
     daa:	89 a3       	std	Y+33, r24	; 0x21
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <SmartHomeLoginPassword+0x106>
     dae:	8c e2       	ldi	r24, 0x2C	; 44
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	98 a3       	std	Y+32, r25	; 0x20
     db4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db8:	98 a1       	ldd	r25, Y+32	; 0x20
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <SmartHomeLoginPassword+0xf4>
     dbe:	98 a3       	std	Y+32, r25	; 0x20
     dc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc2:	89 a1       	ldd	r24, Y+33	; 0x21
     dc4:	9a a1       	ldd	r25, Y+34	; 0x22
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9a a3       	std	Y+34, r25	; 0x22
     dca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dcc:	89 a1       	ldd	r24, Y+33	; 0x21
     dce:	9a a1       	ldd	r25, Y+34	; 0x22
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	69 f7       	brne	.-38     	; 0xdae <SmartHomeLoginPassword+0xe8>
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <SmartHomeLoginPassword+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd6:	6b a1       	ldd	r22, Y+35	; 0x23
     dd8:	7c a1       	ldd	r23, Y+36	; 0x24
     dda:	8d a1       	ldd	r24, Y+37	; 0x25
     ddc:	9e a1       	ldd	r25, Y+38	; 0x26
     dde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9a a3       	std	Y+34, r25	; 0x22
     de8:	89 a3       	std	Y+33, r24	; 0x21
     dea:	89 a1       	ldd	r24, Y+33	; 0x21
     dec:	9a a1       	ldd	r25, Y+34	; 0x22
     dee:	9e 8f       	std	Y+30, r25	; 0x1e
     df0:	8d 8f       	std	Y+29, r24	; 0x1d
     df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <SmartHomeLoginPassword+0x130>
     dfa:	9e 8f       	std	Y+30, r25	; 0x1e
     dfc:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);
			HLCD_vClearDisplay();
     dfe:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
     e02:	04 c1       	rjmp	.+520    	; 0x100c <SmartHomeLoginPassword+0x346>
			break;
		}
		else
		{
			if(i < 2)
     e04:	8b a5       	ldd	r24, Y+43	; 0x2b
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	08 f0       	brcs	.+2      	; 0xe0c <SmartHomeLoginPassword+0x146>
     e0a:	7f c0       	rjmp	.+254    	; 0xf0a <SmartHomeLoginPassword+0x244>
			{
				HLCD_vClearDisplay();
     e0c:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
				HLCD_vDisplayString("Try Again");
     e10:	8f e7       	ldi	r24, 0x7F	; 127
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a8 e4       	ldi	r26, 0x48	; 72
     e1e:	b3 e4       	ldi	r27, 0x43	; 67
     e20:	89 8f       	std	Y+25, r24	; 0x19
     e22:	9a 8f       	std	Y+26, r25	; 0x1a
     e24:	ab 8f       	std	Y+27, r26	; 0x1b
     e26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e28:	69 8d       	ldd	r22, Y+25	; 0x19
     e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e8       	ldi	r19, 0x80	; 128
     e34:	4b e3       	ldi	r20, 0x3B	; 59
     e36:	55 e4       	ldi	r21, 0x45	; 69
     e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	8d 8b       	std	Y+21, r24	; 0x15
     e42:	9e 8b       	std	Y+22, r25	; 0x16
     e44:	af 8b       	std	Y+23, r26	; 0x17
     e46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e48:	6d 89       	ldd	r22, Y+21	; 0x15
     e4a:	7e 89       	ldd	r23, Y+22	; 0x16
     e4c:	8f 89       	ldd	r24, Y+23	; 0x17
     e4e:	98 8d       	ldd	r25, Y+24	; 0x18
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	40 e8       	ldi	r20, 0x80	; 128
     e56:	5f e3       	ldi	r21, 0x3F	; 63
     e58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e5c:	88 23       	and	r24, r24
     e5e:	2c f4       	brge	.+10     	; 0xe6a <SmartHomeLoginPassword+0x1a4>
		__ticks = 1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9c 8b       	std	Y+20, r25	; 0x14
     e66:	8b 8b       	std	Y+19, r24	; 0x13
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <SmartHomeLoginPassword+0x222>
	else if (__tmp > 65535)
     e6a:	6d 89       	ldd	r22, Y+21	; 0x15
     e6c:	7e 89       	ldd	r23, Y+22	; 0x16
     e6e:	8f 89       	ldd	r24, Y+23	; 0x17
     e70:	98 8d       	ldd	r25, Y+24	; 0x18
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	3f ef       	ldi	r19, 0xFF	; 255
     e76:	4f e7       	ldi	r20, 0x7F	; 127
     e78:	57 e4       	ldi	r21, 0x47	; 71
     e7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e7e:	18 16       	cp	r1, r24
     e80:	4c f5       	brge	.+82     	; 0xed4 <SmartHomeLoginPassword+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e82:	69 8d       	ldd	r22, Y+25	; 0x19
     e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e2       	ldi	r20, 0x20	; 32
     e90:	51 e4       	ldi	r21, 0x41	; 65
     e92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9c 8b       	std	Y+20, r25	; 0x14
     ea8:	8b 8b       	std	Y+19, r24	; 0x13
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <SmartHomeLoginPassword+0x204>
     eac:	8c e2       	ldi	r24, 0x2C	; 44
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	9a 8b       	std	Y+18, r25	; 0x12
     eb2:	89 8b       	std	Y+17, r24	; 0x11
     eb4:	89 89       	ldd	r24, Y+17	; 0x11
     eb6:	9a 89       	ldd	r25, Y+18	; 0x12
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <SmartHomeLoginPassword+0x1f2>
     ebc:	9a 8b       	std	Y+18, r25	; 0x12
     ebe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	9c 8b       	std	Y+20, r25	; 0x14
     ec8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eca:	8b 89       	ldd	r24, Y+19	; 0x13
     ecc:	9c 89       	ldd	r25, Y+20	; 0x14
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	69 f7       	brne	.-38     	; 0xeac <SmartHomeLoginPassword+0x1e6>
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <SmartHomeLoginPassword+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed4:	6d 89       	ldd	r22, Y+21	; 0x15
     ed6:	7e 89       	ldd	r23, Y+22	; 0x16
     ed8:	8f 89       	ldd	r24, Y+23	; 0x17
     eda:	98 8d       	ldd	r25, Y+24	; 0x18
     edc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	9c 8b       	std	Y+20, r25	; 0x14
     ee6:	8b 8b       	std	Y+19, r24	; 0x13
     ee8:	8b 89       	ldd	r24, Y+19	; 0x13
     eea:	9c 89       	ldd	r25, Y+20	; 0x14
     eec:	98 8b       	std	Y+16, r25	; 0x10
     eee:	8f 87       	std	Y+15, r24	; 0x0f
     ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef2:	98 89       	ldd	r25, Y+16	; 0x10
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <SmartHomeLoginPassword+0x22e>
     ef8:	98 8b       	std	Y+16, r25	; 0x10
     efa:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(200);
				HLCD_vClearDisplay();
     efc:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
				HLCD_vDisplayString("Enter password: ");
     f00:	80 e6       	ldi	r24, 0x60	; 96
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
     f08:	7a c0       	rjmp	.+244    	; 0xffe <SmartHomeLoginPassword+0x338>
			}
			else
			{
				HLCD_vClearDisplay();
     f0a:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
				HLCD_vDisplayString("Try Later");
     f0e:	89 e8       	ldi	r24, 0x89	; 137
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	aa ef       	ldi	r26, 0xFA	; 250
     f1c:	b3 e4       	ldi	r27, 0x43	; 67
     f1e:	8b 87       	std	Y+11, r24	; 0x0b
     f20:	9c 87       	std	Y+12, r25	; 0x0c
     f22:	ad 87       	std	Y+13, r26	; 0x0d
     f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f26:	6b 85       	ldd	r22, Y+11	; 0x0b
     f28:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e8       	ldi	r19, 0x80	; 128
     f32:	4b e3       	ldi	r20, 0x3B	; 59
     f34:	55 e4       	ldi	r21, 0x45	; 69
     f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8f 83       	std	Y+7, r24	; 0x07
     f40:	98 87       	std	Y+8, r25	; 0x08
     f42:	a9 87       	std	Y+9, r26	; 0x09
     f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	2c f4       	brge	.+10     	; 0xf68 <SmartHomeLoginPassword+0x2a2>
		__ticks = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <SmartHomeLoginPassword+0x320>
	else if (__tmp > 65535)
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	57 e4       	ldi	r21, 0x47	; 71
     f78:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	4c f5       	brge	.+82     	; 0xfd2 <SmartHomeLoginPassword+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f80:	6b 85       	ldd	r22, Y+11	; 0x0b
     f82:	7c 85       	ldd	r23, Y+12	; 0x0c
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e2       	ldi	r20, 0x20	; 32
     f8e:	51 e4       	ldi	r21, 0x41	; 65
     f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <SmartHomeLoginPassword+0x302>
     faa:	8c e2       	ldi	r24, 0x2C	; 44
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <SmartHomeLoginPassword+0x2f0>
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	69 f7       	brne	.-38     	; 0xfaa <SmartHomeLoginPassword+0x2e4>
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <SmartHomeLoginPassword+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <SmartHomeLoginPassword+0x32c>
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				HLCD_vClearDisplay();
     ffa:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
	HLCD_vDisplayString("Enter password: ");
	HLCD_vGoToPos(LCD_ROW2 , LCD_COL1);



	for(u8 i=0; i <3; i++)
     ffe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	8b a7       	std	Y+43, r24	; 0x2b
    1004:	8b a5       	ldd	r24, Y+43	; 0x2b
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	08 f4       	brcc	.+2      	; 0x100c <SmartHomeLoginPassword+0x346>
    100a:	72 ce       	rjmp	.-796    	; 0xcf0 <SmartHomeLoginPassword+0x2a>
				HLCD_vClearDisplay();
				// sholud return to any point here
			}
		}
	} // end of FOR (password) loop
}
    100c:	ae 96       	adiw	r28, 0x2e	; 46
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <SmartHomeMenu>:


void SmartHomeMenu()
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	e4 97       	sbiw	r28, 0x34	; 52
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
	// Show Menu
	u8 key = NO_KEY_PRESSED;
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	8e a7       	std	Y+46, r24	; 0x2e
	HLCD_vClearDisplay();
    1036:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
	HLCD_vDisplayString("1- Light");
    103a:	83 e9       	ldi	r24, 0x93	; 147
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
	HLCD_vGoToPos(LCD_ROW2 , LCD_COL1);
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	0e 94 a3 19 	call	0x3346	; 0x3346 <HLCD_vGoToPos>
	HLCD_vDisplayString("2- Timer");
    104a:	8c e9       	ldi	r24, 0x9C	; 156
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
    1052:	03 c0       	rjmp	.+6      	; 0x105a <SmartHomeMenu+0x3c>

	// waiting to enter an input
	while(key == NO_KEY_PRESSED)
	{
		key = HKEYPAD_u8GetPressedKey();
    1054:	0e 94 77 1a 	call	0x34ee	; 0x34ee <HKEYPAD_u8GetPressedKey>
    1058:	8e a7       	std	Y+46, r24	; 0x2e
	HLCD_vDisplayString("1- Light");
	HLCD_vGoToPos(LCD_ROW2 , LCD_COL1);
	HLCD_vDisplayString("2- Timer");

	// waiting to enter an input
	while(key == NO_KEY_PRESSED)
    105a:	8e a5       	ldd	r24, Y+46	; 0x2e
    105c:	8f 3f       	cpi	r24, 0xFF	; 255
    105e:	d1 f3       	breq	.-12     	; 0x1054 <SmartHomeMenu+0x36>
	{
		key = HKEYPAD_u8GetPressedKey();
	}

	switch(key)
    1060:	8e a5       	ldd	r24, Y+46	; 0x2e
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3c ab       	std	Y+52, r19	; 0x34
    1068:	2b ab       	std	Y+51, r18	; 0x33
    106a:	8b a9       	ldd	r24, Y+51	; 0x33
    106c:	9c a9       	ldd	r25, Y+52	; 0x34
    106e:	81 33       	cpi	r24, 0x31	; 49
    1070:	91 05       	cpc	r25, r1
    1072:	39 f0       	breq	.+14     	; 0x1082 <SmartHomeMenu+0x64>
    1074:	2b a9       	ldd	r18, Y+51	; 0x33
    1076:	3c a9       	ldd	r19, Y+52	; 0x34
    1078:	22 33       	cpi	r18, 0x32	; 50
    107a:	31 05       	cpc	r19, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <SmartHomeMenu+0x62>
    107e:	cf c0       	rjmp	.+414    	; 0x121e <SmartHomeMenu+0x200>
    1080:	09 c2       	rjmp	.+1042   	; 0x1494 <SmartHomeMenu+0x476>
	{

	// LED
	case '1':
	{ // to remove error of Declaration after label
		u8 LED_Action = NO_KEY_PRESSED;
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	8d a7       	std	Y+45, r24	; 0x2d
		HLCD_vClearDisplay();
    1086:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
		HLCD_vDisplayString("1-On 2-OFF");
    108a:	85 ea       	ldi	r24, 0xA5	; 165
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
		HLCD_vGoToPos(LCD_ROW2, LCD_COL1);
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	0e 94 a3 19 	call	0x3346	; 0x3346 <HLCD_vGoToPos>
		HLCD_vDisplayString("3- Back");
    109a:	80 eb       	ldi	r24, 0xB0	; 176
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <SmartHomeMenu+0x8c>
		while(LED_Action == NO_KEY_PRESSED)
		{
			LED_Action = HKEYPAD_u8GetPressedKey();
    10a4:	0e 94 77 1a 	call	0x34ee	; 0x34ee <HKEYPAD_u8GetPressedKey>
    10a8:	8d a7       	std	Y+45, r24	; 0x2d
		u8 LED_Action = NO_KEY_PRESSED;
		HLCD_vClearDisplay();
		HLCD_vDisplayString("1-On 2-OFF");
		HLCD_vGoToPos(LCD_ROW2, LCD_COL1);
		HLCD_vDisplayString("3- Back");
		while(LED_Action == NO_KEY_PRESSED)
    10aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    10ac:	8f 3f       	cpi	r24, 0xFF	; 255
    10ae:	d1 f3       	breq	.-12     	; 0x10a4 <SmartHomeMenu+0x86>
		{
			LED_Action = HKEYPAD_u8GetPressedKey();
		}


		switch (LED_Action)
    10b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3a ab       	std	Y+50, r19	; 0x32
    10b8:	29 ab       	std	Y+49, r18	; 0x31
    10ba:	89 a9       	ldd	r24, Y+49	; 0x31
    10bc:	9a a9       	ldd	r25, Y+50	; 0x32
    10be:	82 33       	cpi	r24, 0x32	; 50
    10c0:	91 05       	cpc	r25, r1
    10c2:	d1 f0       	breq	.+52     	; 0x10f8 <SmartHomeMenu+0xda>
    10c4:	29 a9       	ldd	r18, Y+49	; 0x31
    10c6:	3a a9       	ldd	r19, Y+50	; 0x32
    10c8:	23 33       	cpi	r18, 0x33	; 51
    10ca:	31 05       	cpc	r19, r1
    10cc:	21 f1       	breq	.+72     	; 0x1116 <SmartHomeMenu+0xf8>
    10ce:	89 a9       	ldd	r24, Y+49	; 0x31
    10d0:	9a a9       	ldd	r25, Y+50	; 0x32
    10d2:	81 33       	cpi	r24, 0x31	; 49
    10d4:	91 05       	cpc	r25, r1
    10d6:	09 f0       	breq	.+2      	; 0x10da <SmartHomeMenu+0xbc>
    10d8:	9b c0       	rjmp	.+310    	; 0x1210 <SmartHomeMenu+0x1f2>
		{
		case '1':
			HLCD_vClearDisplay();
    10da:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
			HLCD_vDisplayString("Lights ON");
    10de:	88 eb       	ldi	r24, 0xB8	; 184
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
			MDIO_vSetPortDir(DIO_PORTC, 0x08);
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	68 e0       	ldi	r22, 0x08	; 8
    10ea:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MDIO_vSetPortDir>
			MDIO_vSetPortVal(DIO_PORTC , 0x08);
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	68 e0       	ldi	r22, 0x08	; 8
    10f2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <MDIO_vSetPortVal>
    10f6:	ce c1       	rjmp	.+924    	; 0x1494 <SmartHomeMenu+0x476>

			break;
		case '2':
			HLCD_vClearDisplay();
    10f8:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
			HLCD_vDisplayString("Lights OFF");
    10fc:	82 ec       	ldi	r24, 0xC2	; 194
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
			MDIO_vSetPortDir(DIO_PORTB , 0x01);
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MDIO_vSetPortDir>
			MDIO_vSetPortVal(DIO_PORTB , 0x00);
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <MDIO_vSetPortVal>
    1114:	bf c1       	rjmp	.+894    	; 0x1494 <SmartHomeMenu+0x476>
			break;

		case '3':
			HLCD_vClearDisplay();
    1116:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
			HLCD_vDisplayString("Back");
    111a:	8d ec       	ldi	r24, 0xCD	; 205
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
			HLCD_vClearDisplay();
    1122:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a8 e4       	ldi	r26, 0x48	; 72
    112c:	b3 e4       	ldi	r27, 0x43	; 67
    112e:	8f a3       	std	Y+39, r24	; 0x27
    1130:	98 a7       	std	Y+40, r25	; 0x28
    1132:	a9 a7       	std	Y+41, r26	; 0x29
    1134:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1136:	6f a1       	ldd	r22, Y+39	; 0x27
    1138:	78 a5       	ldd	r23, Y+40	; 0x28
    113a:	89 a5       	ldd	r24, Y+41	; 0x29
    113c:	9a a5       	ldd	r25, Y+42	; 0x2a
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e8       	ldi	r19, 0x80	; 128
    1142:	4b e3       	ldi	r20, 0x3B	; 59
    1144:	55 e4       	ldi	r21, 0x45	; 69
    1146:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	8b a3       	std	Y+35, r24	; 0x23
    1150:	9c a3       	std	Y+36, r25	; 0x24
    1152:	ad a3       	std	Y+37, r26	; 0x25
    1154:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1156:	6b a1       	ldd	r22, Y+35	; 0x23
    1158:	7c a1       	ldd	r23, Y+36	; 0x24
    115a:	8d a1       	ldd	r24, Y+37	; 0x25
    115c:	9e a1       	ldd	r25, Y+38	; 0x26
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e8       	ldi	r20, 0x80	; 128
    1164:	5f e3       	ldi	r21, 0x3F	; 63
    1166:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    116a:	88 23       	and	r24, r24
    116c:	2c f4       	brge	.+10     	; 0x1178 <SmartHomeMenu+0x15a>
		__ticks = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9a a3       	std	Y+34, r25	; 0x22
    1174:	89 a3       	std	Y+33, r24	; 0x21
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <SmartHomeMenu+0x1d8>
	else if (__tmp > 65535)
    1178:	6b a1       	ldd	r22, Y+35	; 0x23
    117a:	7c a1       	ldd	r23, Y+36	; 0x24
    117c:	8d a1       	ldd	r24, Y+37	; 0x25
    117e:	9e a1       	ldd	r25, Y+38	; 0x26
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	3f ef       	ldi	r19, 0xFF	; 255
    1184:	4f e7       	ldi	r20, 0x7F	; 127
    1186:	57 e4       	ldi	r21, 0x47	; 71
    1188:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    118c:	18 16       	cp	r1, r24
    118e:	4c f5       	brge	.+82     	; 0x11e2 <SmartHomeMenu+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1190:	6f a1       	ldd	r22, Y+39	; 0x27
    1192:	78 a5       	ldd	r23, Y+40	; 0x28
    1194:	89 a5       	ldd	r24, Y+41	; 0x29
    1196:	9a a5       	ldd	r25, Y+42	; 0x2a
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e2       	ldi	r20, 0x20	; 32
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9a a3       	std	Y+34, r25	; 0x22
    11b6:	89 a3       	std	Y+33, r24	; 0x21
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <SmartHomeMenu+0x1ba>
    11ba:	8c e2       	ldi	r24, 0x2C	; 44
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	98 a3       	std	Y+32, r25	; 0x20
    11c0:	8f 8f       	std	Y+31, r24	; 0x1f
    11c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11c4:	98 a1       	ldd	r25, Y+32	; 0x20
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <SmartHomeMenu+0x1a8>
    11ca:	98 a3       	std	Y+32, r25	; 0x20
    11cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ce:	89 a1       	ldd	r24, Y+33	; 0x21
    11d0:	9a a1       	ldd	r25, Y+34	; 0x22
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	9a a3       	std	Y+34, r25	; 0x22
    11d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d8:	89 a1       	ldd	r24, Y+33	; 0x21
    11da:	9a a1       	ldd	r25, Y+34	; 0x22
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	69 f7       	brne	.-38     	; 0x11ba <SmartHomeMenu+0x19c>
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <SmartHomeMenu+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e2:	6b a1       	ldd	r22, Y+35	; 0x23
    11e4:	7c a1       	ldd	r23, Y+36	; 0x24
    11e6:	8d a1       	ldd	r24, Y+37	; 0x25
    11e8:	9e a1       	ldd	r25, Y+38	; 0x26
    11ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9a a3       	std	Y+34, r25	; 0x22
    11f4:	89 a3       	std	Y+33, r24	; 0x21
    11f6:	89 a1       	ldd	r24, Y+33	; 0x21
    11f8:	9a a1       	ldd	r25, Y+34	; 0x22
    11fa:	9e 8f       	std	Y+30, r25	; 0x1e
    11fc:	8d 8f       	std	Y+29, r24	; 0x1d
    11fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1200:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <SmartHomeMenu+0x1e4>
    1206:	9e 8f       	std	Y+30, r25	; 0x1e
    1208:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);
			SmartHomeMenu();
    120a:	0e 94 0f 08 	call	0x101e	; 0x101e <SmartHomeMenu>
    120e:	42 c1       	rjmp	.+644    	; 0x1494 <SmartHomeMenu+0x476>
			break;

		default:
			HLCD_vClearDisplay();
    1210:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
			HLCD_vDisplayString("Wrong Input");
    1214:	82 ed       	ldi	r24, 0xD2	; 210
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
    121c:	3b c1       	rjmp	.+630    	; 0x1494 <SmartHomeMenu+0x476>


	// Timer
	case '2':
	{
		u8 Timer_Action = NO_KEY_PRESSED;
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	8c a7       	std	Y+44, r24	; 0x2c

		HLCD_vClearDisplay();
    1222:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
		HLCD_vDisplayLongString("1- Set Timer");
    1226:	8e ed       	ldi	r24, 0xDE	; 222
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 53 19 	call	0x32a6	; 0x32a6 <HLCD_vDisplayLongString>
		HLCD_vGoToPos(LCD_ROW2, LCD_COL1);
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	0e 94 a3 19 	call	0x3346	; 0x3346 <HLCD_vGoToPos>
		HLCD_vDisplayString("2- Back");
    1236:	8b ee       	ldi	r24, 0xEB	; 235
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <SmartHomeMenu+0x228>
		while(Timer_Action == NO_KEY_PRESSED)
		{
			Timer_Action = HKEYPAD_u8GetPressedKey();
    1240:	0e 94 77 1a 	call	0x34ee	; 0x34ee <HKEYPAD_u8GetPressedKey>
    1244:	8c a7       	std	Y+44, r24	; 0x2c

		HLCD_vClearDisplay();
		HLCD_vDisplayLongString("1- Set Timer");
		HLCD_vGoToPos(LCD_ROW2, LCD_COL1);
		HLCD_vDisplayString("2- Back");
		while(Timer_Action == NO_KEY_PRESSED)
    1246:	8c a5       	ldd	r24, Y+44	; 0x2c
    1248:	8f 3f       	cpi	r24, 0xFF	; 255
    124a:	d1 f3       	breq	.-12     	; 0x1240 <SmartHomeMenu+0x222>
		{
			Timer_Action = HKEYPAD_u8GetPressedKey();
		}

		switch(Timer_Action)
    124c:	8c a5       	ldd	r24, Y+44	; 0x2c
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	38 ab       	std	Y+48, r19	; 0x30
    1254:	2f a7       	std	Y+47, r18	; 0x2f
    1256:	8f a5       	ldd	r24, Y+47	; 0x2f
    1258:	98 a9       	ldd	r25, Y+48	; 0x30
    125a:	81 33       	cpi	r24, 0x31	; 49
    125c:	91 05       	cpc	r25, r1
    125e:	31 f0       	breq	.+12     	; 0x126c <SmartHomeMenu+0x24e>
    1260:	2f a5       	ldd	r18, Y+47	; 0x2f
    1262:	38 a9       	ldd	r19, Y+48	; 0x30
    1264:	22 33       	cpi	r18, 0x32	; 50
    1266:	31 05       	cpc	r19, r1
    1268:	f1 f0       	breq	.+60     	; 0x12a6 <SmartHomeMenu+0x288>
    126a:	9a c0       	rjmp	.+308    	; 0x13a0 <SmartHomeMenu+0x382>
		{

		case '1':
			HLCD_vClearDisplay();
    126c:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
			HLCD_vDisplayLongString("Set Timer in Sec");
    1270:	83 ef       	ldi	r24, 0xF3	; 243
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 53 19 	call	0x32a6	; 0x32a6 <HLCD_vDisplayLongString>
			u8 Time = HKEYPAD_u16MultiDigitInput();
    1278:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <HKEYPAD_u16MultiDigitInput>
    127c:	8b a7       	std	Y+43, r24	; 0x2b
			HLCD_vGoToPos(LCD_ROW2 , LCD_COL1);
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	0e 94 a3 19 	call	0x3346	; 0x3346 <HLCD_vGoToPos>
			HLCD_vDisplayNumber(Time);
    1286:	8b a5       	ldd	r24, Y+43	; 0x2b
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 cb 19 	call	0x3396	; 0x3396 <HLCD_vDisplayNumber>
			HSSD_vCountDown(SSD_PORT , Time , 500);
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	6b a5       	ldd	r22, Y+43	; 0x2b
    1294:	44 ef       	ldi	r20, 0xF4	; 244
    1296:	51 e0       	ldi	r21, 0x01	; 1
    1298:	0e 94 38 12 	call	0x2470	; 0x2470 <HSSD_vCountDown>
			HLCD_vDisplayString("Time Finished");
    129c:	84 e0       	ldi	r24, 0x04	; 4
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
    12a4:	f7 c0       	rjmp	.+494    	; 0x1494 <SmartHomeMenu+0x476>
			break;

		case '2':
			HLCD_vClearDisplay();
    12a6:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a8 e4       	ldi	r26, 0x48	; 72
    12b0:	b3 e4       	ldi	r27, 0x43	; 67
    12b2:	89 8f       	std	Y+25, r24	; 0x19
    12b4:	9a 8f       	std	Y+26, r25	; 0x1a
    12b6:	ab 8f       	std	Y+27, r26	; 0x1b
    12b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ba:	69 8d       	ldd	r22, Y+25	; 0x19
    12bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e8       	ldi	r19, 0x80	; 128
    12c6:	4b e3       	ldi	r20, 0x3B	; 59
    12c8:	55 e4       	ldi	r21, 0x45	; 69
    12ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	8d 8b       	std	Y+21, r24	; 0x15
    12d4:	9e 8b       	std	Y+22, r25	; 0x16
    12d6:	af 8b       	std	Y+23, r26	; 0x17
    12d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12da:	6d 89       	ldd	r22, Y+21	; 0x15
    12dc:	7e 89       	ldd	r23, Y+22	; 0x16
    12de:	8f 89       	ldd	r24, Y+23	; 0x17
    12e0:	98 8d       	ldd	r25, Y+24	; 0x18
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	2c f4       	brge	.+10     	; 0x12fc <SmartHomeMenu+0x2de>
		__ticks = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9c 8b       	std	Y+20, r25	; 0x14
    12f8:	8b 8b       	std	Y+19, r24	; 0x13
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <SmartHomeMenu+0x35c>
	else if (__tmp > 65535)
    12fc:	6d 89       	ldd	r22, Y+21	; 0x15
    12fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1300:	8f 89       	ldd	r24, Y+23	; 0x17
    1302:	98 8d       	ldd	r25, Y+24	; 0x18
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1310:	18 16       	cp	r1, r24
    1312:	4c f5       	brge	.+82     	; 0x1366 <SmartHomeMenu+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1314:	69 8d       	ldd	r22, Y+25	; 0x19
    1316:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1318:	8b 8d       	ldd	r24, Y+27	; 0x1b
    131a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	51 e4       	ldi	r21, 0x41	; 65
    1324:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9c 8b       	std	Y+20, r25	; 0x14
    133a:	8b 8b       	std	Y+19, r24	; 0x13
    133c:	0f c0       	rjmp	.+30     	; 0x135c <SmartHomeMenu+0x33e>
    133e:	8c e2       	ldi	r24, 0x2C	; 44
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	9a 8b       	std	Y+18, r25	; 0x12
    1344:	89 8b       	std	Y+17, r24	; 0x11
    1346:	89 89       	ldd	r24, Y+17	; 0x11
    1348:	9a 89       	ldd	r25, Y+18	; 0x12
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <SmartHomeMenu+0x32c>
    134e:	9a 8b       	std	Y+18, r25	; 0x12
    1350:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	8b 89       	ldd	r24, Y+19	; 0x13
    1354:	9c 89       	ldd	r25, Y+20	; 0x14
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9c 8b       	std	Y+20, r25	; 0x14
    135a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135c:	8b 89       	ldd	r24, Y+19	; 0x13
    135e:	9c 89       	ldd	r25, Y+20	; 0x14
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f7       	brne	.-38     	; 0x133e <SmartHomeMenu+0x320>
    1364:	14 c0       	rjmp	.+40     	; 0x138e <SmartHomeMenu+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1366:	6d 89       	ldd	r22, Y+21	; 0x15
    1368:	7e 89       	ldd	r23, Y+22	; 0x16
    136a:	8f 89       	ldd	r24, Y+23	; 0x17
    136c:	98 8d       	ldd	r25, Y+24	; 0x18
    136e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9c 8b       	std	Y+20, r25	; 0x14
    1378:	8b 8b       	std	Y+19, r24	; 0x13
    137a:	8b 89       	ldd	r24, Y+19	; 0x13
    137c:	9c 89       	ldd	r25, Y+20	; 0x14
    137e:	98 8b       	std	Y+16, r25	; 0x10
    1380:	8f 87       	std	Y+15, r24	; 0x0f
    1382:	8f 85       	ldd	r24, Y+15	; 0x0f
    1384:	98 89       	ldd	r25, Y+16	; 0x10
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <SmartHomeMenu+0x368>
    138a:	98 8b       	std	Y+16, r25	; 0x10
    138c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			HLCD_vDisplayString("Back");
    138e:	8d ec       	ldi	r24, 0xCD	; 205
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
			HLCD_vClearDisplay();
    1396:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
			SmartHomeMenu();
    139a:	0e 94 0f 08 	call	0x101e	; 0x101e <SmartHomeMenu>
    139e:	7a c0       	rjmp	.+244    	; 0x1494 <SmartHomeMenu+0x476>
			break;

		default:
			HLCD_vClearDisplay();
    13a0:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
			HLCD_vDisplayString("Wrong Input");
    13a4:	82 ed       	ldi	r24, 0xD2	; 210
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	aa ef       	ldi	r26, 0xFA	; 250
    13b2:	b3 e4       	ldi	r27, 0x43	; 67
    13b4:	8b 87       	std	Y+11, r24	; 0x0b
    13b6:	9c 87       	std	Y+12, r25	; 0x0c
    13b8:	ad 87       	std	Y+13, r26	; 0x0d
    13ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13be:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e8       	ldi	r19, 0x80	; 128
    13c8:	4b e3       	ldi	r20, 0x3B	; 59
    13ca:	55 e4       	ldi	r21, 0x45	; 69
    13cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	8f 83       	std	Y+7, r24	; 0x07
    13d6:	98 87       	std	Y+8, r25	; 0x08
    13d8:	a9 87       	std	Y+9, r26	; 0x09
    13da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13dc:	6f 81       	ldd	r22, Y+7	; 0x07
    13de:	78 85       	ldd	r23, Y+8	; 0x08
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	2c f4       	brge	.+10     	; 0x13fe <SmartHomeMenu+0x3e0>
		__ticks = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 83       	std	Y+5, r24	; 0x05
    13fc:	3f c0       	rjmp	.+126    	; 0x147c <SmartHomeMenu+0x45e>
	else if (__tmp > 65535)
    13fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1400:	78 85       	ldd	r23, Y+8	; 0x08
    1402:	89 85       	ldd	r24, Y+9	; 0x09
    1404:	9a 85       	ldd	r25, Y+10	; 0x0a
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	3f ef       	ldi	r19, 0xFF	; 255
    140a:	4f e7       	ldi	r20, 0x7F	; 127
    140c:	57 e4       	ldi	r21, 0x47	; 71
    140e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1412:	18 16       	cp	r1, r24
    1414:	4c f5       	brge	.+82     	; 0x1468 <SmartHomeMenu+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1416:	6b 85       	ldd	r22, Y+11	; 0x0b
    1418:	7c 85       	ldd	r23, Y+12	; 0x0c
    141a:	8d 85       	ldd	r24, Y+13	; 0x0d
    141c:	9e 85       	ldd	r25, Y+14	; 0x0e
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	0f c0       	rjmp	.+30     	; 0x145e <SmartHomeMenu+0x440>
    1440:	8c e2       	ldi	r24, 0x2C	; 44
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	9c 83       	std	Y+4, r25	; 0x04
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <SmartHomeMenu+0x42e>
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	9e 83       	std	Y+6, r25	; 0x06
    145c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	69 f7       	brne	.-38     	; 0x1440 <SmartHomeMenu+0x422>
    1466:	14 c0       	rjmp	.+40     	; 0x1490 <SmartHomeMenu+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1468:	6f 81       	ldd	r22, Y+7	; 0x07
    146a:	78 85       	ldd	r23, Y+8	; 0x08
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	9e 83       	std	Y+6, r25	; 0x06
    147a:	8d 83       	std	Y+5, r24	; 0x05
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	9e 81       	ldd	r25, Y+6	; 0x06
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <SmartHomeMenu+0x46a>
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			HLCD_vClearDisplay();
    1490:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>
			break;
		}
		break;
	}// cause of declaration
	}
}
    1494:	e4 96       	adiw	r28, 0x34	; 52
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <main>:

void main(void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	2e 97       	sbiw	r28, 0x0e	; 14
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
	// Init of KEYPAD , LCD , 7-Segment
	HKEYPAD_vInit();
    14ba:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <HKEYPAD_vInit>
	HLCD_vInit();
    14be:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <HLCD_vInit>
	HSSD_vInit(SSD_PORT);
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <HSSD_vInit>



	while(1)
	{
		HLCD_vDisplayString("Hello Helal");
    14c8:	82 e1       	ldi	r24, 0x12	; 18
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	0e 94 87 19 	call	0x330e	; 0x330e <HLCD_vDisplayString>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a8 e4       	ldi	r26, 0x48	; 72
    14d6:	b3 e4       	ldi	r27, 0x43	; 67
    14d8:	8b 87       	std	Y+11, r24	; 0x0b
    14da:	9c 87       	std	Y+12, r25	; 0x0c
    14dc:	ad 87       	std	Y+13, r26	; 0x0d
    14de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e8       	ldi	r19, 0x80	; 128
    14ec:	4b e3       	ldi	r20, 0x3B	; 59
    14ee:	55 e4       	ldi	r21, 0x45	; 69
    14f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8f 83       	std	Y+7, r24	; 0x07
    14fa:	98 87       	std	Y+8, r25	; 0x08
    14fc:	a9 87       	std	Y+9, r26	; 0x09
    14fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1500:	6f 81       	ldd	r22, Y+7	; 0x07
    1502:	78 85       	ldd	r23, Y+8	; 0x08
    1504:	89 85       	ldd	r24, Y+9	; 0x09
    1506:	9a 85       	ldd	r25, Y+10	; 0x0a
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e8       	ldi	r20, 0x80	; 128
    150e:	5f e3       	ldi	r21, 0x3F	; 63
    1510:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1514:	88 23       	and	r24, r24
    1516:	2c f4       	brge	.+10     	; 0x1522 <main+0x7c>
		__ticks = 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <main+0xfa>
	else if (__tmp > 65535)
    1522:	6f 81       	ldd	r22, Y+7	; 0x07
    1524:	78 85       	ldd	r23, Y+8	; 0x08
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	4f e7       	ldi	r20, 0x7F	; 127
    1530:	57 e4       	ldi	r21, 0x47	; 71
    1532:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1536:	18 16       	cp	r1, r24
    1538:	4c f5       	brge	.+82     	; 0x158c <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153a:	6b 85       	ldd	r22, Y+11	; 0x0b
    153c:	7c 85       	ldd	r23, Y+12	; 0x0c
    153e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1540:	9e 85       	ldd	r25, Y+14	; 0x0e
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e2       	ldi	r20, 0x20	; 32
    1548:	51 e4       	ldi	r21, 0x41	; 65
    154a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <main+0xdc>
    1564:	8c e2       	ldi	r24, 0x2C	; 44
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	9c 83       	std	Y+4, r25	; 0x04
    156a:	8b 83       	std	Y+3, r24	; 0x03
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <main+0xca>
    1574:	9c 83       	std	Y+4, r25	; 0x04
    1576:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	69 f7       	brne	.-38     	; 0x1564 <main+0xbe>
    158a:	14 c0       	rjmp	.+40     	; 0x15b4 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158c:	6f 81       	ldd	r22, Y+7	; 0x07
    158e:	78 85       	ldd	r23, Y+8	; 0x08
    1590:	89 85       	ldd	r24, Y+9	; 0x09
    1592:	9a 85       	ldd	r25, Y+10	; 0x0a
    1594:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <main+0x106>
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		HLCD_vClearDisplay();
    15b4:	0e 94 cb 18 	call	0x3196	; 0x3196 <HLCD_vClearDisplay>

		SmartHomeLoginPassword(); // enter password and check it
    15b8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <SmartHomeLoginPassword>
		SmartHomeMenu();
    15bc:	0e 94 0f 08 	call	0x101e	; 0x101e <SmartHomeMenu>
    15c0:	83 cf       	rjmp	.-250    	; 0x14c8 <main+0x22>

000015c2 <MDIO_vSetPinDir>:




void MDIO_vSetPinDir(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	2d 97       	sbiw	r28, 0x0d	; 13
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	6a 83       	std	Y+2, r22	; 0x02
    15da:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	84 30       	cpi	r24, 0x04	; 4
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <MDIO_vSetPinDir+0x22>
    15e2:	09 c1       	rjmp	.+530    	; 0x17f6 <MDIO_vSetPinDir+0x234>
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	88 30       	cpi	r24, 0x08	; 8
    15e8:	08 f0       	brcs	.+2      	; 0x15ec <MDIO_vSetPinDir+0x2a>
    15ea:	05 c1       	rjmp	.+522    	; 0x17f6 <MDIO_vSetPinDir+0x234>
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <MDIO_vSetPinDir+0x32>
    15f2:	01 c1       	rjmp	.+514    	; 0x17f6 <MDIO_vSetPinDir+0x234>
	{
		switch (A_portID)
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	3d 87       	std	Y+13, r19	; 0x0d
    15fc:	2c 87       	std	Y+12, r18	; 0x0c
    15fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1600:	9d 85       	ldd	r25, Y+13	; 0x0d
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	91 05       	cpc	r25, r1
    1606:	09 f4       	brne	.+2      	; 0x160a <MDIO_vSetPinDir+0x48>
    1608:	4f c0       	rjmp	.+158    	; 0x16a8 <MDIO_vSetPinDir+0xe6>
    160a:	2c 85       	ldd	r18, Y+12	; 0x0c
    160c:	3d 85       	ldd	r19, Y+13	; 0x0d
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	2c f4       	brge	.+10     	; 0x161e <MDIO_vSetPinDir+0x5c>
    1614:	8c 85       	ldd	r24, Y+12	; 0x0c
    1616:	9d 85       	ldd	r25, Y+13	; 0x0d
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	71 f0       	breq	.+28     	; 0x1638 <MDIO_vSetPinDir+0x76>
    161c:	ec c0       	rjmp	.+472    	; 0x17f6 <MDIO_vSetPinDir+0x234>
    161e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1620:	3d 85       	ldd	r19, Y+13	; 0x0d
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <MDIO_vSetPinDir+0x68>
    1628:	77 c0       	rjmp	.+238    	; 0x1718 <MDIO_vSetPinDir+0x156>
    162a:	8c 85       	ldd	r24, Y+12	; 0x0c
    162c:	9d 85       	ldd	r25, Y+13	; 0x0d
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	91 05       	cpc	r25, r1
    1632:	09 f4       	brne	.+2      	; 0x1636 <MDIO_vSetPinDir+0x74>
    1634:	a9 c0       	rjmp	.+338    	; 0x1788 <MDIO_vSetPinDir+0x1c6>
    1636:	df c0       	rjmp	.+446    	; 0x17f6 <MDIO_vSetPinDir+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	3b 87       	std	Y+11, r19	; 0x0b
    1640:	2a 87       	std	Y+10, r18	; 0x0a
    1642:	8a 85       	ldd	r24, Y+10	; 0x0a
    1644:	9b 85       	ldd	r25, Y+11	; 0x0b
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	31 f0       	breq	.+12     	; 0x1656 <MDIO_vSetPinDir+0x94>
    164a:	2a 85       	ldd	r18, Y+10	; 0x0a
    164c:	3b 85       	ldd	r19, Y+11	; 0x0b
    164e:	21 30       	cpi	r18, 0x01	; 1
    1650:	31 05       	cpc	r19, r1
    1652:	b1 f0       	breq	.+44     	; 0x1680 <MDIO_vSetPinDir+0xbe>
    1654:	d0 c0       	rjmp	.+416    	; 0x17f6 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
    1656:	aa e3       	ldi	r26, 0x3A	; 58
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	ea e3       	ldi	r30, 0x3A	; 58
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <MDIO_vSetPinDir+0xb2>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <MDIO_vSetPinDir+0xae>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	bb c0       	rjmp	.+374    	; 0x17f6 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
    1680:	aa e3       	ldi	r26, 0x3A	; 58
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	ea e3       	ldi	r30, 0x3A	; 58
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <MDIO_vSetPinDir+0xdc>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <MDIO_vSetPinDir+0xd8>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	a7 c0       	rjmp	.+334    	; 0x17f6 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	39 87       	std	Y+9, r19	; 0x09
    16b0:	28 87       	std	Y+8, r18	; 0x08
    16b2:	88 85       	ldd	r24, Y+8	; 0x08
    16b4:	99 85       	ldd	r25, Y+9	; 0x09
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <MDIO_vSetPinDir+0x104>
    16ba:	28 85       	ldd	r18, Y+8	; 0x08
    16bc:	39 85       	ldd	r19, Y+9	; 0x09
    16be:	21 30       	cpi	r18, 0x01	; 1
    16c0:	31 05       	cpc	r19, r1
    16c2:	b1 f0       	breq	.+44     	; 0x16f0 <MDIO_vSetPinDir+0x12e>
    16c4:	98 c0       	rjmp	.+304    	; 0x17f6 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
    16c6:	a7 e3       	ldi	r26, 0x37	; 55
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e7 e3       	ldi	r30, 0x37	; 55
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <MDIO_vSetPinDir+0x122>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <MDIO_vSetPinDir+0x11e>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	83 c0       	rjmp	.+262    	; 0x17f6 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
    16f0:	a7 e3       	ldi	r26, 0x37	; 55
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e7 e3       	ldi	r30, 0x37	; 55
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <MDIO_vSetPinDir+0x14c>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <MDIO_vSetPinDir+0x148>
    1712:	84 2b       	or	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	6f c0       	rjmp	.+222    	; 0x17f6 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3f 83       	std	Y+7, r19	; 0x07
    1720:	2e 83       	std	Y+6, r18	; 0x06
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	9f 81       	ldd	r25, Y+7	; 0x07
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	31 f0       	breq	.+12     	; 0x1736 <MDIO_vSetPinDir+0x174>
    172a:	2e 81       	ldd	r18, Y+6	; 0x06
    172c:	3f 81       	ldd	r19, Y+7	; 0x07
    172e:	21 30       	cpi	r18, 0x01	; 1
    1730:	31 05       	cpc	r19, r1
    1732:	b1 f0       	breq	.+44     	; 0x1760 <MDIO_vSetPinDir+0x19e>
    1734:	60 c0       	rjmp	.+192    	; 0x17f6 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
    1736:	a4 e3       	ldi	r26, 0x34	; 52
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e4 e3       	ldi	r30, 0x34	; 52
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <MDIO_vSetPinDir+0x192>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <MDIO_vSetPinDir+0x18e>
    1758:	80 95       	com	r24
    175a:	84 23       	and	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	4b c0       	rjmp	.+150    	; 0x17f6 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
    1760:	a4 e3       	ldi	r26, 0x34	; 52
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e4 e3       	ldi	r30, 0x34	; 52
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <MDIO_vSetPinDir+0x1bc>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <MDIO_vSetPinDir+0x1b8>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	37 c0       	rjmp	.+110    	; 0x17f6 <MDIO_vSetPinDir+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3d 83       	std	Y+5, r19	; 0x05
    1790:	2c 83       	std	Y+4, r18	; 0x04
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	31 f0       	breq	.+12     	; 0x17a6 <MDIO_vSetPinDir+0x1e4>
    179a:	2c 81       	ldd	r18, Y+4	; 0x04
    179c:	3d 81       	ldd	r19, Y+5	; 0x05
    179e:	21 30       	cpi	r18, 0x01	; 1
    17a0:	31 05       	cpc	r19, r1
    17a2:	b1 f0       	breq	.+44     	; 0x17d0 <MDIO_vSetPinDir+0x20e>
    17a4:	28 c0       	rjmp	.+80     	; 0x17f6 <MDIO_vSetPinDir+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
    17a6:	a1 e3       	ldi	r26, 0x31	; 49
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e1 e3       	ldi	r30, 0x31	; 49
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <MDIO_vSetPinDir+0x202>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <MDIO_vSetPinDir+0x1fe>
    17c8:	80 95       	com	r24
    17ca:	84 23       	and	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	13 c0       	rjmp	.+38     	; 0x17f6 <MDIO_vSetPinDir+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
    17d0:	a1 e3       	ldi	r26, 0x31	; 49
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e1 e3       	ldi	r30, 0x31	; 49
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <MDIO_vSetPinDir+0x22c>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <MDIO_vSetPinDir+0x228>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    17f6:	2d 96       	adiw	r28, 0x0d	; 13
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <MDIO_vSetPinVal>:


void MDIO_vSetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	2d 97       	sbiw	r28, 0x0d	; 13
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	6a 83       	std	Y+2, r22	; 0x02
    1820:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_HIGH) )
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	84 30       	cpi	r24, 0x04	; 4
    1826:	08 f0       	brcs	.+2      	; 0x182a <MDIO_vSetPinVal+0x22>
    1828:	09 c1       	rjmp	.+530    	; 0x1a3c <MDIO_vSetPinVal+0x234>
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	88 30       	cpi	r24, 0x08	; 8
    182e:	08 f0       	brcs	.+2      	; 0x1832 <MDIO_vSetPinVal+0x2a>
    1830:	05 c1       	rjmp	.+522    	; 0x1a3c <MDIO_vSetPinVal+0x234>
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	82 30       	cpi	r24, 0x02	; 2
    1836:	08 f0       	brcs	.+2      	; 0x183a <MDIO_vSetPinVal+0x32>
    1838:	01 c1       	rjmp	.+514    	; 0x1a3c <MDIO_vSetPinVal+0x234>
	{
		switch (A_portID)
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3d 87       	std	Y+13, r19	; 0x0d
    1842:	2c 87       	std	Y+12, r18	; 0x0c
    1844:	8c 85       	ldd	r24, Y+12	; 0x0c
    1846:	9d 85       	ldd	r25, Y+13	; 0x0d
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <MDIO_vSetPinVal+0x48>
    184e:	4f c0       	rjmp	.+158    	; 0x18ee <MDIO_vSetPinVal+0xe6>
    1850:	2c 85       	ldd	r18, Y+12	; 0x0c
    1852:	3d 85       	ldd	r19, Y+13	; 0x0d
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <MDIO_vSetPinVal+0x5c>
    185a:	8c 85       	ldd	r24, Y+12	; 0x0c
    185c:	9d 85       	ldd	r25, Y+13	; 0x0d
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	71 f0       	breq	.+28     	; 0x187e <MDIO_vSetPinVal+0x76>
    1862:	ec c0       	rjmp	.+472    	; 0x1a3c <MDIO_vSetPinVal+0x234>
    1864:	2c 85       	ldd	r18, Y+12	; 0x0c
    1866:	3d 85       	ldd	r19, Y+13	; 0x0d
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <MDIO_vSetPinVal+0x68>
    186e:	77 c0       	rjmp	.+238    	; 0x195e <MDIO_vSetPinVal+0x156>
    1870:	8c 85       	ldd	r24, Y+12	; 0x0c
    1872:	9d 85       	ldd	r25, Y+13	; 0x0d
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <MDIO_vSetPinVal+0x74>
    187a:	a9 c0       	rjmp	.+338    	; 0x19ce <MDIO_vSetPinVal+0x1c6>
    187c:	df c0       	rjmp	.+446    	; 0x1a3c <MDIO_vSetPinVal+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3b 87       	std	Y+11, r19	; 0x0b
    1886:	2a 87       	std	Y+10, r18	; 0x0a
    1888:	8a 85       	ldd	r24, Y+10	; 0x0a
    188a:	9b 85       	ldd	r25, Y+11	; 0x0b
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	31 f0       	breq	.+12     	; 0x189c <MDIO_vSetPinVal+0x94>
    1890:	2a 85       	ldd	r18, Y+10	; 0x0a
    1892:	3b 85       	ldd	r19, Y+11	; 0x0b
    1894:	21 30       	cpi	r18, 0x01	; 1
    1896:	31 05       	cpc	r19, r1
    1898:	b1 f0       	breq	.+44     	; 0x18c6 <MDIO_vSetPinVal+0xbe>
    189a:	d0 c0       	rjmp	.+416    	; 0x1a3c <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTA_REG,A_pinID);
    189c:	ab e3       	ldi	r26, 0x3B	; 59
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	eb e3       	ldi	r30, 0x3B	; 59
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <MDIO_vSetPinVal+0xb2>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <MDIO_vSetPinVal+0xae>
    18be:	80 95       	com	r24
    18c0:	84 23       	and	r24, r20
    18c2:	8c 93       	st	X, r24
    18c4:	bb c0       	rjmp	.+374    	; 0x1a3c <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTA_REG,A_pinID);
    18c6:	ab e3       	ldi	r26, 0x3B	; 59
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	eb e3       	ldi	r30, 0x3B	; 59
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 2e       	mov	r0, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <MDIO_vSetPinVal+0xdc>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <MDIO_vSetPinVal+0xd8>
    18e8:	84 2b       	or	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	a7 c0       	rjmp	.+334    	; 0x1a3c <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	39 87       	std	Y+9, r19	; 0x09
    18f6:	28 87       	std	Y+8, r18	; 0x08
    18f8:	88 85       	ldd	r24, Y+8	; 0x08
    18fa:	99 85       	ldd	r25, Y+9	; 0x09
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	31 f0       	breq	.+12     	; 0x190c <MDIO_vSetPinVal+0x104>
    1900:	28 85       	ldd	r18, Y+8	; 0x08
    1902:	39 85       	ldd	r19, Y+9	; 0x09
    1904:	21 30       	cpi	r18, 0x01	; 1
    1906:	31 05       	cpc	r19, r1
    1908:	b1 f0       	breq	.+44     	; 0x1936 <MDIO_vSetPinVal+0x12e>
    190a:	98 c0       	rjmp	.+304    	; 0x1a3c <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTB_REG,A_pinID);
    190c:	a8 e3       	ldi	r26, 0x38	; 56
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e8 e3       	ldi	r30, 0x38	; 56
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 2e       	mov	r0, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <MDIO_vSetPinVal+0x122>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	0a 94       	dec	r0
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <MDIO_vSetPinVal+0x11e>
    192e:	80 95       	com	r24
    1930:	84 23       	and	r24, r20
    1932:	8c 93       	st	X, r24
    1934:	83 c0       	rjmp	.+262    	; 0x1a3c <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTB_REG,A_pinID);
    1936:	a8 e3       	ldi	r26, 0x38	; 56
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e8 e3       	ldi	r30, 0x38	; 56
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <MDIO_vSetPinVal+0x14c>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <MDIO_vSetPinVal+0x148>
    1958:	84 2b       	or	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	6f c0       	rjmp	.+222    	; 0x1a3c <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3f 83       	std	Y+7, r19	; 0x07
    1966:	2e 83       	std	Y+6, r18	; 0x06
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	9f 81       	ldd	r25, Y+7	; 0x07
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	31 f0       	breq	.+12     	; 0x197c <MDIO_vSetPinVal+0x174>
    1970:	2e 81       	ldd	r18, Y+6	; 0x06
    1972:	3f 81       	ldd	r19, Y+7	; 0x07
    1974:	21 30       	cpi	r18, 0x01	; 1
    1976:	31 05       	cpc	r19, r1
    1978:	b1 f0       	breq	.+44     	; 0x19a6 <MDIO_vSetPinVal+0x19e>
    197a:	60 c0       	rjmp	.+192    	; 0x1a3c <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTC_REG,A_pinID);
    197c:	a5 e3       	ldi	r26, 0x35	; 53
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e5 e3       	ldi	r30, 0x35	; 53
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <MDIO_vSetPinVal+0x192>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <MDIO_vSetPinVal+0x18e>
    199e:	80 95       	com	r24
    19a0:	84 23       	and	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	4b c0       	rjmp	.+150    	; 0x1a3c <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTC_REG,A_pinID);
    19a6:	a5 e3       	ldi	r26, 0x35	; 53
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e5 e3       	ldi	r30, 0x35	; 53
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <MDIO_vSetPinVal+0x1bc>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <MDIO_vSetPinVal+0x1b8>
    19c8:	84 2b       	or	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	37 c0       	rjmp	.+110    	; 0x1a3c <MDIO_vSetPinVal+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3d 83       	std	Y+5, r19	; 0x05
    19d6:	2c 83       	std	Y+4, r18	; 0x04
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	31 f0       	breq	.+12     	; 0x19ec <MDIO_vSetPinVal+0x1e4>
    19e0:	2c 81       	ldd	r18, Y+4	; 0x04
    19e2:	3d 81       	ldd	r19, Y+5	; 0x05
    19e4:	21 30       	cpi	r18, 0x01	; 1
    19e6:	31 05       	cpc	r19, r1
    19e8:	b1 f0       	breq	.+44     	; 0x1a16 <MDIO_vSetPinVal+0x20e>
    19ea:	28 c0       	rjmp	.+80     	; 0x1a3c <MDIO_vSetPinVal+0x234>
			{
			case DIO_LOW:
				CLR_BIT(PORTD_REG,A_pinID);
    19ec:	a2 e3       	ldi	r26, 0x32	; 50
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e2 e3       	ldi	r30, 0x32	; 50
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <MDIO_vSetPinVal+0x202>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <MDIO_vSetPinVal+0x1fe>
    1a0e:	80 95       	com	r24
    1a10:	84 23       	and	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	13 c0       	rjmp	.+38     	; 0x1a3c <MDIO_vSetPinVal+0x234>
				break;
			case DIO_HIGH:
				SET_BIT(PORTD_REG,A_pinID);
    1a16:	a2 e3       	ldi	r26, 0x32	; 50
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e2 e3       	ldi	r30, 0x32	; 50
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <MDIO_vSetPinVal+0x22c>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <MDIO_vSetPinVal+0x228>
    1a38:	84 2b       	or	r24, r20
    1a3a:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1a3c:	2d 96       	adiw	r28, 0x0d	; 13
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <MDIO_GetPinVal>:




DIO_VALUE_e MDIO_GetPinVal(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <MDIO_GetPinVal+0x6>
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <MDIO_GetPinVal+0x8>
    1a56:	0f 92       	push	r0
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	8a 83       	std	Y+2, r24	; 0x02
    1a5e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	84 30       	cpi	r24, 0x04	; 4
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <MDIO_GetPinVal+0x1a>
    1a66:	6b c0       	rjmp	.+214    	; 0x1b3e <MDIO_GetPinVal+0xf0>
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	88 30       	cpi	r24, 0x08	; 8
    1a6c:	08 f0       	brcs	.+2      	; 0x1a70 <MDIO_GetPinVal+0x22>
    1a6e:	67 c0       	rjmp	.+206    	; 0x1b3e <MDIO_GetPinVal+0xf0>
	{
		switch (A_portID)
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	3d 83       	std	Y+5, r19	; 0x05
    1a78:	2c 83       	std	Y+4, r18	; 0x04
    1a7a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a7c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7e:	41 30       	cpi	r20, 0x01	; 1
    1a80:	51 05       	cpc	r21, r1
    1a82:	41 f1       	breq	.+80     	; 0x1ad4 <MDIO_GetPinVal+0x86>
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	34 f4       	brge	.+12     	; 0x1a9a <MDIO_GetPinVal+0x4c>
    1a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a90:	3d 81       	ldd	r19, Y+5	; 0x05
    1a92:	21 15       	cp	r18, r1
    1a94:	31 05       	cpc	r19, r1
    1a96:	61 f0       	breq	.+24     	; 0x1ab0 <MDIO_GetPinVal+0x62>
    1a98:	52 c0       	rjmp	.+164    	; 0x1b3e <MDIO_GetPinVal+0xf0>
    1a9a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a9c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a9e:	42 30       	cpi	r20, 0x02	; 2
    1aa0:	51 05       	cpc	r21, r1
    1aa2:	51 f1       	breq	.+84     	; 0x1af8 <MDIO_GetPinVal+0xaa>
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa8:	83 30       	cpi	r24, 0x03	; 3
    1aaa:	91 05       	cpc	r25, r1
    1aac:	b9 f1       	breq	.+110    	; 0x1b1c <MDIO_GetPinVal+0xce>
    1aae:	47 c0       	rjmp	.+142    	; 0x1b3e <MDIO_GetPinVal+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    1ab0:	e9 e3       	ldi	r30, 0x39	; 57
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	a9 01       	movw	r20, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <MDIO_GetPinVal+0x7a>
    1ac4:	55 95       	asr	r21
    1ac6:	47 95       	ror	r20
    1ac8:	8a 95       	dec	r24
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <MDIO_GetPinVal+0x76>
    1acc:	ca 01       	movw	r24, r20
    1ace:	81 70       	andi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	35 c0       	rjmp	.+106    	; 0x1b3e <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    1ad4:	e6 e3       	ldi	r30, 0x36	; 54
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a9 01       	movw	r20, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <MDIO_GetPinVal+0x9e>
    1ae8:	55 95       	asr	r21
    1aea:	47 95       	ror	r20
    1aec:	8a 95       	dec	r24
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <MDIO_GetPinVal+0x9a>
    1af0:	ca 01       	movw	r24, r20
    1af2:	81 70       	andi	r24, 0x01	; 1
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	23 c0       	rjmp	.+70     	; 0x1b3e <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    1af8:	e3 e3       	ldi	r30, 0x33	; 51
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a9 01       	movw	r20, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <MDIO_GetPinVal+0xc2>
    1b0c:	55 95       	asr	r21
    1b0e:	47 95       	ror	r20
    1b10:	8a 95       	dec	r24
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <MDIO_GetPinVal+0xbe>
    1b14:	ca 01       	movw	r24, r20
    1b16:	81 70       	andi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	11 c0       	rjmp	.+34     	; 0x1b3e <MDIO_GetPinVal+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    1b1c:	e0 e3       	ldi	r30, 0x30	; 48
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	88 2f       	mov	r24, r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a9 01       	movw	r20, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <MDIO_GetPinVal+0xe6>
    1b30:	55 95       	asr	r21
    1b32:	47 95       	ror	r20
    1b34:	8a 95       	dec	r24
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <MDIO_GetPinVal+0xe2>
    1b38:	ca 01       	movw	r24, r20
    1b3a:	81 70       	andi	r24, 0x01	; 1
    1b3c:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <MDIO_vTogglePinVal>:

void MDIO_vTogglePinVal (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <MDIO_vTogglePinVal+0x6>
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <MDIO_vTogglePinVal+0x8>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <MDIO_vTogglePinVal+0x18>
    1b66:	72 c0       	rjmp	.+228    	; 0x1c4c <MDIO_vTogglePinVal+0xfc>
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	88 30       	cpi	r24, 0x08	; 8
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <MDIO_vTogglePinVal+0x20>
    1b6e:	6e c0       	rjmp	.+220    	; 0x1c4c <MDIO_vTogglePinVal+0xfc>
	{
		switch (A_portID)
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	3c 83       	std	Y+4, r19	; 0x04
    1b78:	2b 83       	std	Y+3, r18	; 0x03
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	91 05       	cpc	r25, r1
    1b82:	49 f1       	breq	.+82     	; 0x1bd6 <MDIO_vTogglePinVal+0x86>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	2c f4       	brge	.+10     	; 0x1b98 <MDIO_vTogglePinVal+0x48>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	61 f0       	breq	.+24     	; 0x1bae <MDIO_vTogglePinVal+0x5e>
    1b96:	5a c0       	rjmp	.+180    	; 0x1c4c <MDIO_vTogglePinVal+0xfc>
    1b98:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9c:	22 30       	cpi	r18, 0x02	; 2
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	71 f1       	breq	.+92     	; 0x1bfe <MDIO_vTogglePinVal+0xae>
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	83 30       	cpi	r24, 0x03	; 3
    1ba8:	91 05       	cpc	r25, r1
    1baa:	e9 f1       	breq	.+122    	; 0x1c26 <MDIO_vTogglePinVal+0xd6>
    1bac:	4f c0       	rjmp	.+158    	; 0x1c4c <MDIO_vTogglePinVal+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    1bae:	ab e3       	ldi	r26, 0x3B	; 59
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	eb e3       	ldi	r30, 0x3B	; 59
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	48 2f       	mov	r20, r24
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	02 2e       	mov	r0, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <MDIO_vTogglePinVal+0x7c>
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	0a 94       	dec	r0
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <MDIO_vTogglePinVal+0x78>
    1bd0:	84 27       	eor	r24, r20
    1bd2:	8c 93       	st	X, r24
    1bd4:	3b c0       	rjmp	.+118    	; 0x1c4c <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1bd6:	a8 e3       	ldi	r26, 0x38	; 56
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e8 e3       	ldi	r30, 0x38	; 56
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <MDIO_vTogglePinVal+0xa4>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <MDIO_vTogglePinVal+0xa0>
    1bf8:	84 27       	eor	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	27 c0       	rjmp	.+78     	; 0x1c4c <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    1bfe:	a5 e3       	ldi	r26, 0x35	; 53
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e5 e3       	ldi	r30, 0x35	; 53
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <MDIO_vTogglePinVal+0xcc>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <MDIO_vTogglePinVal+0xc8>
    1c20:	84 27       	eor	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	13 c0       	rjmp	.+38     	; 0x1c4c <MDIO_vTogglePinVal+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    1c26:	a2 e3       	ldi	r26, 0x32	; 50
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e2 e3       	ldi	r30, 0x32	; 50
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <MDIO_vTogglePinVal+0xf4>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <MDIO_vTogglePinVal+0xf0>
    1c48:	84 27       	eor	r24, r20
    1c4a:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <MDIO_vSetPortDir>:


void MDIO_vSetPortDir (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <MDIO_vSetPortDir+0x6>
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <MDIO_vSetPortDir+0x8>
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	84 30       	cpi	r24, 0x04	; 4
    1c6e:	90 f5       	brcc	.+100    	; 0x1cd4 <MDIO_vSetPortDir+0x7a>
	{
		switch (A_portID)
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3c 83       	std	Y+4, r19	; 0x04
    1c78:	2b 83       	std	Y+3, r18	; 0x03
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	d1 f0       	breq	.+52     	; 0x1cb8 <MDIO_vSetPortDir+0x5e>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <MDIO_vSetPortDir+0x3e>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	61 f0       	breq	.+24     	; 0x1cae <MDIO_vSetPortDir+0x54>
    1c96:	1e c0       	rjmp	.+60     	; 0x1cd4 <MDIO_vSetPortDir+0x7a>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	81 f0       	breq	.+32     	; 0x1cc2 <MDIO_vSetPortDir+0x68>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	81 f0       	breq	.+32     	; 0x1ccc <MDIO_vSetPortDir+0x72>
    1cac:	13 c0       	rjmp	.+38     	; 0x1cd4 <MDIO_vSetPortDir+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    1cae:	ea e3       	ldi	r30, 0x3A	; 58
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 83       	st	Z, r24
    1cb6:	0e c0       	rjmp	.+28     	; 0x1cd4 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    1cb8:	e7 e3       	ldi	r30, 0x37	; 55
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	80 83       	st	Z, r24
    1cc0:	09 c0       	rjmp	.+18     	; 0x1cd4 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    1cc2:	e4 e3       	ldi	r30, 0x34	; 52
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	80 83       	st	Z, r24
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <MDIO_vSetPortDir+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    1ccc:	e1 e3       	ldi	r30, 0x31	; 49
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <MDIO_vSetPortVal>:

void MDIO_vSetPortVal (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <MDIO_vSetPortVal+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <MDIO_vSetPortVal+0x8>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	84 30       	cpi	r24, 0x04	; 4
    1cf6:	90 f5       	brcc	.+100    	; 0x1d5c <MDIO_vSetPortVal+0x7a>
	{
		switch (A_portID)
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	3c 83       	std	Y+4, r19	; 0x04
    1d00:	2b 83       	std	Y+3, r18	; 0x03
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	91 05       	cpc	r25, r1
    1d0a:	d1 f0       	breq	.+52     	; 0x1d40 <MDIO_vSetPortVal+0x5e>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <MDIO_vSetPortVal+0x3e>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	61 f0       	breq	.+24     	; 0x1d36 <MDIO_vSetPortVal+0x54>
    1d1e:	1e c0       	rjmp	.+60     	; 0x1d5c <MDIO_vSetPortVal+0x7a>
    1d20:	2b 81       	ldd	r18, Y+3	; 0x03
    1d22:	3c 81       	ldd	r19, Y+4	; 0x04
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	81 f0       	breq	.+32     	; 0x1d4a <MDIO_vSetPortVal+0x68>
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	83 30       	cpi	r24, 0x03	; 3
    1d30:	91 05       	cpc	r25, r1
    1d32:	81 f0       	breq	.+32     	; 0x1d54 <MDIO_vSetPortVal+0x72>
    1d34:	13 c0       	rjmp	.+38     	; 0x1d5c <MDIO_vSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    1d36:	eb e3       	ldi	r30, 0x3B	; 59
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	80 83       	st	Z, r24
    1d3e:	0e c0       	rjmp	.+28     	; 0x1d5c <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    1d40:	e8 e3       	ldi	r30, 0x38	; 56
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	80 83       	st	Z, r24
    1d48:	09 c0       	rjmp	.+18     	; 0x1d5c <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    1d4a:	e5 e3       	ldi	r30, 0x35	; 53
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	80 83       	st	Z, r24
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <MDIO_vSetPortVal+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    1d54:	e2 e3       	ldi	r30, 0x32	; 50
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <MDIO_vInit>:


void MDIO_vInit()
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    1d72:	ea e3       	ldi	r30, 0x3A	; 58
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	10 82       	st	Z, r1
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    1d78:	e7 e3       	ldi	r30, 0x37	; 55
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    1d7e:	e4 e3       	ldi	r30, 0x34	; 52
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	87 e0       	ldi	r24, 0x07	; 7
    1d84:	80 83       	st	Z, r24
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    1d86:	e1 e3       	ldi	r30, 0x31	; 49
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	80 83       	st	Z, r24
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    1d8e:	eb e3       	ldi	r30, 0x3B	; 59
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    1d94:	e8 e3       	ldi	r30, 0x38	; 56
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	10 82       	st	Z, r1
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    1d9a:	e5 e3       	ldi	r30, 0x35	; 53
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    1da0:	e2 e3       	ldi	r30, 0x32	; 50
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <HSSD_vInit>:




void HSSD_vInit(DIO_PORT_e A_PortID)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <HSSD_vInit+0x6>
    1db2:	0f 92       	push	r0
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	89 83       	std	Y+1, r24	; 0x01
	if((A_PortID <= DIO_PORTD))
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	84 30       	cpi	r24, 0x04	; 4
    1dbe:	90 f5       	brcc	.+100    	; 0x1e24 <HSSD_vInit+0x78>
	{
		switch(A_PortID)
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	3b 83       	std	Y+3, r19	; 0x03
    1dc8:	2a 83       	std	Y+2, r18	; 0x02
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	d1 f0       	breq	.+52     	; 0x1e08 <HSSD_vInit+0x5c>
    1dd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd6:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd8:	22 30       	cpi	r18, 0x02	; 2
    1dda:	31 05       	cpc	r19, r1
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <HSSD_vInit+0x3c>
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	61 f0       	breq	.+24     	; 0x1dfe <HSSD_vInit+0x52>
    1de6:	1e c0       	rjmp	.+60     	; 0x1e24 <HSSD_vInit+0x78>
    1de8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dea:	3b 81       	ldd	r19, Y+3	; 0x03
    1dec:	22 30       	cpi	r18, 0x02	; 2
    1dee:	31 05       	cpc	r19, r1
    1df0:	81 f0       	breq	.+32     	; 0x1e12 <HSSD_vInit+0x66>
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	83 30       	cpi	r24, 0x03	; 3
    1df8:	91 05       	cpc	r25, r1
    1dfa:	81 f0       	breq	.+32     	; 0x1e1c <HSSD_vInit+0x70>
    1dfc:	13 c0       	rjmp	.+38     	; 0x1e24 <HSSD_vInit+0x78>
		{
		case DIO_PORTA:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	6f ef       	ldi	r22, 0xFF	; 255
    1e02:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MDIO_vSetPortDir>
    1e06:	0e c0       	rjmp	.+28     	; 0x1e24 <HSSD_vInit+0x78>
			break;
		case DIO_PORTB:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	6f ef       	ldi	r22, 0xFF	; 255
    1e0c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MDIO_vSetPortDir>
    1e10:	09 c0       	rjmp	.+18     	; 0x1e24 <HSSD_vInit+0x78>
			break;
		case DIO_PORTC:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	6f ef       	ldi	r22, 0xFF	; 255
    1e16:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MDIO_vSetPortDir>
    1e1a:	04 c0       	rjmp	.+8      	; 0x1e24 <HSSD_vInit+0x78>
			break;
		case DIO_PORTD:
			MDIO_vSetPortDir(A_PortID , 0xFF);
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	6f ef       	ldi	r22, 0xFF	; 255
    1e20:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MDIO_vSetPortDir>
			break;
		}
	}
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <HSSD_vDisplayNumber>:

void HSSD_vDisplayNumber(DIO_PORT_e A_PortID, u8 A_u8NumberValue)
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <HSSD_vDisplayNumber+0x6>
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <HSSD_vDisplayNumber+0x8>
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	6a 83       	std	Y+2, r22	; 0x02
	if(A_PortID <= DIO_PORTD)
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	84 30       	cpi	r24, 0x04	; 4
    1e44:	90 f5       	brcc	.+100    	; 0x1eaa <HSSD_vDisplayNumber+0x7a>
	{
		switch(A_PortID)
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3c 83       	std	Y+4, r19	; 0x04
    1e4e:	2b 83       	std	Y+3, r18	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	91 05       	cpc	r25, r1
    1e58:	d1 f0       	breq	.+52     	; 0x1e8e <HSSD_vDisplayNumber+0x5e>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <HSSD_vDisplayNumber+0x3e>
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	61 f0       	breq	.+24     	; 0x1e84 <HSSD_vDisplayNumber+0x54>
    1e6c:	1e c0       	rjmp	.+60     	; 0x1eaa <HSSD_vDisplayNumber+0x7a>
    1e6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e70:	3c 81       	ldd	r19, Y+4	; 0x04
    1e72:	22 30       	cpi	r18, 0x02	; 2
    1e74:	31 05       	cpc	r19, r1
    1e76:	81 f0       	breq	.+32     	; 0x1e98 <HSSD_vDisplayNumber+0x68>
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	83 30       	cpi	r24, 0x03	; 3
    1e7e:	91 05       	cpc	r25, r1
    1e80:	81 f0       	breq	.+32     	; 0x1ea2 <HSSD_vDisplayNumber+0x72>
    1e82:	13 c0       	rjmp	.+38     	; 0x1eaa <HSSD_vDisplayNumber+0x7a>
		{
		case DIO_PORTA:
			MDIO_vSetPortVal(A_PortID , A_u8NumberValue);
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	6a 81       	ldd	r22, Y+2	; 0x02
    1e88:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <MDIO_vSetPortVal>
    1e8c:	0e c0       	rjmp	.+28     	; 0x1eaa <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTB:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	6a 81       	ldd	r22, Y+2	; 0x02
    1e92:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <MDIO_vSetPortVal>
    1e96:	09 c0       	rjmp	.+18     	; 0x1eaa <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTC:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	6a 81       	ldd	r22, Y+2	; 0x02
    1e9c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <MDIO_vSetPortVal>
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <HSSD_vDisplayNumber+0x7a>
			break;
		case DIO_PORTD:
			MDIO_vSetPortVal(A_PortID, A_u8NumberValue);
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ea6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <MDIO_vSetPortVal>
			break;
		}
	}
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <HSSD_vDisplayNumberAscending>:
void HSSD_vDisplayNumberAscending(DIO_PORT_e A_PortID , u16 A_u16TimetoWait)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	c0 55       	subi	r28, 0x50	; 80
    1ec2:	d0 40       	sbci	r29, 0x00	; 0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e9 5b       	subi	r30, 0xB9	; 185
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 83       	st	Z, r24
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e8 5b       	subi	r30, 0xB8	; 184
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	71 83       	std	Z+1, r23	; 0x01
    1ede:	60 83       	st	Z, r22
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    1ee0:	9e 01       	movw	r18, r28
    1ee2:	23 5c       	subi	r18, 0xC3	; 195
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	2e 96       	adiw	r28, 0x0e	; 14
    1ee8:	3f af       	std	Y+63, r19	; 0x3f
    1eea:	2e af       	std	Y+62, r18	; 0x3e
    1eec:	2e 97       	sbiw	r28, 0x0e	; 14
    1eee:	86 e3       	ldi	r24, 0x36	; 54
    1ef0:	92 e0       	ldi	r25, 0x02	; 2
    1ef2:	60 96       	adiw	r28, 0x10	; 16
    1ef4:	9f af       	std	Y+63, r25	; 0x3f
    1ef6:	8e af       	std	Y+62, r24	; 0x3e
    1ef8:	60 97       	sbiw	r28, 0x10	; 16
    1efa:	9a e0       	ldi	r25, 0x0A	; 10
    1efc:	61 96       	adiw	r28, 0x11	; 17
    1efe:	9f af       	std	Y+63, r25	; 0x3f
    1f00:	61 97       	sbiw	r28, 0x11	; 17
    1f02:	60 96       	adiw	r28, 0x10	; 16
    1f04:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f06:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f08:	60 97       	sbiw	r28, 0x10	; 16
    1f0a:	00 80       	ld	r0, Z
    1f0c:	60 96       	adiw	r28, 0x10	; 16
    1f0e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f10:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f12:	60 97       	sbiw	r28, 0x10	; 16
    1f14:	2f 5f       	subi	r18, 0xFF	; 255
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	60 96       	adiw	r28, 0x10	; 16
    1f1a:	3f af       	std	Y+63, r19	; 0x3f
    1f1c:	2e af       	std	Y+62, r18	; 0x3e
    1f1e:	60 97       	sbiw	r28, 0x10	; 16
    1f20:	2e 96       	adiw	r28, 0x0e	; 14
    1f22:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f24:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f26:	2e 97       	sbiw	r28, 0x0e	; 14
    1f28:	00 82       	st	Z, r0
    1f2a:	2e 96       	adiw	r28, 0x0e	; 14
    1f2c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f2e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f30:	2e 97       	sbiw	r28, 0x0e	; 14
    1f32:	2f 5f       	subi	r18, 0xFF	; 255
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	2e 96       	adiw	r28, 0x0e	; 14
    1f38:	3f af       	std	Y+63, r19	; 0x3f
    1f3a:	2e af       	std	Y+62, r18	; 0x3e
    1f3c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f3e:	61 96       	adiw	r28, 0x11	; 17
    1f40:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f42:	61 97       	sbiw	r28, 0x11	; 17
    1f44:	31 50       	subi	r19, 0x01	; 1
    1f46:	61 96       	adiw	r28, 0x11	; 17
    1f48:	3f af       	std	Y+63, r19	; 0x3f
    1f4a:	61 97       	sbiw	r28, 0x11	; 17
    1f4c:	61 96       	adiw	r28, 0x11	; 17
    1f4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f50:	61 97       	sbiw	r28, 0x11	; 17
    1f52:	88 23       	and	r24, r24
    1f54:	b1 f6       	brne	.-84     	; 0x1f02 <HSSD_vDisplayNumberAscending+0x4a>
	if(A_PortID <= DIO_PORTD)
    1f56:	fe 01       	movw	r30, r28
    1f58:	e9 5b       	subi	r30, 0xB9	; 185
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	84 30       	cpi	r24, 0x04	; 4
    1f60:	08 f0       	brcs	.+2      	; 0x1f64 <HSSD_vDisplayNumberAscending+0xac>
    1f62:	7c c2       	rjmp	.+1272   	; 0x245c <HSSD_vDisplayNumberAscending+0x5a4>
	{
		switch(A_PortID)
    1f64:	fe 01       	movw	r30, r28
    1f66:	e9 5b       	subi	r30, 0xB9	; 185
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	e8 2f       	mov	r30, r24
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	2c 96       	adiw	r28, 0x0c	; 12
    1f72:	ff af       	std	Y+63, r31	; 0x3f
    1f74:	ee af       	std	Y+62, r30	; 0x3e
    1f76:	2c 97       	sbiw	r28, 0x0c	; 12
    1f78:	2c 96       	adiw	r28, 0x0c	; 12
    1f7a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f7c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f7e:	2c 97       	sbiw	r28, 0x0c	; 12
    1f80:	21 30       	cpi	r18, 0x01	; 1
    1f82:	31 05       	cpc	r19, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <HSSD_vDisplayNumberAscending+0xd0>
    1f86:	b2 c0       	rjmp	.+356    	; 0x20ec <HSSD_vDisplayNumberAscending+0x234>
    1f88:	2c 96       	adiw	r28, 0x0c	; 12
    1f8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f8e:	2c 97       	sbiw	r28, 0x0c	; 12
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	91 05       	cpc	r25, r1
    1f94:	3c f4       	brge	.+14     	; 0x1fa4 <HSSD_vDisplayNumberAscending+0xec>
    1f96:	2c 96       	adiw	r28, 0x0c	; 12
    1f98:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f9a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f9c:	2c 97       	sbiw	r28, 0x0c	; 12
    1f9e:	30 97       	sbiw	r30, 0x00	; 0
    1fa0:	91 f0       	breq	.+36     	; 0x1fc6 <HSSD_vDisplayNumberAscending+0x10e>
    1fa2:	5c c2       	rjmp	.+1208   	; 0x245c <HSSD_vDisplayNumberAscending+0x5a4>
    1fa4:	2c 96       	adiw	r28, 0x0c	; 12
    1fa6:	2e ad       	ldd	r18, Y+62	; 0x3e
    1fa8:	3f ad       	ldd	r19, Y+63	; 0x3f
    1faa:	2c 97       	sbiw	r28, 0x0c	; 12
    1fac:	22 30       	cpi	r18, 0x02	; 2
    1fae:	31 05       	cpc	r19, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <HSSD_vDisplayNumberAscending+0xfc>
    1fb2:	2f c1       	rjmp	.+606    	; 0x2212 <HSSD_vDisplayNumberAscending+0x35a>
    1fb4:	2c 96       	adiw	r28, 0x0c	; 12
    1fb6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fba:	2c 97       	sbiw	r28, 0x0c	; 12
    1fbc:	83 30       	cpi	r24, 0x03	; 3
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <HSSD_vDisplayNumberAscending+0x10c>
    1fc2:	ba c1       	rjmp	.+884    	; 0x2338 <HSSD_vDisplayNumberAscending+0x480>
    1fc4:	4b c2       	rjmp	.+1174   	; 0x245c <HSSD_vDisplayNumberAscending+0x5a4>
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    1fc6:	1c ae       	std	Y+60, r1	; 0x3c
    1fc8:	8c c0       	rjmp	.+280    	; 0x20e2 <HSSD_vDisplayNumberAscending+0x22a>
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    1fca:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	cd 96       	adiw	r24, 0x3d	; 61
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e2 0f       	add	r30, r18
    1fd8:	f3 1f       	adc	r31, r19
    1fda:	90 81       	ld	r25, Z
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	69 2f       	mov	r22, r25
    1fe0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e8 5b       	subi	r30, 0xB8	; 184
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	cc 01       	movw	r24, r24
    1ff0:	a0 e0       	ldi	r26, 0x00	; 0
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	8d ab       	std	Y+53, r24	; 0x35
    2002:	9e ab       	std	Y+54, r25	; 0x36
    2004:	af ab       	std	Y+55, r26	; 0x37
    2006:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	6d a9       	ldd	r22, Y+53	; 0x35
    200a:	7e a9       	ldd	r23, Y+54	; 0x36
    200c:	8f a9       	ldd	r24, Y+55	; 0x37
    200e:	98 ad       	ldd	r25, Y+56	; 0x38
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e8       	ldi	r19, 0x80	; 128
    2014:	4b e3       	ldi	r20, 0x3B	; 59
    2016:	55 e4       	ldi	r21, 0x45	; 69
    2018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	89 ab       	std	Y+49, r24	; 0x31
    2022:	9a ab       	std	Y+50, r25	; 0x32
    2024:	ab ab       	std	Y+51, r26	; 0x33
    2026:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2028:	69 a9       	ldd	r22, Y+49	; 0x31
    202a:	7a a9       	ldd	r23, Y+50	; 0x32
    202c:	8b a9       	ldd	r24, Y+51	; 0x33
    202e:	9c a9       	ldd	r25, Y+52	; 0x34
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	5f e3       	ldi	r21, 0x3F	; 63
    2038:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    203c:	88 23       	and	r24, r24
    203e:	2c f4       	brge	.+10     	; 0x204a <HSSD_vDisplayNumberAscending+0x192>
		__ticks = 1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	98 ab       	std	Y+48, r25	; 0x30
    2046:	8f a7       	std	Y+47, r24	; 0x2f
    2048:	3f c0       	rjmp	.+126    	; 0x20c8 <HSSD_vDisplayNumberAscending+0x210>
	else if (__tmp > 65535)
    204a:	69 a9       	ldd	r22, Y+49	; 0x31
    204c:	7a a9       	ldd	r23, Y+50	; 0x32
    204e:	8b a9       	ldd	r24, Y+51	; 0x33
    2050:	9c a9       	ldd	r25, Y+52	; 0x34
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	3f ef       	ldi	r19, 0xFF	; 255
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	57 e4       	ldi	r21, 0x47	; 71
    205a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	4c f5       	brge	.+82     	; 0x20b4 <HSSD_vDisplayNumberAscending+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2062:	6d a9       	ldd	r22, Y+53	; 0x35
    2064:	7e a9       	ldd	r23, Y+54	; 0x36
    2066:	8f a9       	ldd	r24, Y+55	; 0x37
    2068:	98 ad       	ldd	r25, Y+56	; 0x38
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e2       	ldi	r20, 0x20	; 32
    2070:	51 e4       	ldi	r21, 0x41	; 65
    2072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	98 ab       	std	Y+48, r25	; 0x30
    2088:	8f a7       	std	Y+47, r24	; 0x2f
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <HSSD_vDisplayNumberAscending+0x1f2>
    208c:	8c e2       	ldi	r24, 0x2C	; 44
    208e:	91 e0       	ldi	r25, 0x01	; 1
    2090:	9e a7       	std	Y+46, r25	; 0x2e
    2092:	8d a7       	std	Y+45, r24	; 0x2d
    2094:	8d a5       	ldd	r24, Y+45	; 0x2d
    2096:	9e a5       	ldd	r25, Y+46	; 0x2e
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <HSSD_vDisplayNumberAscending+0x1e0>
    209c:	9e a7       	std	Y+46, r25	; 0x2e
    209e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a2:	98 a9       	ldd	r25, Y+48	; 0x30
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	98 ab       	std	Y+48, r25	; 0x30
    20a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ac:	98 a9       	ldd	r25, Y+48	; 0x30
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	69 f7       	brne	.-38     	; 0x208c <HSSD_vDisplayNumberAscending+0x1d4>
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <HSSD_vDisplayNumberAscending+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b4:	69 a9       	ldd	r22, Y+49	; 0x31
    20b6:	7a a9       	ldd	r23, Y+50	; 0x32
    20b8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ba:	9c a9       	ldd	r25, Y+52	; 0x34
    20bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	98 ab       	std	Y+48, r25	; 0x30
    20c6:	8f a7       	std	Y+47, r24	; 0x2f
    20c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ca:	98 a9       	ldd	r25, Y+48	; 0x30
    20cc:	9c a7       	std	Y+44, r25	; 0x2c
    20ce:	8b a7       	std	Y+43, r24	; 0x2b
    20d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <HSSD_vDisplayNumberAscending+0x21c>
    20d8:	9c a7       	std	Y+44, r25	; 0x2c
    20da:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(u8 i =0 ; i <= 9; i++)
    20dc:	8c ad       	ldd	r24, Y+60	; 0x3c
    20de:	8f 5f       	subi	r24, 0xFF	; 255
    20e0:	8c af       	std	Y+60, r24	; 0x3c
    20e2:	8c ad       	ldd	r24, Y+60	; 0x3c
    20e4:	8a 30       	cpi	r24, 0x0A	; 10
    20e6:	08 f4       	brcc	.+2      	; 0x20ea <HSSD_vDisplayNumberAscending+0x232>
    20e8:	70 cf       	rjmp	.-288    	; 0x1fca <HSSD_vDisplayNumberAscending+0x112>
    20ea:	b8 c1       	rjmp	.+880    	; 0x245c <HSSD_vDisplayNumberAscending+0x5a4>

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    20ec:	1b ae       	std	Y+59, r1	; 0x3b
    20ee:	8c c0       	rjmp	.+280    	; 0x2208 <HSSD_vDisplayNumberAscending+0x350>
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    20f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	ce 01       	movw	r24, r28
    20f8:	cd 96       	adiw	r24, 0x3d	; 61
    20fa:	fc 01       	movw	r30, r24
    20fc:	e2 0f       	add	r30, r18
    20fe:	f3 1f       	adc	r31, r19
    2100:	90 81       	ld	r25, Z
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	69 2f       	mov	r22, r25
    2106:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    210a:	fe 01       	movw	r30, r28
    210c:	e8 5b       	subi	r30, 0xB8	; 184
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	cc 01       	movw	r24, r24
    2116:	a0 e0       	ldi	r26, 0x00	; 0
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8f a3       	std	Y+39, r24	; 0x27
    2128:	98 a7       	std	Y+40, r25	; 0x28
    212a:	a9 a7       	std	Y+41, r26	; 0x29
    212c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212e:	6f a1       	ldd	r22, Y+39	; 0x27
    2130:	78 a5       	ldd	r23, Y+40	; 0x28
    2132:	89 a5       	ldd	r24, Y+41	; 0x29
    2134:	9a a5       	ldd	r25, Y+42	; 0x2a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e8       	ldi	r19, 0x80	; 128
    213a:	4b e3       	ldi	r20, 0x3B	; 59
    213c:	55 e4       	ldi	r21, 0x45	; 69
    213e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	8b a3       	std	Y+35, r24	; 0x23
    2148:	9c a3       	std	Y+36, r25	; 0x24
    214a:	ad a3       	std	Y+37, r26	; 0x25
    214c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    214e:	6b a1       	ldd	r22, Y+35	; 0x23
    2150:	7c a1       	ldd	r23, Y+36	; 0x24
    2152:	8d a1       	ldd	r24, Y+37	; 0x25
    2154:	9e a1       	ldd	r25, Y+38	; 0x26
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e8       	ldi	r20, 0x80	; 128
    215c:	5f e3       	ldi	r21, 0x3F	; 63
    215e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2162:	88 23       	and	r24, r24
    2164:	2c f4       	brge	.+10     	; 0x2170 <HSSD_vDisplayNumberAscending+0x2b8>
		__ticks = 1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9a a3       	std	Y+34, r25	; 0x22
    216c:	89 a3       	std	Y+33, r24	; 0x21
    216e:	3f c0       	rjmp	.+126    	; 0x21ee <HSSD_vDisplayNumberAscending+0x336>
	else if (__tmp > 65535)
    2170:	6b a1       	ldd	r22, Y+35	; 0x23
    2172:	7c a1       	ldd	r23, Y+36	; 0x24
    2174:	8d a1       	ldd	r24, Y+37	; 0x25
    2176:	9e a1       	ldd	r25, Y+38	; 0x26
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	3f ef       	ldi	r19, 0xFF	; 255
    217c:	4f e7       	ldi	r20, 0x7F	; 127
    217e:	57 e4       	ldi	r21, 0x47	; 71
    2180:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2184:	18 16       	cp	r1, r24
    2186:	4c f5       	brge	.+82     	; 0x21da <HSSD_vDisplayNumberAscending+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2188:	6f a1       	ldd	r22, Y+39	; 0x27
    218a:	78 a5       	ldd	r23, Y+40	; 0x28
    218c:	89 a5       	ldd	r24, Y+41	; 0x29
    218e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e2       	ldi	r20, 0x20	; 32
    2196:	51 e4       	ldi	r21, 0x41	; 65
    2198:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9a a3       	std	Y+34, r25	; 0x22
    21ae:	89 a3       	std	Y+33, r24	; 0x21
    21b0:	0f c0       	rjmp	.+30     	; 0x21d0 <HSSD_vDisplayNumberAscending+0x318>
    21b2:	8c e2       	ldi	r24, 0x2C	; 44
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	98 a3       	std	Y+32, r25	; 0x20
    21b8:	8f 8f       	std	Y+31, r24	; 0x1f
    21ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21bc:	98 a1       	ldd	r25, Y+32	; 0x20
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <HSSD_vDisplayNumberAscending+0x306>
    21c2:	98 a3       	std	Y+32, r25	; 0x20
    21c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c6:	89 a1       	ldd	r24, Y+33	; 0x21
    21c8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	9a a3       	std	Y+34, r25	; 0x22
    21ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d0:	89 a1       	ldd	r24, Y+33	; 0x21
    21d2:	9a a1       	ldd	r25, Y+34	; 0x22
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	69 f7       	brne	.-38     	; 0x21b2 <HSSD_vDisplayNumberAscending+0x2fa>
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <HSSD_vDisplayNumberAscending+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21da:	6b a1       	ldd	r22, Y+35	; 0x23
    21dc:	7c a1       	ldd	r23, Y+36	; 0x24
    21de:	8d a1       	ldd	r24, Y+37	; 0x25
    21e0:	9e a1       	ldd	r25, Y+38	; 0x26
    21e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	9a a3       	std	Y+34, r25	; 0x22
    21ec:	89 a3       	std	Y+33, r24	; 0x21
    21ee:	89 a1       	ldd	r24, Y+33	; 0x21
    21f0:	9a a1       	ldd	r25, Y+34	; 0x22
    21f2:	9e 8f       	std	Y+30, r25	; 0x1e
    21f4:	8d 8f       	std	Y+29, r24	; 0x1d
    21f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <HSSD_vDisplayNumberAscending+0x342>
    21fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2200:	8d 8f       	std	Y+29, r24	; 0x1d

			}
			break;

		case DIO_PORTB:
			for(u8 i =0 ; i <= 9; i++)
    2202:	8b ad       	ldd	r24, Y+59	; 0x3b
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	8b af       	std	Y+59, r24	; 0x3b
    2208:	8b ad       	ldd	r24, Y+59	; 0x3b
    220a:	8a 30       	cpi	r24, 0x0A	; 10
    220c:	08 f4       	brcc	.+2      	; 0x2210 <HSSD_vDisplayNumberAscending+0x358>
    220e:	70 cf       	rjmp	.-288    	; 0x20f0 <HSSD_vDisplayNumberAscending+0x238>
    2210:	25 c1       	rjmp	.+586    	; 0x245c <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    2212:	1a ae       	std	Y+58, r1	; 0x3a
    2214:	8c c0       	rjmp	.+280    	; 0x232e <HSSD_vDisplayNumberAscending+0x476>
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    2216:	8a ad       	ldd	r24, Y+58	; 0x3a
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	ce 01       	movw	r24, r28
    221e:	cd 96       	adiw	r24, 0x3d	; 61
    2220:	fc 01       	movw	r30, r24
    2222:	e2 0f       	add	r30, r18
    2224:	f3 1f       	adc	r31, r19
    2226:	90 81       	ld	r25, Z
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	69 2f       	mov	r22, r25
    222c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2230:	fe 01       	movw	r30, r28
    2232:	e8 5b       	subi	r30, 0xB8	; 184
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	cc 01       	movw	r24, r24
    223c:	a0 e0       	ldi	r26, 0x00	; 0
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	89 8f       	std	Y+25, r24	; 0x19
    224e:	9a 8f       	std	Y+26, r25	; 0x1a
    2250:	ab 8f       	std	Y+27, r26	; 0x1b
    2252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2254:	69 8d       	ldd	r22, Y+25	; 0x19
    2256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e8       	ldi	r19, 0x80	; 128
    2260:	4b e3       	ldi	r20, 0x3B	; 59
    2262:	55 e4       	ldi	r21, 0x45	; 69
    2264:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8d 8b       	std	Y+21, r24	; 0x15
    226e:	9e 8b       	std	Y+22, r25	; 0x16
    2270:	af 8b       	std	Y+23, r26	; 0x17
    2272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2274:	6d 89       	ldd	r22, Y+21	; 0x15
    2276:	7e 89       	ldd	r23, Y+22	; 0x16
    2278:	8f 89       	ldd	r24, Y+23	; 0x17
    227a:	98 8d       	ldd	r25, Y+24	; 0x18
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	2c f4       	brge	.+10     	; 0x2296 <HSSD_vDisplayNumberAscending+0x3de>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9c 8b       	std	Y+20, r25	; 0x14
    2292:	8b 8b       	std	Y+19, r24	; 0x13
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <HSSD_vDisplayNumberAscending+0x45c>
	else if (__tmp > 65535)
    2296:	6d 89       	ldd	r22, Y+21	; 0x15
    2298:	7e 89       	ldd	r23, Y+22	; 0x16
    229a:	8f 89       	ldd	r24, Y+23	; 0x17
    229c:	98 8d       	ldd	r25, Y+24	; 0x18
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	4c f5       	brge	.+82     	; 0x2300 <HSSD_vDisplayNumberAscending+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ae:	69 8d       	ldd	r22, Y+25	; 0x19
    22b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e2       	ldi	r20, 0x20	; 32
    22bc:	51 e4       	ldi	r21, 0x41	; 65
    22be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9c 8b       	std	Y+20, r25	; 0x14
    22d4:	8b 8b       	std	Y+19, r24	; 0x13
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <HSSD_vDisplayNumberAscending+0x43e>
    22d8:	8c e2       	ldi	r24, 0x2C	; 44
    22da:	91 e0       	ldi	r25, 0x01	; 1
    22dc:	9a 8b       	std	Y+18, r25	; 0x12
    22de:	89 8b       	std	Y+17, r24	; 0x11
    22e0:	89 89       	ldd	r24, Y+17	; 0x11
    22e2:	9a 89       	ldd	r25, Y+18	; 0x12
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <HSSD_vDisplayNumberAscending+0x42c>
    22e8:	9a 8b       	std	Y+18, r25	; 0x12
    22ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	8b 89       	ldd	r24, Y+19	; 0x13
    22ee:	9c 89       	ldd	r25, Y+20	; 0x14
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	9c 8b       	std	Y+20, r25	; 0x14
    22f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	8b 89       	ldd	r24, Y+19	; 0x13
    22f8:	9c 89       	ldd	r25, Y+20	; 0x14
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <HSSD_vDisplayNumberAscending+0x420>
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <HSSD_vDisplayNumberAscending+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	6d 89       	ldd	r22, Y+21	; 0x15
    2302:	7e 89       	ldd	r23, Y+22	; 0x16
    2304:	8f 89       	ldd	r24, Y+23	; 0x17
    2306:	98 8d       	ldd	r25, Y+24	; 0x18
    2308:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9c 8b       	std	Y+20, r25	; 0x14
    2312:	8b 8b       	std	Y+19, r24	; 0x13
    2314:	8b 89       	ldd	r24, Y+19	; 0x13
    2316:	9c 89       	ldd	r25, Y+20	; 0x14
    2318:	98 8b       	std	Y+16, r25	; 0x10
    231a:	8f 87       	std	Y+15, r24	; 0x0f
    231c:	8f 85       	ldd	r24, Y+15	; 0x0f
    231e:	98 89       	ldd	r25, Y+16	; 0x10
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <HSSD_vDisplayNumberAscending+0x468>
    2324:	98 8b       	std	Y+16, r25	; 0x10
    2326:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =0 ; i <= 9; i++)
    2328:	8a ad       	ldd	r24, Y+58	; 0x3a
    232a:	8f 5f       	subi	r24, 0xFF	; 255
    232c:	8a af       	std	Y+58, r24	; 0x3a
    232e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2330:	8a 30       	cpi	r24, 0x0A	; 10
    2332:	08 f4       	brcc	.+2      	; 0x2336 <HSSD_vDisplayNumberAscending+0x47e>
    2334:	70 cf       	rjmp	.-288    	; 0x2216 <HSSD_vDisplayNumberAscending+0x35e>
    2336:	92 c0       	rjmp	.+292    	; 0x245c <HSSD_vDisplayNumberAscending+0x5a4>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    2338:	19 ae       	std	Y+57, r1	; 0x39
    233a:	8c c0       	rjmp	.+280    	; 0x2454 <HSSD_vDisplayNumberAscending+0x59c>
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    233c:	89 ad       	ldd	r24, Y+57	; 0x39
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	ce 01       	movw	r24, r28
    2344:	cd 96       	adiw	r24, 0x3d	; 61
    2346:	fc 01       	movw	r30, r24
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	90 81       	ld	r25, Z
    234e:	83 e0       	ldi	r24, 0x03	; 3
    2350:	69 2f       	mov	r22, r25
    2352:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2356:	fe 01       	movw	r30, r28
    2358:	e8 5b       	subi	r30, 0xB8	; 184
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	91 81       	ldd	r25, Z+1	; 0x01
    2360:	cc 01       	movw	r24, r24
    2362:	a0 e0       	ldi	r26, 0x00	; 0
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8b 87       	std	Y+11, r24	; 0x0b
    2374:	9c 87       	std	Y+12, r25	; 0x0c
    2376:	ad 87       	std	Y+13, r26	; 0x0d
    2378:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	6b 85       	ldd	r22, Y+11	; 0x0b
    237c:	7c 85       	ldd	r23, Y+12	; 0x0c
    237e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2380:	9e 85       	ldd	r25, Y+14	; 0x0e
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e8       	ldi	r19, 0x80	; 128
    2386:	4b e3       	ldi	r20, 0x3B	; 59
    2388:	55 e4       	ldi	r21, 0x45	; 69
    238a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	8f 83       	std	Y+7, r24	; 0x07
    2394:	98 87       	std	Y+8, r25	; 0x08
    2396:	a9 87       	std	Y+9, r26	; 0x09
    2398:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239a:	6f 81       	ldd	r22, Y+7	; 0x07
    239c:	78 85       	ldd	r23, Y+8	; 0x08
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5f e3       	ldi	r21, 0x3F	; 63
    23aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ae:	88 23       	and	r24, r24
    23b0:	2c f4       	brge	.+10     	; 0x23bc <HSSD_vDisplayNumberAscending+0x504>
		__ticks = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9e 83       	std	Y+6, r25	; 0x06
    23b8:	8d 83       	std	Y+5, r24	; 0x05
    23ba:	3f c0       	rjmp	.+126    	; 0x243a <HSSD_vDisplayNumberAscending+0x582>
	else if (__tmp > 65535)
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	4c f5       	brge	.+82     	; 0x2426 <HSSD_vDisplayNumberAscending+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23da:	9e 85       	ldd	r25, Y+14	; 0x0e
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <HSSD_vDisplayNumberAscending+0x564>
    23fe:	8c e2       	ldi	r24, 0x2C	; 44
    2400:	91 e0       	ldi	r25, 0x01	; 1
    2402:	9c 83       	std	Y+4, r25	; 0x04
    2404:	8b 83       	std	Y+3, r24	; 0x03
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <HSSD_vDisplayNumberAscending+0x552>
    240e:	9c 83       	std	Y+4, r25	; 0x04
    2410:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	9e 81       	ldd	r25, Y+6	; 0x06
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	69 f7       	brne	.-38     	; 0x23fe <HSSD_vDisplayNumberAscending+0x546>
    2424:	14 c0       	rjmp	.+40     	; 0x244e <HSSD_vDisplayNumberAscending+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	6f 81       	ldd	r22, Y+7	; 0x07
    2428:	78 85       	ldd	r23, Y+8	; 0x08
    242a:	89 85       	ldd	r24, Y+9	; 0x09
    242c:	9a 85       	ldd	r25, Y+10	; 0x0a
    242e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <HSSD_vDisplayNumberAscending+0x58e>
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i =0 ; i <= 9; i++)
    244e:	89 ad       	ldd	r24, Y+57	; 0x39
    2450:	8f 5f       	subi	r24, 0xFF	; 255
    2452:	89 af       	std	Y+57, r24	; 0x39
    2454:	89 ad       	ldd	r24, Y+57	; 0x39
    2456:	8a 30       	cpi	r24, 0x0A	; 10
    2458:	08 f4       	brcc	.+2      	; 0x245c <HSSD_vDisplayNumberAscending+0x5a4>
    245a:	70 cf       	rjmp	.-288    	; 0x233c <HSSD_vDisplayNumberAscending+0x484>
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
	}
}
    245c:	c0 5b       	subi	r28, 0xB0	; 176
    245e:	df 4f       	sbci	r29, 0xFF	; 255
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <HSSD_vCountDown>:


void HSSD_vCountDown(DIO_PORT_e A_PortID ,u8 A_u8Time , u16 A_u16TimetoWait)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	c1 55       	subi	r28, 0x51	; 81
    247a:	d0 40       	sbci	r29, 0x00	; 0
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	fe 01       	movw	r30, r28
    2488:	e9 5b       	subi	r30, 0xB9	; 185
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 83       	st	Z, r24
    248e:	fe 01       	movw	r30, r28
    2490:	e8 5b       	subi	r30, 0xB8	; 184
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	60 83       	st	Z, r22
    2496:	fe 01       	movw	r30, r28
    2498:	e7 5b       	subi	r30, 0xB7	; 183
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	51 83       	std	Z+1, r21	; 0x01
    249e:	40 83       	st	Z, r20
	u8 SSD_u8ArrOfNumbers [10]= {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    24a0:	9e 01       	movw	r18, r28
    24a2:	23 5c       	subi	r18, 0xC3	; 195
    24a4:	3f 4f       	sbci	r19, 0xFF	; 255
    24a6:	2f 96       	adiw	r28, 0x0f	; 15
    24a8:	3f af       	std	Y+63, r19	; 0x3f
    24aa:	2e af       	std	Y+62, r18	; 0x3e
    24ac:	2f 97       	sbiw	r28, 0x0f	; 15
    24ae:	80 e4       	ldi	r24, 0x40	; 64
    24b0:	92 e0       	ldi	r25, 0x02	; 2
    24b2:	61 96       	adiw	r28, 0x11	; 17
    24b4:	9f af       	std	Y+63, r25	; 0x3f
    24b6:	8e af       	std	Y+62, r24	; 0x3e
    24b8:	61 97       	sbiw	r28, 0x11	; 17
    24ba:	9a e0       	ldi	r25, 0x0A	; 10
    24bc:	62 96       	adiw	r28, 0x12	; 18
    24be:	9f af       	std	Y+63, r25	; 0x3f
    24c0:	62 97       	sbiw	r28, 0x12	; 18
    24c2:	61 96       	adiw	r28, 0x11	; 17
    24c4:	ee ad       	ldd	r30, Y+62	; 0x3e
    24c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    24c8:	61 97       	sbiw	r28, 0x11	; 17
    24ca:	00 80       	ld	r0, Z
    24cc:	61 96       	adiw	r28, 0x11	; 17
    24ce:	2e ad       	ldd	r18, Y+62	; 0x3e
    24d0:	3f ad       	ldd	r19, Y+63	; 0x3f
    24d2:	61 97       	sbiw	r28, 0x11	; 17
    24d4:	2f 5f       	subi	r18, 0xFF	; 255
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	61 96       	adiw	r28, 0x11	; 17
    24da:	3f af       	std	Y+63, r19	; 0x3f
    24dc:	2e af       	std	Y+62, r18	; 0x3e
    24de:	61 97       	sbiw	r28, 0x11	; 17
    24e0:	2f 96       	adiw	r28, 0x0f	; 15
    24e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    24e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    24e6:	2f 97       	sbiw	r28, 0x0f	; 15
    24e8:	00 82       	st	Z, r0
    24ea:	2f 96       	adiw	r28, 0x0f	; 15
    24ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    24ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    24f0:	2f 97       	sbiw	r28, 0x0f	; 15
    24f2:	2f 5f       	subi	r18, 0xFF	; 255
    24f4:	3f 4f       	sbci	r19, 0xFF	; 255
    24f6:	2f 96       	adiw	r28, 0x0f	; 15
    24f8:	3f af       	std	Y+63, r19	; 0x3f
    24fa:	2e af       	std	Y+62, r18	; 0x3e
    24fc:	2f 97       	sbiw	r28, 0x0f	; 15
    24fe:	62 96       	adiw	r28, 0x12	; 18
    2500:	3f ad       	ldd	r19, Y+63	; 0x3f
    2502:	62 97       	sbiw	r28, 0x12	; 18
    2504:	31 50       	subi	r19, 0x01	; 1
    2506:	62 96       	adiw	r28, 0x12	; 18
    2508:	3f af       	std	Y+63, r19	; 0x3f
    250a:	62 97       	sbiw	r28, 0x12	; 18
    250c:	62 96       	adiw	r28, 0x12	; 18
    250e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2510:	62 97       	sbiw	r28, 0x12	; 18
    2512:	88 23       	and	r24, r24
    2514:	b1 f6       	brne	.-84     	; 0x24c2 <HSSD_vCountDown+0x52>

	if(A_PortID <= DIO_PORTD)
    2516:	fe 01       	movw	r30, r28
    2518:	e9 5b       	subi	r30, 0xB9	; 185
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	84 30       	cpi	r24, 0x04	; 4
    2520:	08 f0       	brcs	.+2      	; 0x2524 <HSSD_vCountDown+0xb4>
    2522:	79 c2       	rjmp	.+1266   	; 0x2a16 <HSSD_vCountDown+0x5a6>
	{
		switch(A_PortID)
    2524:	fe 01       	movw	r30, r28
    2526:	e9 5b       	subi	r30, 0xB9	; 185
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 81       	ld	r24, Z
    252c:	e8 2f       	mov	r30, r24
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	2d 96       	adiw	r28, 0x0d	; 13
    2532:	ff af       	std	Y+63, r31	; 0x3f
    2534:	ee af       	std	Y+62, r30	; 0x3e
    2536:	2d 97       	sbiw	r28, 0x0d	; 13
    2538:	2d 96       	adiw	r28, 0x0d	; 13
    253a:	2e ad       	ldd	r18, Y+62	; 0x3e
    253c:	3f ad       	ldd	r19, Y+63	; 0x3f
    253e:	2d 97       	sbiw	r28, 0x0d	; 13
    2540:	21 30       	cpi	r18, 0x01	; 1
    2542:	31 05       	cpc	r19, r1
    2544:	09 f4       	brne	.+2      	; 0x2548 <HSSD_vCountDown+0xd8>
    2546:	b1 c0       	rjmp	.+354    	; 0x26aa <HSSD_vCountDown+0x23a>
    2548:	2d 96       	adiw	r28, 0x0d	; 13
    254a:	8e ad       	ldd	r24, Y+62	; 0x3e
    254c:	9f ad       	ldd	r25, Y+63	; 0x3f
    254e:	2d 97       	sbiw	r28, 0x0d	; 13
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	91 05       	cpc	r25, r1
    2554:	3c f4       	brge	.+14     	; 0x2564 <HSSD_vCountDown+0xf4>
    2556:	2d 96       	adiw	r28, 0x0d	; 13
    2558:	ee ad       	ldd	r30, Y+62	; 0x3e
    255a:	ff ad       	ldd	r31, Y+63	; 0x3f
    255c:	2d 97       	sbiw	r28, 0x0d	; 13
    255e:	30 97       	sbiw	r30, 0x00	; 0
    2560:	91 f0       	breq	.+36     	; 0x2586 <HSSD_vCountDown+0x116>
    2562:	59 c2       	rjmp	.+1202   	; 0x2a16 <HSSD_vCountDown+0x5a6>
    2564:	2d 96       	adiw	r28, 0x0d	; 13
    2566:	2e ad       	ldd	r18, Y+62	; 0x3e
    2568:	3f ad       	ldd	r19, Y+63	; 0x3f
    256a:	2d 97       	sbiw	r28, 0x0d	; 13
    256c:	22 30       	cpi	r18, 0x02	; 2
    256e:	31 05       	cpc	r19, r1
    2570:	09 f4       	brne	.+2      	; 0x2574 <HSSD_vCountDown+0x104>
    2572:	2d c1       	rjmp	.+602    	; 0x27ce <HSSD_vCountDown+0x35e>
    2574:	2d 96       	adiw	r28, 0x0d	; 13
    2576:	8e ad       	ldd	r24, Y+62	; 0x3e
    2578:	9f ad       	ldd	r25, Y+63	; 0x3f
    257a:	2d 97       	sbiw	r28, 0x0d	; 13
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	91 05       	cpc	r25, r1
    2580:	09 f4       	brne	.+2      	; 0x2584 <HSSD_vCountDown+0x114>
    2582:	b7 c1       	rjmp	.+878    	; 0x28f2 <HSSD_vCountDown+0x482>
    2584:	48 c2       	rjmp	.+1168   	; 0x2a16 <HSSD_vCountDown+0x5a6>
		{
		case DIO_PORTA:
			for(u8 i=A_u8Time; i >= 0; i--)
    2586:	fe 01       	movw	r30, r28
    2588:	e8 5b       	subi	r30, 0xB8	; 184
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	8c af       	std	Y+60, r24	; 0x3c
			{
				HSSD_vDisplayNumber(DIO_PORTA, SSD_u8ArrOfNumbers[i]);
    2590:	8c ad       	ldd	r24, Y+60	; 0x3c
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	ce 01       	movw	r24, r28
    2598:	cd 96       	adiw	r24, 0x3d	; 61
    259a:	fc 01       	movw	r30, r24
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	90 81       	ld	r25, Z
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	69 2f       	mov	r22, r25
    25a6:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    25aa:	fe 01       	movw	r30, r28
    25ac:	e7 5b       	subi	r30, 0xB7	; 183
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	cc 01       	movw	r24, r24
    25b6:	a0 e0       	ldi	r26, 0x00	; 0
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8d ab       	std	Y+53, r24	; 0x35
    25c8:	9e ab       	std	Y+54, r25	; 0x36
    25ca:	af ab       	std	Y+55, r26	; 0x37
    25cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ce:	6d a9       	ldd	r22, Y+53	; 0x35
    25d0:	7e a9       	ldd	r23, Y+54	; 0x36
    25d2:	8f a9       	ldd	r24, Y+55	; 0x37
    25d4:	98 ad       	ldd	r25, Y+56	; 0x38
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e8       	ldi	r19, 0x80	; 128
    25da:	4b e3       	ldi	r20, 0x3B	; 59
    25dc:	55 e4       	ldi	r21, 0x45	; 69
    25de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	89 ab       	std	Y+49, r24	; 0x31
    25e8:	9a ab       	std	Y+50, r25	; 0x32
    25ea:	ab ab       	std	Y+51, r26	; 0x33
    25ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25ee:	69 a9       	ldd	r22, Y+49	; 0x31
    25f0:	7a a9       	ldd	r23, Y+50	; 0x32
    25f2:	8b a9       	ldd	r24, Y+51	; 0x33
    25f4:	9c a9       	ldd	r25, Y+52	; 0x34
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e8       	ldi	r20, 0x80	; 128
    25fc:	5f e3       	ldi	r21, 0x3F	; 63
    25fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2602:	88 23       	and	r24, r24
    2604:	2c f4       	brge	.+10     	; 0x2610 <HSSD_vCountDown+0x1a0>
		__ticks = 1;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	98 ab       	std	Y+48, r25	; 0x30
    260c:	8f a7       	std	Y+47, r24	; 0x2f
    260e:	3f c0       	rjmp	.+126    	; 0x268e <HSSD_vCountDown+0x21e>
	else if (__tmp > 65535)
    2610:	69 a9       	ldd	r22, Y+49	; 0x31
    2612:	7a a9       	ldd	r23, Y+50	; 0x32
    2614:	8b a9       	ldd	r24, Y+51	; 0x33
    2616:	9c a9       	ldd	r25, Y+52	; 0x34
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	4c f5       	brge	.+82     	; 0x267a <HSSD_vCountDown+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	6d a9       	ldd	r22, Y+53	; 0x35
    262a:	7e a9       	ldd	r23, Y+54	; 0x36
    262c:	8f a9       	ldd	r24, Y+55	; 0x37
    262e:	98 ad       	ldd	r25, Y+56	; 0x38
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	51 e4       	ldi	r21, 0x41	; 65
    2638:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	bc 01       	movw	r22, r24
    2642:	cd 01       	movw	r24, r26
    2644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	98 ab       	std	Y+48, r25	; 0x30
    264e:	8f a7       	std	Y+47, r24	; 0x2f
    2650:	0f c0       	rjmp	.+30     	; 0x2670 <HSSD_vCountDown+0x200>
    2652:	8c e2       	ldi	r24, 0x2C	; 44
    2654:	91 e0       	ldi	r25, 0x01	; 1
    2656:	9e a7       	std	Y+46, r25	; 0x2e
    2658:	8d a7       	std	Y+45, r24	; 0x2d
    265a:	8d a5       	ldd	r24, Y+45	; 0x2d
    265c:	9e a5       	ldd	r25, Y+46	; 0x2e
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <HSSD_vCountDown+0x1ee>
    2662:	9e a7       	std	Y+46, r25	; 0x2e
    2664:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2666:	8f a5       	ldd	r24, Y+47	; 0x2f
    2668:	98 a9       	ldd	r25, Y+48	; 0x30
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	98 ab       	std	Y+48, r25	; 0x30
    266e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2670:	8f a5       	ldd	r24, Y+47	; 0x2f
    2672:	98 a9       	ldd	r25, Y+48	; 0x30
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	69 f7       	brne	.-38     	; 0x2652 <HSSD_vCountDown+0x1e2>
    2678:	14 c0       	rjmp	.+40     	; 0x26a2 <HSSD_vCountDown+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267a:	69 a9       	ldd	r22, Y+49	; 0x31
    267c:	7a a9       	ldd	r23, Y+50	; 0x32
    267e:	8b a9       	ldd	r24, Y+51	; 0x33
    2680:	9c a9       	ldd	r25, Y+52	; 0x34
    2682:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	98 ab       	std	Y+48, r25	; 0x30
    268c:	8f a7       	std	Y+47, r24	; 0x2f
    268e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2690:	98 a9       	ldd	r25, Y+48	; 0x30
    2692:	9c a7       	std	Y+44, r25	; 0x2c
    2694:	8b a7       	std	Y+43, r24	; 0x2b
    2696:	8b a5       	ldd	r24, Y+43	; 0x2b
    2698:	9c a5       	ldd	r25, Y+44	; 0x2c
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <HSSD_vCountDown+0x22a>
    269e:	9c a7       	std	Y+44, r25	; 0x2c
    26a0:	8b a7       	std	Y+43, r24	; 0x2b
	if(A_PortID <= DIO_PORTD)
	{
		switch(A_PortID)
		{
		case DIO_PORTA:
			for(u8 i=A_u8Time; i >= 0; i--)
    26a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    26a4:	81 50       	subi	r24, 0x01	; 1
    26a6:	8c af       	std	Y+60, r24	; 0x3c
    26a8:	73 cf       	rjmp	.-282    	; 0x2590 <HSSD_vCountDown+0x120>

			}
			break;

		case DIO_PORTB:
			for(u8 i=A_u8Time; i >= 0; i--)
    26aa:	fe 01       	movw	r30, r28
    26ac:	e8 5b       	subi	r30, 0xB8	; 184
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 81       	ld	r24, Z
    26b2:	8b af       	std	Y+59, r24	; 0x3b
			{
				HSSD_vDisplayNumber(DIO_PORTB, SSD_u8ArrOfNumbers[i]);
    26b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	ce 01       	movw	r24, r28
    26bc:	cd 96       	adiw	r24, 0x3d	; 61
    26be:	fc 01       	movw	r30, r24
    26c0:	e2 0f       	add	r30, r18
    26c2:	f3 1f       	adc	r31, r19
    26c4:	90 81       	ld	r25, Z
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	69 2f       	mov	r22, r25
    26ca:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 5b       	subi	r30, 0xB7	; 183
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	cc 01       	movw	r24, r24
    26da:	a0 e0       	ldi	r26, 0x00	; 0
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8f a3       	std	Y+39, r24	; 0x27
    26ec:	98 a7       	std	Y+40, r25	; 0x28
    26ee:	a9 a7       	std	Y+41, r26	; 0x29
    26f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	6f a1       	ldd	r22, Y+39	; 0x27
    26f4:	78 a5       	ldd	r23, Y+40	; 0x28
    26f6:	89 a5       	ldd	r24, Y+41	; 0x29
    26f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e8       	ldi	r19, 0x80	; 128
    26fe:	4b e3       	ldi	r20, 0x3B	; 59
    2700:	55 e4       	ldi	r21, 0x45	; 69
    2702:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8b a3       	std	Y+35, r24	; 0x23
    270c:	9c a3       	std	Y+36, r25	; 0x24
    270e:	ad a3       	std	Y+37, r26	; 0x25
    2710:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2712:	6b a1       	ldd	r22, Y+35	; 0x23
    2714:	7c a1       	ldd	r23, Y+36	; 0x24
    2716:	8d a1       	ldd	r24, Y+37	; 0x25
    2718:	9e a1       	ldd	r25, Y+38	; 0x26
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <HSSD_vCountDown+0x2c4>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9a a3       	std	Y+34, r25	; 0x22
    2730:	89 a3       	std	Y+33, r24	; 0x21
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <HSSD_vCountDown+0x342>
	else if (__tmp > 65535)
    2734:	6b a1       	ldd	r22, Y+35	; 0x23
    2736:	7c a1       	ldd	r23, Y+36	; 0x24
    2738:	8d a1       	ldd	r24, Y+37	; 0x25
    273a:	9e a1       	ldd	r25, Y+38	; 0x26
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <HSSD_vCountDown+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	6f a1       	ldd	r22, Y+39	; 0x27
    274e:	78 a5       	ldd	r23, Y+40	; 0x28
    2750:	89 a5       	ldd	r24, Y+41	; 0x29
    2752:	9a a5       	ldd	r25, Y+42	; 0x2a
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9a a3       	std	Y+34, r25	; 0x22
    2772:	89 a3       	std	Y+33, r24	; 0x21
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <HSSD_vCountDown+0x324>
    2776:	8c e2       	ldi	r24, 0x2C	; 44
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	98 a3       	std	Y+32, r25	; 0x20
    277c:	8f 8f       	std	Y+31, r24	; 0x1f
    277e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2780:	98 a1       	ldd	r25, Y+32	; 0x20
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <HSSD_vCountDown+0x312>
    2786:	98 a3       	std	Y+32, r25	; 0x20
    2788:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	89 a1       	ldd	r24, Y+33	; 0x21
    278c:	9a a1       	ldd	r25, Y+34	; 0x22
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9a a3       	std	Y+34, r25	; 0x22
    2792:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	89 a1       	ldd	r24, Y+33	; 0x21
    2796:	9a a1       	ldd	r25, Y+34	; 0x22
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <HSSD_vCountDown+0x306>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <HSSD_vCountDown+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6b a1       	ldd	r22, Y+35	; 0x23
    27a0:	7c a1       	ldd	r23, Y+36	; 0x24
    27a2:	8d a1       	ldd	r24, Y+37	; 0x25
    27a4:	9e a1       	ldd	r25, Y+38	; 0x26
    27a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9a a3       	std	Y+34, r25	; 0x22
    27b0:	89 a3       	std	Y+33, r24	; 0x21
    27b2:	89 a1       	ldd	r24, Y+33	; 0x21
    27b4:	9a a1       	ldd	r25, Y+34	; 0x22
    27b6:	9e 8f       	std	Y+30, r25	; 0x1e
    27b8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <HSSD_vCountDown+0x34e>
    27c2:	9e 8f       	std	Y+30, r25	; 0x1e
    27c4:	8d 8f       	std	Y+29, r24	; 0x1d

			}
			break;

		case DIO_PORTB:
			for(u8 i=A_u8Time; i >= 0; i--)
    27c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    27c8:	81 50       	subi	r24, 0x01	; 1
    27ca:	8b af       	std	Y+59, r24	; 0x3b
    27cc:	73 cf       	rjmp	.-282    	; 0x26b4 <HSSD_vCountDown+0x244>
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =A_u8Time ; i >= 0; i--)
    27ce:	fe 01       	movw	r30, r28
    27d0:	e8 5b       	subi	r30, 0xB8	; 184
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	8a af       	std	Y+58, r24	; 0x3a
			{
				HSSD_vDisplayNumber(DIO_PORTC, SSD_u8ArrOfNumbers[i]);
    27d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    27da:	28 2f       	mov	r18, r24
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	ce 01       	movw	r24, r28
    27e0:	cd 96       	adiw	r24, 0x3d	; 61
    27e2:	fc 01       	movw	r30, r24
    27e4:	e2 0f       	add	r30, r18
    27e6:	f3 1f       	adc	r31, r19
    27e8:	90 81       	ld	r25, Z
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	69 2f       	mov	r22, r25
    27ee:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    27f2:	fe 01       	movw	r30, r28
    27f4:	e7 5b       	subi	r30, 0xB7	; 183
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	cc 01       	movw	r24, r24
    27fe:	a0 e0       	ldi	r26, 0x00	; 0
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	89 8f       	std	Y+25, r24	; 0x19
    2810:	9a 8f       	std	Y+26, r25	; 0x1a
    2812:	ab 8f       	std	Y+27, r26	; 0x1b
    2814:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	69 8d       	ldd	r22, Y+25	; 0x19
    2818:	7a 8d       	ldd	r23, Y+26	; 0x1a
    281a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    281c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e8       	ldi	r19, 0x80	; 128
    2822:	4b e3       	ldi	r20, 0x3B	; 59
    2824:	55 e4       	ldi	r21, 0x45	; 69
    2826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	8d 8b       	std	Y+21, r24	; 0x15
    2830:	9e 8b       	std	Y+22, r25	; 0x16
    2832:	af 8b       	std	Y+23, r26	; 0x17
    2834:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2836:	6d 89       	ldd	r22, Y+21	; 0x15
    2838:	7e 89       	ldd	r23, Y+22	; 0x16
    283a:	8f 89       	ldd	r24, Y+23	; 0x17
    283c:	98 8d       	ldd	r25, Y+24	; 0x18
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	2c f4       	brge	.+10     	; 0x2858 <HSSD_vCountDown+0x3e8>
		__ticks = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9c 8b       	std	Y+20, r25	; 0x14
    2854:	8b 8b       	std	Y+19, r24	; 0x13
    2856:	3f c0       	rjmp	.+126    	; 0x28d6 <HSSD_vCountDown+0x466>
	else if (__tmp > 65535)
    2858:	6d 89       	ldd	r22, Y+21	; 0x15
    285a:	7e 89       	ldd	r23, Y+22	; 0x16
    285c:	8f 89       	ldd	r24, Y+23	; 0x17
    285e:	98 8d       	ldd	r25, Y+24	; 0x18
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	4f e7       	ldi	r20, 0x7F	; 127
    2866:	57 e4       	ldi	r21, 0x47	; 71
    2868:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    286c:	18 16       	cp	r1, r24
    286e:	4c f5       	brge	.+82     	; 0x28c2 <HSSD_vCountDown+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2870:	69 8d       	ldd	r22, Y+25	; 0x19
    2872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9c 8b       	std	Y+20, r25	; 0x14
    2896:	8b 8b       	std	Y+19, r24	; 0x13
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <HSSD_vCountDown+0x448>
    289a:	8c e2       	ldi	r24, 0x2C	; 44
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	9a 8b       	std	Y+18, r25	; 0x12
    28a0:	89 8b       	std	Y+17, r24	; 0x11
    28a2:	89 89       	ldd	r24, Y+17	; 0x11
    28a4:	9a 89       	ldd	r25, Y+18	; 0x12
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <HSSD_vCountDown+0x436>
    28aa:	9a 8b       	std	Y+18, r25	; 0x12
    28ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	8b 89       	ldd	r24, Y+19	; 0x13
    28b0:	9c 89       	ldd	r25, Y+20	; 0x14
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ba:	9c 89       	ldd	r25, Y+20	; 0x14
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <HSSD_vCountDown+0x42a>
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <HSSD_vCountDown+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	6d 89       	ldd	r22, Y+21	; 0x15
    28c4:	7e 89       	ldd	r23, Y+22	; 0x16
    28c6:	8f 89       	ldd	r24, Y+23	; 0x17
    28c8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9c 8b       	std	Y+20, r25	; 0x14
    28d4:	8b 8b       	std	Y+19, r24	; 0x13
    28d6:	8b 89       	ldd	r24, Y+19	; 0x13
    28d8:	9c 89       	ldd	r25, Y+20	; 0x14
    28da:	98 8b       	std	Y+16, r25	; 0x10
    28dc:	8f 87       	std	Y+15, r24	; 0x0f
    28de:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e0:	98 89       	ldd	r25, Y+16	; 0x10
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <HSSD_vCountDown+0x472>
    28e6:	98 8b       	std	Y+16, r25	; 0x10
    28e8:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(A_u16TimetoWait);
			};
			break;

		case DIO_PORTC:
			for(u8 i =A_u8Time ; i >= 0; i--)
    28ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    28ec:	81 50       	subi	r24, 0x01	; 1
    28ee:	8a af       	std	Y+58, r24	; 0x3a
    28f0:	73 cf       	rjmp	.-282    	; 0x27d8 <HSSD_vCountDown+0x368>
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i=A_u8Time; i >= 0; i--)
    28f2:	fe 01       	movw	r30, r28
    28f4:	e8 5b       	subi	r30, 0xB8	; 184
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 81       	ld	r24, Z
    28fa:	89 af       	std	Y+57, r24	; 0x39
			{
				HSSD_vDisplayNumber(DIO_PORTD, SSD_u8ArrOfNumbers[i]);
    28fc:	89 ad       	ldd	r24, Y+57	; 0x39
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	ce 01       	movw	r24, r28
    2904:	cd 96       	adiw	r24, 0x3d	; 61
    2906:	fc 01       	movw	r30, r24
    2908:	e2 0f       	add	r30, r18
    290a:	f3 1f       	adc	r31, r19
    290c:	90 81       	ld	r25, Z
    290e:	83 e0       	ldi	r24, 0x03	; 3
    2910:	69 2f       	mov	r22, r25
    2912:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <HSSD_vDisplayNumber>
				_delay_ms(A_u16TimetoWait);
    2916:	fe 01       	movw	r30, r28
    2918:	e7 5b       	subi	r30, 0xB7	; 183
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	cc 01       	movw	r24, r24
    2922:	a0 e0       	ldi	r26, 0x00	; 0
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8b 87       	std	Y+11, r24	; 0x0b
    2934:	9c 87       	std	Y+12, r25	; 0x0c
    2936:	ad 87       	std	Y+13, r26	; 0x0d
    2938:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293a:	6b 85       	ldd	r22, Y+11	; 0x0b
    293c:	7c 85       	ldd	r23, Y+12	; 0x0c
    293e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2940:	9e 85       	ldd	r25, Y+14	; 0x0e
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e8       	ldi	r19, 0x80	; 128
    2946:	4b e3       	ldi	r20, 0x3B	; 59
    2948:	55 e4       	ldi	r21, 0x45	; 69
    294a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	8f 83       	std	Y+7, r24	; 0x07
    2954:	98 87       	std	Y+8, r25	; 0x08
    2956:	a9 87       	std	Y+9, r26	; 0x09
    2958:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    295a:	6f 81       	ldd	r22, Y+7	; 0x07
    295c:	78 85       	ldd	r23, Y+8	; 0x08
    295e:	89 85       	ldd	r24, Y+9	; 0x09
    2960:	9a 85       	ldd	r25, Y+10	; 0x0a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	2c f4       	brge	.+10     	; 0x297c <HSSD_vCountDown+0x50c>
		__ticks = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	3f c0       	rjmp	.+126    	; 0x29fa <HSSD_vCountDown+0x58a>
	else if (__tmp > 65535)
    297c:	6f 81       	ldd	r22, Y+7	; 0x07
    297e:	78 85       	ldd	r23, Y+8	; 0x08
    2980:	89 85       	ldd	r24, Y+9	; 0x09
    2982:	9a 85       	ldd	r25, Y+10	; 0x0a
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	57 e4       	ldi	r21, 0x47	; 71
    298c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2990:	18 16       	cp	r1, r24
    2992:	4c f5       	brge	.+82     	; 0x29e6 <HSSD_vCountDown+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	6b 85       	ldd	r22, Y+11	; 0x0b
    2996:	7c 85       	ldd	r23, Y+12	; 0x0c
    2998:	8d 85       	ldd	r24, Y+13	; 0x0d
    299a:	9e 85       	ldd	r25, Y+14	; 0x0e
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e2       	ldi	r20, 0x20	; 32
    29a2:	51 e4       	ldi	r21, 0x41	; 65
    29a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
    29bc:	0f c0       	rjmp	.+30     	; 0x29dc <HSSD_vCountDown+0x56c>
    29be:	8c e2       	ldi	r24, 0x2C	; 44
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	8b 83       	std	Y+3, r24	; 0x03
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <HSSD_vCountDown+0x55a>
    29ce:	9c 83       	std	Y+4, r25	; 0x04
    29d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	69 f7       	brne	.-38     	; 0x29be <HSSD_vCountDown+0x54e>
    29e4:	14 c0       	rjmp	.+40     	; 0x2a0e <HSSD_vCountDown+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e6:	6f 81       	ldd	r22, Y+7	; 0x07
    29e8:	78 85       	ldd	r23, Y+8	; 0x08
    29ea:	89 85       	ldd	r24, Y+9	; 0x09
    29ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <HSSD_vCountDown+0x596>
    2a0a:	9a 83       	std	Y+2, r25	; 0x02
    2a0c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(A_u16TimetoWait);
			}
			break;

		case DIO_PORTD:
			for(u8 i=A_u8Time; i >= 0; i--)
    2a0e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a10:	81 50       	subi	r24, 0x01	; 1
    2a12:	89 af       	std	Y+57, r24	; 0x39
    2a14:	73 cf       	rjmp	.-282    	; 0x28fc <HSSD_vCountDown+0x48c>
				_delay_ms(A_u16TimetoWait);
			}
			break;
		}
	}
}
    2a16:	cf 5a       	subi	r28, 0xAF	; 175
    2a18:	df 4f       	sbci	r29, 0xFF	; 255
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <HLCD_vSendCommand>:
#include "LCD_Cfg.h"

#include <util/delay.h>
#define F_CPU 12000000UL
void HLCD_vSendCommand(u8 A_u8Command)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	2f 97       	sbiw	r28, 0x0f	; 15
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Command RS -> 0 , RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_LOW);
    2a40:	82 e0       	ldi	r24, 0x02	; 2
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    2a4a:	82 e0       	ldi	r24, 0x02	; 2
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>

	// Send Commnad
	MDIO_vSetPortVal(LCD_DATA_PORT , A_u8Command);
    2a54:	83 e0       	ldi	r24, 0x03	; 3
    2a56:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a58:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <MDIO_vSetPortVal>

	// Set Pulse On Enable Pin
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_E_PIN , DIO_HIGH);
    2a5c:	82 e0       	ldi	r24, 0x02	; 2
    2a5e:	62 e0       	ldi	r22, 0x02	; 2
    2a60:	41 e0       	ldi	r20, 0x01	; 1
    2a62:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a0 e0       	ldi	r26, 0x00	; 0
    2a6c:	b0 e4       	ldi	r27, 0x40	; 64
    2a6e:	8b 87       	std	Y+11, r24	; 0x0b
    2a70:	9c 87       	std	Y+12, r25	; 0x0c
    2a72:	ad 87       	std	Y+13, r26	; 0x0d
    2a74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e8       	ldi	r19, 0x80	; 128
    2a82:	4b e3       	ldi	r20, 0x3B	; 59
    2a84:	55 e4       	ldi	r21, 0x45	; 69
    2a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	8f 83       	std	Y+7, r24	; 0x07
    2a90:	98 87       	std	Y+8, r25	; 0x08
    2a92:	a9 87       	std	Y+9, r26	; 0x09
    2a94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a96:	6f 81       	ldd	r22, Y+7	; 0x07
    2a98:	78 85       	ldd	r23, Y+8	; 0x08
    2a9a:	89 85       	ldd	r24, Y+9	; 0x09
    2a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e8       	ldi	r20, 0x80	; 128
    2aa4:	5f e3       	ldi	r21, 0x3F	; 63
    2aa6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2aaa:	88 23       	and	r24, r24
    2aac:	2c f4       	brge	.+10     	; 0x2ab8 <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9e 83       	std	Y+6, r25	; 0x06
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
    2ab6:	3f c0       	rjmp	.+126    	; 0x2b36 <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    2ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aba:	78 85       	ldd	r23, Y+8	; 0x08
    2abc:	89 85       	ldd	r24, Y+9	; 0x09
    2abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	3f ef       	ldi	r19, 0xFF	; 255
    2ac4:	4f e7       	ldi	r20, 0x7F	; 127
    2ac6:	57 e4       	ldi	r21, 0x47	; 71
    2ac8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2acc:	18 16       	cp	r1, r24
    2ace:	4c f5       	brge	.+82     	; 0x2b22 <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e2       	ldi	r20, 0x20	; 32
    2ade:	51 e4       	ldi	r21, 0x41	; 65
    2ae0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	9e 83       	std	Y+6, r25	; 0x06
    2af6:	8d 83       	std	Y+5, r24	; 0x05
    2af8:	0f c0       	rjmp	.+30     	; 0x2b18 <HLCD_vSendCommand+0xee>
    2afa:	8c e2       	ldi	r24, 0x2C	; 44
    2afc:	91 e0       	ldi	r25, 0x01	; 1
    2afe:	9c 83       	std	Y+4, r25	; 0x04
    2b00:	8b 83       	std	Y+3, r24	; 0x03
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <HLCD_vSendCommand+0xdc>
    2b0a:	9c 83       	std	Y+4, r25	; 0x04
    2b0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	69 f7       	brne	.-38     	; 0x2afa <HLCD_vSendCommand+0xd0>
    2b20:	14 c0       	rjmp	.+40     	; 0x2b4a <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b22:	6f 81       	ldd	r22, Y+7	; 0x07
    2b24:	78 85       	ldd	r23, Y+8	; 0x08
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	9e 83       	std	Y+6, r25	; 0x06
    2b34:	8d 83       	std	Y+5, r24	; 0x05
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	9a 81       	ldd	r25, Y+2	; 0x02
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <HLCD_vSendCommand+0x118>
    2b46:	9a 83       	std	Y+2, r25	; 0x02
    2b48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_E_PIN , DIO_LOW);
    2b4a:	82 e0       	ldi	r24, 0x02	; 2
    2b4c:	62 e0       	ldi	r22, 0x02	; 2
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>
}
    2b54:	2f 96       	adiw	r28, 0x0f	; 15
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <HLCD_vSendData>:

void HLCD_vSendData(u8 A_u8Data)
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	2f 97       	sbiw	r28, 0x0f	; 15
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Data RS -> 1 , RW -> 0
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RS_PIN , DIO_HIGH);
    2b7c:	82 e0       	ldi	r24, 0x02	; 2
    2b7e:	60 e0       	ldi	r22, 0x00	; 0
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_RW_PIN , DIO_LOW);
    2b86:	82 e0       	ldi	r24, 0x02	; 2
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>

	// Send Commnad
	MDIO_vSetPortVal(LCD_DATA_PORT , A_u8Data);
    2b90:	83 e0       	ldi	r24, 0x03	; 3
    2b92:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b94:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <MDIO_vSetPortVal>

	// Set Pulse On Enable Pin
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_E_PIN , DIO_HIGH);
    2b98:	82 e0       	ldi	r24, 0x02	; 2
    2b9a:	62 e0       	ldi	r22, 0x02	; 2
    2b9c:	41 e0       	ldi	r20, 0x01	; 1
    2b9e:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	a0 e0       	ldi	r26, 0x00	; 0
    2ba8:	b0 e4       	ldi	r27, 0x40	; 64
    2baa:	8b 87       	std	Y+11, r24	; 0x0b
    2bac:	9c 87       	std	Y+12, r25	; 0x0c
    2bae:	ad 87       	std	Y+13, r26	; 0x0d
    2bb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e8       	ldi	r19, 0x80	; 128
    2bbe:	4b e3       	ldi	r20, 0x3B	; 59
    2bc0:	55 e4       	ldi	r21, 0x45	; 69
    2bc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	8f 83       	std	Y+7, r24	; 0x07
    2bcc:	98 87       	std	Y+8, r25	; 0x08
    2bce:	a9 87       	std	Y+9, r26	; 0x09
    2bd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd4:	78 85       	ldd	r23, Y+8	; 0x08
    2bd6:	89 85       	ldd	r24, Y+9	; 0x09
    2bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e8       	ldi	r20, 0x80	; 128
    2be0:	5f e3       	ldi	r21, 0x3F	; 63
    2be2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2be6:	88 23       	and	r24, r24
    2be8:	2c f4       	brge	.+10     	; 0x2bf4 <HLCD_vSendData+0x8e>
		__ticks = 1;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
    2bf2:	3f c0       	rjmp	.+126    	; 0x2c72 <HLCD_vSendData+0x10c>
	else if (__tmp > 65535)
    2bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf6:	78 85       	ldd	r23, Y+8	; 0x08
    2bf8:	89 85       	ldd	r24, Y+9	; 0x09
    2bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	4f e7       	ldi	r20, 0x7F	; 127
    2c02:	57 e4       	ldi	r21, 0x47	; 71
    2c04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c08:	18 16       	cp	r1, r24
    2c0a:	4c f5       	brge	.+82     	; 0x2c5e <HLCD_vSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e2       	ldi	r20, 0x20	; 32
    2c1a:	51 e4       	ldi	r21, 0x41	; 65
    2c1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	9e 83       	std	Y+6, r25	; 0x06
    2c32:	8d 83       	std	Y+5, r24	; 0x05
    2c34:	0f c0       	rjmp	.+30     	; 0x2c54 <HLCD_vSendData+0xee>
    2c36:	8c e2       	ldi	r24, 0x2C	; 44
    2c38:	91 e0       	ldi	r25, 0x01	; 1
    2c3a:	9c 83       	std	Y+4, r25	; 0x04
    2c3c:	8b 83       	std	Y+3, r24	; 0x03
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	9c 81       	ldd	r25, Y+4	; 0x04
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <HLCD_vSendData+0xdc>
    2c46:	9c 83       	std	Y+4, r25	; 0x04
    2c48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	9e 83       	std	Y+6, r25	; 0x06
    2c52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	69 f7       	brne	.-38     	; 0x2c36 <HLCD_vSendData+0xd0>
    2c5c:	14 c0       	rjmp	.+40     	; 0x2c86 <HLCD_vSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c60:	78 85       	ldd	r23, Y+8	; 0x08
    2c62:	89 85       	ldd	r24, Y+9	; 0x09
    2c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	9e 81       	ldd	r25, Y+6	; 0x06
    2c76:	9a 83       	std	Y+2, r25	; 0x02
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <HLCD_vSendData+0x118>
    2c82:	9a 83       	std	Y+2, r25	; 0x02
    2c84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_vSetPinVal(LCD_CTRL_PORT , LCD_E_PIN , DIO_LOW);
    2c86:	82 e0       	ldi	r24, 0x02	; 2
    2c88:	62 e0       	ldi	r22, 0x02	; 2
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>
}
    2c90:	2f 96       	adiw	r28, 0x0f	; 15
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <HLCD_vInit>:

void HLCD_vInit(void)
{
    2ca2:	0f 93       	push	r16
    2ca4:	1f 93       	push	r17
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	c6 54       	subi	r28, 0x46	; 70
    2cb0:	d0 40       	sbci	r29, 0x00	; 0
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPortDir(LCD_DATA_PORT,0xFF);
    2cbc:	83 e0       	ldi	r24, 0x03	; 3
    2cbe:	6f ef       	ldi	r22, 0xFF	; 255
    2cc0:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MDIO_vSetPortDir>
	MDIO_vSetPortDir(LCD_CTRL_PORT,0x07);
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	67 e0       	ldi	r22, 0x07	; 7
    2cc8:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MDIO_vSetPortDir>
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ed 5b       	subi	r30, 0xBD	; 189
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	a0 ef       	ldi	r26, 0xF0	; 240
    2cd8:	b1 e4       	ldi	r27, 0x41	; 65
    2cda:	80 83       	st	Z, r24
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	a2 83       	std	Z+2, r26	; 0x02
    2ce0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce2:	8e 01       	movw	r16, r28
    2ce4:	01 5c       	subi	r16, 0xC1	; 193
    2ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ed 5b       	subi	r30, 0xBD	; 189
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e8       	ldi	r19, 0x80	; 128
    2cfa:	4b e3       	ldi	r20, 0x3B	; 59
    2cfc:	55 e4       	ldi	r21, 0x45	; 69
    2cfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	f8 01       	movw	r30, r16
    2d08:	80 83       	st	Z, r24
    2d0a:	91 83       	std	Z+1, r25	; 0x01
    2d0c:	a2 83       	std	Z+2, r26	; 0x02
    2d0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d10:	fe 01       	movw	r30, r28
    2d12:	ff 96       	adiw	r30, 0x3f	; 63
    2d14:	60 81       	ld	r22, Z
    2d16:	71 81       	ldd	r23, Z+1	; 0x01
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	93 81       	ldd	r25, Z+3	; 0x03
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e8       	ldi	r20, 0x80	; 128
    2d22:	5f e3       	ldi	r21, 0x3F	; 63
    2d24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d28:	88 23       	and	r24, r24
    2d2a:	2c f4       	brge	.+10     	; 0x2d36 <HLCD_vInit+0x94>
		__ticks = 1;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	9e af       	std	Y+62, r25	; 0x3e
    2d32:	8d af       	std	Y+61, r24	; 0x3d
    2d34:	46 c0       	rjmp	.+140    	; 0x2dc2 <HLCD_vInit+0x120>
	else if (__tmp > 65535)
    2d36:	fe 01       	movw	r30, r28
    2d38:	ff 96       	adiw	r30, 0x3f	; 63
    2d3a:	60 81       	ld	r22, Z
    2d3c:	71 81       	ldd	r23, Z+1	; 0x01
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	93 81       	ldd	r25, Z+3	; 0x03
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	3f ef       	ldi	r19, 0xFF	; 255
    2d46:	4f e7       	ldi	r20, 0x7F	; 127
    2d48:	57 e4       	ldi	r21, 0x47	; 71
    2d4a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d4e:	18 16       	cp	r1, r24
    2d50:	64 f5       	brge	.+88     	; 0x2daa <HLCD_vInit+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d52:	fe 01       	movw	r30, r28
    2d54:	ed 5b       	subi	r30, 0xBD	; 189
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	60 81       	ld	r22, Z
    2d5a:	71 81       	ldd	r23, Z+1	; 0x01
    2d5c:	82 81       	ldd	r24, Z+2	; 0x02
    2d5e:	93 81       	ldd	r25, Z+3	; 0x03
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e2       	ldi	r20, 0x20	; 32
    2d66:	51 e4       	ldi	r21, 0x41	; 65
    2d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9e af       	std	Y+62, r25	; 0x3e
    2d7e:	8d af       	std	Y+61, r24	; 0x3d
    2d80:	0f c0       	rjmp	.+30     	; 0x2da0 <HLCD_vInit+0xfe>
    2d82:	8c e2       	ldi	r24, 0x2C	; 44
    2d84:	91 e0       	ldi	r25, 0x01	; 1
    2d86:	9c af       	std	Y+60, r25	; 0x3c
    2d88:	8b af       	std	Y+59, r24	; 0x3b
    2d8a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d8c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <HLCD_vInit+0xec>
    2d92:	9c af       	std	Y+60, r25	; 0x3c
    2d94:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d96:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d98:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	9e af       	std	Y+62, r25	; 0x3e
    2d9e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2da2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	69 f7       	brne	.-38     	; 0x2d82 <HLCD_vInit+0xe0>
    2da8:	16 c0       	rjmp	.+44     	; 0x2dd6 <HLCD_vInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2daa:	fe 01       	movw	r30, r28
    2dac:	ff 96       	adiw	r30, 0x3f	; 63
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9e af       	std	Y+62, r25	; 0x3e
    2dc0:	8d af       	std	Y+61, r24	; 0x3d
    2dc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dc6:	9a af       	std	Y+58, r25	; 0x3a
    2dc8:	89 af       	std	Y+57, r24	; 0x39
    2dca:	89 ad       	ldd	r24, Y+57	; 0x39
    2dcc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <HLCD_vInit+0x12c>
    2dd2:	9a af       	std	Y+58, r25	; 0x3a
    2dd4:	89 af       	std	Y+57, r24	; 0x39

	// wait for 30ms after VDD rises to 4.5V
	_delay_ms(30);

	// Function Set
	HLCD_vSendCommand(FUNCTION_SET);
    2dd6:	88 e3       	ldi	r24, 0x38	; 56
    2dd8:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <HLCD_vSendCommand>
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	a0 e8       	ldi	r26, 0x80	; 128
    2de2:	bf e3       	ldi	r27, 0x3F	; 63
    2de4:	8d ab       	std	Y+53, r24	; 0x35
    2de6:	9e ab       	std	Y+54, r25	; 0x36
    2de8:	af ab       	std	Y+55, r26	; 0x37
    2dea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dec:	6d a9       	ldd	r22, Y+53	; 0x35
    2dee:	7e a9       	ldd	r23, Y+54	; 0x36
    2df0:	8f a9       	ldd	r24, Y+55	; 0x37
    2df2:	98 ad       	ldd	r25, Y+56	; 0x38
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e8       	ldi	r19, 0x80	; 128
    2df8:	4b e3       	ldi	r20, 0x3B	; 59
    2dfa:	55 e4       	ldi	r21, 0x45	; 69
    2dfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	89 ab       	std	Y+49, r24	; 0x31
    2e06:	9a ab       	std	Y+50, r25	; 0x32
    2e08:	ab ab       	std	Y+51, r26	; 0x33
    2e0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e0c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e0e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e10:	8b a9       	ldd	r24, Y+51	; 0x33
    2e12:	9c a9       	ldd	r25, Y+52	; 0x34
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	5f e3       	ldi	r21, 0x3F	; 63
    2e1c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e20:	88 23       	and	r24, r24
    2e22:	2c f4       	brge	.+10     	; 0x2e2e <HLCD_vInit+0x18c>
		__ticks = 1;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	98 ab       	std	Y+48, r25	; 0x30
    2e2a:	8f a7       	std	Y+47, r24	; 0x2f
    2e2c:	3f c0       	rjmp	.+126    	; 0x2eac <HLCD_vInit+0x20a>
	else if (__tmp > 65535)
    2e2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e30:	7a a9       	ldd	r23, Y+50	; 0x32
    2e32:	8b a9       	ldd	r24, Y+51	; 0x33
    2e34:	9c a9       	ldd	r25, Y+52	; 0x34
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	57 e4       	ldi	r21, 0x47	; 71
    2e3e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e42:	18 16       	cp	r1, r24
    2e44:	4c f5       	brge	.+82     	; 0x2e98 <HLCD_vInit+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e46:	6d a9       	ldd	r22, Y+53	; 0x35
    2e48:	7e a9       	ldd	r23, Y+54	; 0x36
    2e4a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e4c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e2       	ldi	r20, 0x20	; 32
    2e54:	51 e4       	ldi	r21, 0x41	; 65
    2e56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	98 ab       	std	Y+48, r25	; 0x30
    2e6c:	8f a7       	std	Y+47, r24	; 0x2f
    2e6e:	0f c0       	rjmp	.+30     	; 0x2e8e <HLCD_vInit+0x1ec>
    2e70:	8c e2       	ldi	r24, 0x2C	; 44
    2e72:	91 e0       	ldi	r25, 0x01	; 1
    2e74:	9e a7       	std	Y+46, r25	; 0x2e
    2e76:	8d a7       	std	Y+45, r24	; 0x2d
    2e78:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <HLCD_vInit+0x1da>
    2e80:	9e a7       	std	Y+46, r25	; 0x2e
    2e82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e84:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e86:	98 a9       	ldd	r25, Y+48	; 0x30
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	98 ab       	std	Y+48, r25	; 0x30
    2e8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e90:	98 a9       	ldd	r25, Y+48	; 0x30
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <HLCD_vInit+0x1ce>
    2e96:	14 c0       	rjmp	.+40     	; 0x2ec0 <HLCD_vInit+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	69 a9       	ldd	r22, Y+49	; 0x31
    2e9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	98 ab       	std	Y+48, r25	; 0x30
    2eaa:	8f a7       	std	Y+47, r24	; 0x2f
    2eac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eae:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb0:	9c a7       	std	Y+44, r25	; 0x2c
    2eb2:	8b a7       	std	Y+43, r24	; 0x2b
    2eb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <HLCD_vInit+0x216>
    2ebc:	9c a7       	std	Y+44, r25	; 0x2c
    2ebe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Display On/Off
	HLCD_vSendCommand(DISPLAY_ON_OFF_CONTROL);
    2ec0:	8f e0       	ldi	r24, 0x0F	; 15
    2ec2:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <HLCD_vSendCommand>
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a0 e8       	ldi	r26, 0x80	; 128
    2ecc:	bf e3       	ldi	r27, 0x3F	; 63
    2ece:	8f a3       	std	Y+39, r24	; 0x27
    2ed0:	98 a7       	std	Y+40, r25	; 0x28
    2ed2:	a9 a7       	std	Y+41, r26	; 0x29
    2ed4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ed8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eda:	89 a5       	ldd	r24, Y+41	; 0x29
    2edc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e8       	ldi	r19, 0x80	; 128
    2ee2:	4b e3       	ldi	r20, 0x3B	; 59
    2ee4:	55 e4       	ldi	r21, 0x45	; 69
    2ee6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	8b a3       	std	Y+35, r24	; 0x23
    2ef0:	9c a3       	std	Y+36, r25	; 0x24
    2ef2:	ad a3       	std	Y+37, r26	; 0x25
    2ef4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ef6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef8:	7c a1       	ldd	r23, Y+36	; 0x24
    2efa:	8d a1       	ldd	r24, Y+37	; 0x25
    2efc:	9e a1       	ldd	r25, Y+38	; 0x26
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	40 e8       	ldi	r20, 0x80	; 128
    2f04:	5f e3       	ldi	r21, 0x3F	; 63
    2f06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f0a:	88 23       	and	r24, r24
    2f0c:	2c f4       	brge	.+10     	; 0x2f18 <HLCD_vInit+0x276>
		__ticks = 1;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9a a3       	std	Y+34, r25	; 0x22
    2f14:	89 a3       	std	Y+33, r24	; 0x21
    2f16:	3f c0       	rjmp	.+126    	; 0x2f96 <HLCD_vInit+0x2f4>
	else if (__tmp > 65535)
    2f18:	6b a1       	ldd	r22, Y+35	; 0x23
    2f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	3f ef       	ldi	r19, 0xFF	; 255
    2f24:	4f e7       	ldi	r20, 0x7F	; 127
    2f26:	57 e4       	ldi	r21, 0x47	; 71
    2f28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f2c:	18 16       	cp	r1, r24
    2f2e:	4c f5       	brge	.+82     	; 0x2f82 <HLCD_vInit+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f30:	6f a1       	ldd	r22, Y+39	; 0x27
    2f32:	78 a5       	ldd	r23, Y+40	; 0x28
    2f34:	89 a5       	ldd	r24, Y+41	; 0x29
    2f36:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e2       	ldi	r20, 0x20	; 32
    2f3e:	51 e4       	ldi	r21, 0x41	; 65
    2f40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	9a a3       	std	Y+34, r25	; 0x22
    2f56:	89 a3       	std	Y+33, r24	; 0x21
    2f58:	0f c0       	rjmp	.+30     	; 0x2f78 <HLCD_vInit+0x2d6>
    2f5a:	8c e2       	ldi	r24, 0x2C	; 44
    2f5c:	91 e0       	ldi	r25, 0x01	; 1
    2f5e:	98 a3       	std	Y+32, r25	; 0x20
    2f60:	8f 8f       	std	Y+31, r24	; 0x1f
    2f62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f64:	98 a1       	ldd	r25, Y+32	; 0x20
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <HLCD_vInit+0x2c4>
    2f6a:	98 a3       	std	Y+32, r25	; 0x20
    2f6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f70:	9a a1       	ldd	r25, Y+34	; 0x22
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	9a a3       	std	Y+34, r25	; 0x22
    2f76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f78:	89 a1       	ldd	r24, Y+33	; 0x21
    2f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	69 f7       	brne	.-38     	; 0x2f5a <HLCD_vInit+0x2b8>
    2f80:	14 c0       	rjmp	.+40     	; 0x2faa <HLCD_vInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f82:	6b a1       	ldd	r22, Y+35	; 0x23
    2f84:	7c a1       	ldd	r23, Y+36	; 0x24
    2f86:	8d a1       	ldd	r24, Y+37	; 0x25
    2f88:	9e a1       	ldd	r25, Y+38	; 0x26
    2f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	9a a3       	std	Y+34, r25	; 0x22
    2f94:	89 a3       	std	Y+33, r24	; 0x21
    2f96:	89 a1       	ldd	r24, Y+33	; 0x21
    2f98:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f9c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	f1 f7       	brne	.-4      	; 0x2fa2 <HLCD_vInit+0x300>
    2fa6:	9e 8f       	std	Y+30, r25	; 0x1e
    2fa8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Display Clear
	HLCD_vSendCommand(DISPLAY_CLEAR);
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <HLCD_vSendCommand>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	a0 e0       	ldi	r26, 0x00	; 0
    2fb6:	b0 e4       	ldi	r27, 0x40	; 64
    2fb8:	89 8f       	std	Y+25, r24	; 0x19
    2fba:	9a 8f       	std	Y+26, r25	; 0x1a
    2fbc:	ab 8f       	std	Y+27, r26	; 0x1b
    2fbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e8       	ldi	r19, 0x80	; 128
    2fcc:	4b e3       	ldi	r20, 0x3B	; 59
    2fce:	55 e4       	ldi	r21, 0x45	; 69
    2fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	8d 8b       	std	Y+21, r24	; 0x15
    2fda:	9e 8b       	std	Y+22, r25	; 0x16
    2fdc:	af 8b       	std	Y+23, r26	; 0x17
    2fde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e8       	ldi	r20, 0x80	; 128
    2fee:	5f e3       	ldi	r21, 0x3F	; 63
    2ff0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ff4:	88 23       	and	r24, r24
    2ff6:	2c f4       	brge	.+10     	; 0x3002 <HLCD_vInit+0x360>
		__ticks = 1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	9c 8b       	std	Y+20, r25	; 0x14
    2ffe:	8b 8b       	std	Y+19, r24	; 0x13
    3000:	3f c0       	rjmp	.+126    	; 0x3080 <HLCD_vInit+0x3de>
	else if (__tmp > 65535)
    3002:	6d 89       	ldd	r22, Y+21	; 0x15
    3004:	7e 89       	ldd	r23, Y+22	; 0x16
    3006:	8f 89       	ldd	r24, Y+23	; 0x17
    3008:	98 8d       	ldd	r25, Y+24	; 0x18
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	3f ef       	ldi	r19, 0xFF	; 255
    300e:	4f e7       	ldi	r20, 0x7F	; 127
    3010:	57 e4       	ldi	r21, 0x47	; 71
    3012:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3016:	18 16       	cp	r1, r24
    3018:	4c f5       	brge	.+82     	; 0x306c <HLCD_vInit+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301a:	69 8d       	ldd	r22, Y+25	; 0x19
    301c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    301e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3020:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e2       	ldi	r20, 0x20	; 32
    3028:	51 e4       	ldi	r21, 0x41	; 65
    302a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	bc 01       	movw	r22, r24
    3034:	cd 01       	movw	r24, r26
    3036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9c 8b       	std	Y+20, r25	; 0x14
    3040:	8b 8b       	std	Y+19, r24	; 0x13
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <HLCD_vInit+0x3c0>
    3044:	8c e2       	ldi	r24, 0x2C	; 44
    3046:	91 e0       	ldi	r25, 0x01	; 1
    3048:	9a 8b       	std	Y+18, r25	; 0x12
    304a:	89 8b       	std	Y+17, r24	; 0x11
    304c:	89 89       	ldd	r24, Y+17	; 0x11
    304e:	9a 89       	ldd	r25, Y+18	; 0x12
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <HLCD_vInit+0x3ae>
    3054:	9a 8b       	std	Y+18, r25	; 0x12
    3056:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3058:	8b 89       	ldd	r24, Y+19	; 0x13
    305a:	9c 89       	ldd	r25, Y+20	; 0x14
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	9c 8b       	std	Y+20, r25	; 0x14
    3060:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3062:	8b 89       	ldd	r24, Y+19	; 0x13
    3064:	9c 89       	ldd	r25, Y+20	; 0x14
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	69 f7       	brne	.-38     	; 0x3044 <HLCD_vInit+0x3a2>
    306a:	14 c0       	rjmp	.+40     	; 0x3094 <HLCD_vInit+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306c:	6d 89       	ldd	r22, Y+21	; 0x15
    306e:	7e 89       	ldd	r23, Y+22	; 0x16
    3070:	8f 89       	ldd	r24, Y+23	; 0x17
    3072:	98 8d       	ldd	r25, Y+24	; 0x18
    3074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	9c 8b       	std	Y+20, r25	; 0x14
    307e:	8b 8b       	std	Y+19, r24	; 0x13
    3080:	8b 89       	ldd	r24, Y+19	; 0x13
    3082:	9c 89       	ldd	r25, Y+20	; 0x14
    3084:	98 8b       	std	Y+16, r25	; 0x10
    3086:	8f 87       	std	Y+15, r24	; 0x0f
    3088:	8f 85       	ldd	r24, Y+15	; 0x0f
    308a:	98 89       	ldd	r25, Y+16	; 0x10
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <HLCD_vInit+0x3ea>
    3090:	98 8b       	std	Y+16, r25	; 0x10
    3092:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);


	// Entry Mode Set
	HLCD_vSendCommand(ENTRY_MODE_SET);
    3094:	86 e0       	ldi	r24, 0x06	; 6
    3096:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <HLCD_vSendCommand>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	a0 e8       	ldi	r26, 0x80	; 128
    30a0:	bf e3       	ldi	r27, 0x3F	; 63
    30a2:	8b 87       	std	Y+11, r24	; 0x0b
    30a4:	9c 87       	std	Y+12, r25	; 0x0c
    30a6:	ad 87       	std	Y+13, r26	; 0x0d
    30a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e8       	ldi	r19, 0x80	; 128
    30b6:	4b e3       	ldi	r20, 0x3B	; 59
    30b8:	55 e4       	ldi	r21, 0x45	; 69
    30ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8f 83       	std	Y+7, r24	; 0x07
    30c4:	98 87       	std	Y+8, r25	; 0x08
    30c6:	a9 87       	std	Y+9, r26	; 0x09
    30c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e8       	ldi	r20, 0x80	; 128
    30d8:	5f e3       	ldi	r21, 0x3F	; 63
    30da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30de:	88 23       	and	r24, r24
    30e0:	2c f4       	brge	.+10     	; 0x30ec <HLCD_vInit+0x44a>
		__ticks = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
    30ea:	3f c0       	rjmp	.+126    	; 0x316a <HLCD_vInit+0x4c8>
	else if (__tmp > 65535)
    30ec:	6f 81       	ldd	r22, Y+7	; 0x07
    30ee:	78 85       	ldd	r23, Y+8	; 0x08
    30f0:	89 85       	ldd	r24, Y+9	; 0x09
    30f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	3f ef       	ldi	r19, 0xFF	; 255
    30f8:	4f e7       	ldi	r20, 0x7F	; 127
    30fa:	57 e4       	ldi	r21, 0x47	; 71
    30fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3100:	18 16       	cp	r1, r24
    3102:	4c f5       	brge	.+82     	; 0x3156 <HLCD_vInit+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3104:	6b 85       	ldd	r22, Y+11	; 0x0b
    3106:	7c 85       	ldd	r23, Y+12	; 0x0c
    3108:	8d 85       	ldd	r24, Y+13	; 0x0d
    310a:	9e 85       	ldd	r25, Y+14	; 0x0e
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e2       	ldi	r20, 0x20	; 32
    3112:	51 e4       	ldi	r21, 0x41	; 65
    3114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	9e 83       	std	Y+6, r25	; 0x06
    312a:	8d 83       	std	Y+5, r24	; 0x05
    312c:	0f c0       	rjmp	.+30     	; 0x314c <HLCD_vInit+0x4aa>
    312e:	8c e2       	ldi	r24, 0x2C	; 44
    3130:	91 e0       	ldi	r25, 0x01	; 1
    3132:	9c 83       	std	Y+4, r25	; 0x04
    3134:	8b 83       	std	Y+3, r24	; 0x03
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	9c 81       	ldd	r25, Y+4	; 0x04
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <HLCD_vInit+0x498>
    313e:	9c 83       	std	Y+4, r25	; 0x04
    3140:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	9e 81       	ldd	r25, Y+6	; 0x06
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	9e 83       	std	Y+6, r25	; 0x06
    314a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314c:	8d 81       	ldd	r24, Y+5	; 0x05
    314e:	9e 81       	ldd	r25, Y+6	; 0x06
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	69 f7       	brne	.-38     	; 0x312e <HLCD_vInit+0x48c>
    3154:	14 c0       	rjmp	.+40     	; 0x317e <HLCD_vInit+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3156:	6f 81       	ldd	r22, Y+7	; 0x07
    3158:	78 85       	ldd	r23, Y+8	; 0x08
    315a:	89 85       	ldd	r24, Y+9	; 0x09
    315c:	9a 85       	ldd	r25, Y+10	; 0x0a
    315e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	9e 83       	std	Y+6, r25	; 0x06
    3168:	8d 83       	std	Y+5, r24	; 0x05
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	9a 83       	std	Y+2, r25	; 0x02
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	f1 f7       	brne	.-4      	; 0x3176 <HLCD_vInit+0x4d4>
    317a:	9a 83       	std	Y+2, r25	; 0x02
    317c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    317e:	ca 5b       	subi	r28, 0xBA	; 186
    3180:	df 4f       	sbci	r29, 0xFF	; 255
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <HLCD_vClearDisplay>:

void HLCD_vClearDisplay(void)
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	2e 97       	sbiw	r28, 0x0e	; 14
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
	HLCD_vSendCommand(DISPLAY_CLEAR);
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <HLCD_vSendCommand>
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	a0 e4       	ldi	r26, 0x40	; 64
    31b6:	b0 e4       	ldi	r27, 0x40	; 64
    31b8:	8b 87       	std	Y+11, r24	; 0x0b
    31ba:	9c 87       	std	Y+12, r25	; 0x0c
    31bc:	ad 87       	std	Y+13, r26	; 0x0d
    31be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e8       	ldi	r19, 0x80	; 128
    31cc:	4b e3       	ldi	r20, 0x3B	; 59
    31ce:	55 e4       	ldi	r21, 0x45	; 69
    31d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	8f 83       	std	Y+7, r24	; 0x07
    31da:	98 87       	std	Y+8, r25	; 0x08
    31dc:	a9 87       	std	Y+9, r26	; 0x09
    31de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31e0:	6f 81       	ldd	r22, Y+7	; 0x07
    31e2:	78 85       	ldd	r23, Y+8	; 0x08
    31e4:	89 85       	ldd	r24, Y+9	; 0x09
    31e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e8       	ldi	r20, 0x80	; 128
    31ee:	5f e3       	ldi	r21, 0x3F	; 63
    31f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31f4:	88 23       	and	r24, r24
    31f6:	2c f4       	brge	.+10     	; 0x3202 <HLCD_vClearDisplay+0x6c>
		__ticks = 1;
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	9e 83       	std	Y+6, r25	; 0x06
    31fe:	8d 83       	std	Y+5, r24	; 0x05
    3200:	3f c0       	rjmp	.+126    	; 0x3280 <HLCD_vClearDisplay+0xea>
	else if (__tmp > 65535)
    3202:	6f 81       	ldd	r22, Y+7	; 0x07
    3204:	78 85       	ldd	r23, Y+8	; 0x08
    3206:	89 85       	ldd	r24, Y+9	; 0x09
    3208:	9a 85       	ldd	r25, Y+10	; 0x0a
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	3f ef       	ldi	r19, 0xFF	; 255
    320e:	4f e7       	ldi	r20, 0x7F	; 127
    3210:	57 e4       	ldi	r21, 0x47	; 71
    3212:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3216:	18 16       	cp	r1, r24
    3218:	4c f5       	brge	.+82     	; 0x326c <HLCD_vClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321a:	6b 85       	ldd	r22, Y+11	; 0x0b
    321c:	7c 85       	ldd	r23, Y+12	; 0x0c
    321e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3220:	9e 85       	ldd	r25, Y+14	; 0x0e
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e2       	ldi	r20, 0x20	; 32
    3228:	51 e4       	ldi	r21, 0x41	; 65
    322a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	9e 83       	std	Y+6, r25	; 0x06
    3240:	8d 83       	std	Y+5, r24	; 0x05
    3242:	0f c0       	rjmp	.+30     	; 0x3262 <HLCD_vClearDisplay+0xcc>
    3244:	8c e2       	ldi	r24, 0x2C	; 44
    3246:	91 e0       	ldi	r25, 0x01	; 1
    3248:	9c 83       	std	Y+4, r25	; 0x04
    324a:	8b 83       	std	Y+3, r24	; 0x03
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	9c 81       	ldd	r25, Y+4	; 0x04
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <HLCD_vClearDisplay+0xba>
    3254:	9c 83       	std	Y+4, r25	; 0x04
    3256:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	9e 83       	std	Y+6, r25	; 0x06
    3260:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	69 f7       	brne	.-38     	; 0x3244 <HLCD_vClearDisplay+0xae>
    326a:	14 c0       	rjmp	.+40     	; 0x3294 <HLCD_vClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326c:	6f 81       	ldd	r22, Y+7	; 0x07
    326e:	78 85       	ldd	r23, Y+8	; 0x08
    3270:	89 85       	ldd	r24, Y+9	; 0x09
    3272:	9a 85       	ldd	r25, Y+10	; 0x0a
    3274:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	9e 83       	std	Y+6, r25	; 0x06
    327e:	8d 83       	std	Y+5, r24	; 0x05
    3280:	8d 81       	ldd	r24, Y+5	; 0x05
    3282:	9e 81       	ldd	r25, Y+6	; 0x06
    3284:	9a 83       	std	Y+2, r25	; 0x02
    3286:	89 83       	std	Y+1, r24	; 0x01
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	9a 81       	ldd	r25, Y+2	; 0x02
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <HLCD_vClearDisplay+0xf6>
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    3294:	2e 96       	adiw	r28, 0x0e	; 14
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	08 95       	ret

000032a6 <HLCD_vDisplayLongString>:

void HLCD_vDisplayLongString(u8 *A_u8PtrToString)
{
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <HLCD_vDisplayLongString+0x6>
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <HLCD_vDisplayLongString+0x8>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	9c 83       	std	Y+4, r25	; 0x04
    32b4:	8b 83       	std	Y+3, r24	; 0x03
	u8 ROW = LCD_ROW1 , COL =LCD_COL1;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	8a 83       	std	Y+2, r24	; 0x02
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	89 83       	std	Y+1, r24	; 0x01
    32be:	1b c0       	rjmp	.+54     	; 0x32f6 <HLCD_vDisplayLongString+0x50>
	while(*A_u8PtrToString > 0)
	{
		if(COL > LCD_COL16 && ROW == LCD_ROW1)
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	81 31       	cpi	r24, 0x11	; 17
    32c4:	38 f0       	brcs	.+14     	; 0x32d4 <HLCD_vDisplayLongString+0x2e>
    32c6:	8a 81       	ldd	r24, Y+2	; 0x02
    32c8:	81 30       	cpi	r24, 0x01	; 1
    32ca:	21 f4       	brne	.+8      	; 0x32d4 <HLCD_vDisplayLongString+0x2e>
		{
			ROW = LCD_ROW2;
    32cc:	82 e0       	ldi	r24, 0x02	; 2
    32ce:	8a 83       	std	Y+2, r24	; 0x02
			COL = LCD_COL1;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	89 83       	std	Y+1, r24	; 0x01
		}
		HLCD_vGoToPos(ROW , COL);
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	69 81       	ldd	r22, Y+1	; 0x01
    32d8:	0e 94 a3 19 	call	0x3346	; 0x3346 <HLCD_vGoToPos>
		HLCD_vSendData(*A_u8PtrToString);
    32dc:	eb 81       	ldd	r30, Y+3	; 0x03
    32de:	fc 81       	ldd	r31, Y+4	; 0x04
    32e0:	80 81       	ld	r24, Z
    32e2:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <HLCD_vSendData>
		COL++;
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	8f 5f       	subi	r24, 0xFF	; 255
    32ea:	89 83       	std	Y+1, r24	; 0x01
		*A_u8PtrToString++;
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	9c 83       	std	Y+4, r25	; 0x04
    32f4:	8b 83       	std	Y+3, r24	; 0x03
}

void HLCD_vDisplayLongString(u8 *A_u8PtrToString)
{
	u8 ROW = LCD_ROW1 , COL =LCD_COL1;
	while(*A_u8PtrToString > 0)
    32f6:	eb 81       	ldd	r30, Y+3	; 0x03
    32f8:	fc 81       	ldd	r31, Y+4	; 0x04
    32fa:	80 81       	ld	r24, Z
    32fc:	88 23       	and	r24, r24
    32fe:	01 f7       	brne	.-64     	; 0x32c0 <HLCD_vDisplayLongString+0x1a>
		HLCD_vGoToPos(ROW , COL);
		HLCD_vSendData(*A_u8PtrToString);
		COL++;
		*A_u8PtrToString++;
	}
}
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <HLCD_vDisplayString>:

void HLCD_vDisplayString(u8 *A_u8PtrToString)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	00 d0       	rcall	.+0      	; 0x3314 <HLCD_vDisplayString+0x6>
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	9a 83       	std	Y+2, r25	; 0x02
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	0a c0       	rjmp	.+20     	; 0x3332 <HLCD_vDisplayString+0x24>
	while(*A_u8PtrToString > 0)
	{
		HLCD_vSendData(*A_u8PtrToString);
    331e:	e9 81       	ldd	r30, Y+1	; 0x01
    3320:	fa 81       	ldd	r31, Y+2	; 0x02
    3322:	80 81       	ld	r24, Z
    3324:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <HLCD_vSendData>
		*A_u8PtrToString++;
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	9a 83       	std	Y+2, r25	; 0x02
    3330:	89 83       	std	Y+1, r24	; 0x01
	}
}

void HLCD_vDisplayString(u8 *A_u8PtrToString)
{
	while(*A_u8PtrToString > 0)
    3332:	e9 81       	ldd	r30, Y+1	; 0x01
    3334:	fa 81       	ldd	r31, Y+2	; 0x02
    3336:	80 81       	ld	r24, Z
    3338:	88 23       	and	r24, r24
    333a:	89 f7       	brne	.-30     	; 0x331e <HLCD_vDisplayString+0x10>
	{
		HLCD_vSendData(*A_u8PtrToString);
		*A_u8PtrToString++;

	}
}
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <HLCD_vGoToPos>:

void HLCD_vGoToPos(LCD_ROW_e A_LCDRow ,LCD_COL_e A_LCDCol)
{
    3346:	df 93       	push	r29
    3348:	cf 93       	push	r28
    334a:	00 d0       	rcall	.+0      	; 0x334c <HLCD_vGoToPos+0x6>
    334c:	00 d0       	rcall	.+0      	; 0x334e <HLCD_vGoToPos+0x8>
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_LCDRow)
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	3c 83       	std	Y+4, r19	; 0x04
    335e:	2b 83       	std	Y+3, r18	; 0x03
    3360:	8b 81       	ldd	r24, Y+3	; 0x03
    3362:	9c 81       	ldd	r25, Y+4	; 0x04
    3364:	81 30       	cpi	r24, 0x01	; 1
    3366:	91 05       	cpc	r25, r1
    3368:	31 f0       	breq	.+12     	; 0x3376 <HLCD_vGoToPos+0x30>
    336a:	2b 81       	ldd	r18, Y+3	; 0x03
    336c:	3c 81       	ldd	r19, Y+4	; 0x04
    336e:	22 30       	cpi	r18, 0x02	; 2
    3370:	31 05       	cpc	r19, r1
    3372:	31 f0       	breq	.+12     	; 0x3380 <HLCD_vGoToPos+0x3a>
    3374:	09 c0       	rjmp	.+18     	; 0x3388 <HLCD_vGoToPos+0x42>
	{
		case LCD_ROW1:
			HLCD_vSendCommand(LCD_ROW1_BASE_ADD + A_LCDCol);
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	81 58       	subi	r24, 0x81	; 129
    337a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <HLCD_vSendCommand>
    337e:	04 c0       	rjmp	.+8      	; 0x3388 <HLCD_vGoToPos+0x42>
			break;
		case LCD_ROW2:
			HLCD_vSendCommand(LCD_ROW2_BASE_ADD + A_LCDCol);
    3380:	8a 81       	ldd	r24, Y+2	; 0x02
    3382:	81 54       	subi	r24, 0x41	; 65
    3384:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <HLCD_vSendCommand>
			break;
	}
}
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	08 95       	ret

00003396 <HLCD_vDisplayNumber>:

void HLCD_vDisplayNumber(u32 A_u32Number)
{
    3396:	df 93       	push	r29
    3398:	cf 93       	push	r28
    339a:	00 d0       	rcall	.+0      	; 0x339c <HLCD_vDisplayNumber+0x6>
    339c:	00 d0       	rcall	.+0      	; 0x339e <HLCD_vDisplayNumber+0x8>
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	9c 83       	std	Y+4, r25	; 0x04
    33a4:	8b 83       	std	Y+3, r24	; 0x03
	u32 ReversedNum = 1;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	9a 83       	std	Y+2, r25	; 0x02
    33ac:	89 83       	std	Y+1, r24	; 0x01
	if(A_u32Number == 0)
    33ae:	8b 81       	ldd	r24, Y+3	; 0x03
    33b0:	9c 81       	ldd	r25, Y+4	; 0x04
    33b2:	00 97       	sbiw	r24, 0x00	; 0
    33b4:	31 f5       	brne	.+76     	; 0x3402 <HLCD_vDisplayNumber+0x6c>
	{
		HLCD_vSendData('0');
    33b6:	80 e3       	ldi	r24, 0x30	; 48
    33b8:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <HLCD_vSendData>
    33bc:	22 c0       	rjmp	.+68     	; 0x3402 <HLCD_vDisplayNumber+0x6c>
	}

	while(A_u32Number != 0)
	{
		ReversedNum = (ReversedNum*10) + (A_u32Number %10);
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	9c 01       	movw	r18, r24
    33c4:	22 0f       	add	r18, r18
    33c6:	33 1f       	adc	r19, r19
    33c8:	c9 01       	movw	r24, r18
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	88 0f       	add	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	f9 01       	movw	r30, r18
    33d4:	e8 0f       	add	r30, r24
    33d6:	f9 1f       	adc	r31, r25
    33d8:	8b 81       	ldd	r24, Y+3	; 0x03
    33da:	9c 81       	ldd	r25, Y+4	; 0x04
    33dc:	2a e0       	ldi	r18, 0x0A	; 10
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	b9 01       	movw	r22, r18
    33e2:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__udivmodhi4>
    33e6:	8e 0f       	add	r24, r30
    33e8:	9f 1f       	adc	r25, r31
    33ea:	9a 83       	std	Y+2, r25	; 0x02
    33ec:	89 83       	std	Y+1, r24	; 0x01
		A_u32Number = A_u32Number /10;
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	9c 81       	ldd	r25, Y+4	; 0x04
    33f2:	2a e0       	ldi	r18, 0x0A	; 10
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	b9 01       	movw	r22, r18
    33f8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__udivmodhi4>
    33fc:	cb 01       	movw	r24, r22
    33fe:	9c 83       	std	Y+4, r25	; 0x04
    3400:	8b 83       	std	Y+3, r24	; 0x03
	if(A_u32Number == 0)
	{
		HLCD_vSendData('0');
	}

	while(A_u32Number != 0)
    3402:	8b 81       	ldd	r24, Y+3	; 0x03
    3404:	9c 81       	ldd	r25, Y+4	; 0x04
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	d1 f6       	brne	.-76     	; 0x33be <HLCD_vDisplayNumber+0x28>
    340a:	14 c0       	rjmp	.+40     	; 0x3434 <HLCD_vDisplayNumber+0x9e>
		A_u32Number = A_u32Number /10;
	}

	while(ReversedNum != 1)
	{
		HLCD_vSendData( (ReversedNum%10) + 48);
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	9a 81       	ldd	r25, Y+2	; 0x02
    3410:	2a e0       	ldi	r18, 0x0A	; 10
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	b9 01       	movw	r22, r18
    3416:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__udivmodhi4>
    341a:	80 5d       	subi	r24, 0xD0	; 208
    341c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <HLCD_vSendData>
		ReversedNum= ReversedNum/10;
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	9a 81       	ldd	r25, Y+2	; 0x02
    3424:	2a e0       	ldi	r18, 0x0A	; 10
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	b9 01       	movw	r22, r18
    342a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__udivmodhi4>
    342e:	cb 01       	movw	r24, r22
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	89 83       	std	Y+1, r24	; 0x01
	{
		ReversedNum = (ReversedNum*10) + (A_u32Number %10);
		A_u32Number = A_u32Number /10;
	}

	while(ReversedNum != 1)
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	9a 81       	ldd	r25, Y+2	; 0x02
    3438:	81 30       	cpi	r24, 0x01	; 1
    343a:	91 05       	cpc	r25, r1
    343c:	39 f7       	brne	.-50     	; 0x340c <HLCD_vDisplayNumber+0x76>
	{
		HLCD_vSendData( (ReversedNum%10) + 48);
		ReversedNum= ReversedNum/10;
	}
}
    343e:	0f 90       	pop	r0
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <HLCD_vSendSpecialSymbol>:

void HLCD_vSendSpecialSymbol(u8 *A_ptru8SymbolArray, u8 A_u8PatternNum, LCD_ROW_e A_RowNo , LCD_COL_e A_COLNo)
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	27 97       	sbiw	r28, 0x07	; 7
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	9c 83       	std	Y+4, r25	; 0x04
    3462:	8b 83       	std	Y+3, r24	; 0x03
    3464:	6d 83       	std	Y+5, r22	; 0x05
    3466:	4e 83       	std	Y+6, r20	; 0x06
    3468:	2f 83       	std	Y+7, r18	; 0x07
	u8 CGRAMAddress;
	// Calculate CGRAM Address
	CGRAMAddress = A_u8PatternNum * 8;
    346a:	8d 81       	ldd	r24, Y+5	; 0x05
    346c:	88 2f       	mov	r24, r24
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(CGRAMAddress ,6);
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	80 64       	ori	r24, 0x40	; 64
    3482:	8a 83       	std	Y+2, r24	; 0x02

	// Set CGRAM
	HLCD_vSendCommand(CGRAMAddress);
    3484:	8a 81       	ldd	r24, Y+2	; 0x02
    3486:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <HLCD_vSendCommand>


	for(u8 counter = 0 ; counter < 8 ; counter++)
    348a:	19 82       	std	Y+1, r1	; 0x01
    348c:	0e c0       	rjmp	.+28     	; 0x34aa <HLCD_vSendSpecialSymbol+0x5e>
	{
		HLCD_vSendData(A_ptru8SymbolArray[counter]);
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	28 2f       	mov	r18, r24
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	9c 81       	ldd	r25, Y+4	; 0x04
    3498:	fc 01       	movw	r30, r24
    349a:	e2 0f       	add	r30, r18
    349c:	f3 1f       	adc	r31, r19
    349e:	80 81       	ld	r24, Z
    34a0:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <HLCD_vSendData>

	// Set CGRAM
	HLCD_vSendCommand(CGRAMAddress);


	for(u8 counter = 0 ; counter < 8 ; counter++)
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	8f 5f       	subi	r24, 0xFF	; 255
    34a8:	89 83       	std	Y+1, r24	; 0x01
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	88 30       	cpi	r24, 0x08	; 8
    34ae:	78 f3       	brcs	.-34     	; 0x348e <HLCD_vSendSpecialSymbol+0x42>
	{
		HLCD_vSendData(A_ptru8SymbolArray[counter]);
	}

	// send Command to set DDRAM Address
	HLCD_vGoToPos(A_RowNo , A_COLNo);
    34b0:	8e 81       	ldd	r24, Y+6	; 0x06
    34b2:	6f 81       	ldd	r22, Y+7	; 0x07
    34b4:	0e 94 a3 19 	call	0x3346	; 0x3346 <HLCD_vGoToPos>

	// Display Pattern
	HLCD_vSendData(A_u8PatternNum);
    34b8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ba:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <HLCD_vSendData>
}
    34be:	27 96       	adiw	r28, 0x07	; 7
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	cf 91       	pop	r28
    34cc:	df 91       	pop	r29
    34ce:	08 95       	ret

000034d0 <HKEYPAD_vInit>:
u8 static const ArrOfCols[KEYPAD_COL_NO]= KEYPAD_COLS;



void HKEYPAD_vInit(void)
{
    34d0:	df 93       	push	r29
    34d2:	cf 93       	push	r28
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
	// Set PORT INPUT / OUTPUT
	MDIO_vSetPortDir(KEYPAD_PORT , 0x0F);
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	6f e0       	ldi	r22, 0x0F	; 15
    34dc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <MDIO_vSetPortDir>

	// Set all Port to high
	MDIO_vSetPortVal(KEYPAD_PORT , 0xFF);
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	6f ef       	ldi	r22, 0xFF	; 255
    34e4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <MDIO_vSetPortVal>

}
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	08 95       	ret

000034ee <HKEYPAD_u8GetPressedKey>:

u8 HKEYPAD_u8GetPressedKey(void)
{
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	a1 97       	sbiw	r28, 0x21	; 33
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61
	u8 KeyMap = NO_KEY_PRESSED ;
    3502:	8f ef       	ldi	r24, 0xFF	; 255
    3504:	89 a3       	std	Y+33, r24	; 0x21
	u8 PinValue ,RowNo=0 , ColNo=0  , Flag=FLAG_DOWN;
    3506:	1f 8e       	std	Y+31, r1	; 0x1f
    3508:	1e 8e       	std	Y+30, r1	; 0x1e
    350a:	1d 8e       	std	Y+29, r1	; 0x1d

	for (RowNo=0; RowNo < KEYPAD_ROW_NO; RowNo++ )
    350c:	1f 8e       	std	Y+31, r1	; 0x1f
    350e:	51 c1       	rjmp	.+674    	; 0x37b2 <HKEYPAD_u8GetPressedKey+0x2c4>
	{
		// Activate One Row
		MDIO_vSetPinVal(KEYPAD_PORT , ArrOfRows[RowNo], DIO_LOW);
    3510:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3512:	88 2f       	mov	r24, r24
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	fc 01       	movw	r30, r24
    3518:	e6 5b       	subi	r30, 0xB6	; 182
    351a:	fd 4f       	sbci	r31, 0xFD	; 253
    351c:	90 81       	ld	r25, Z
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	69 2f       	mov	r22, r25
    3522:	40 e0       	ldi	r20, 0x00	; 0
    3524:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>

		// Check on COls
		for(ColNo=0; ColNo < KEYPAD_COL_NO; ColNo++)
    3528:	1e 8e       	std	Y+30, r1	; 0x1e
    352a:	2d c1       	rjmp	.+602    	; 0x3786 <HKEYPAD_u8GetPressedKey+0x298>
		{
			// Read COLs
			PinValue= MDIO_GetPinVal(KEYPAD_PORT, ArrOfCols[ColNo]);
    352c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    352e:	88 2f       	mov	r24, r24
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	fc 01       	movw	r30, r24
    3534:	e2 5b       	subi	r30, 0xB2	; 178
    3536:	fd 4f       	sbci	r31, 0xFD	; 253
    3538:	90 81       	ld	r25, Z
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	69 2f       	mov	r22, r25
    353e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <MDIO_GetPinVal>
    3542:	88 a3       	std	Y+32, r24	; 0x20

			// Check if KeyPressed
			if(PinValue == KEY_PRESSED)
    3544:	88 a1       	ldd	r24, Y+32	; 0x20
    3546:	88 23       	and	r24, r24
    3548:	09 f0       	breq	.+2      	; 0x354c <HKEYPAD_u8GetPressedKey+0x5e>
    354a:	1a c1       	rjmp	.+564    	; 0x3780 <HKEYPAD_u8GetPressedKey+0x292>
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	a0 ef       	ldi	r26, 0xF0	; 240
    3552:	b1 e4       	ldi	r27, 0x41	; 65
    3554:	89 8f       	std	Y+25, r24	; 0x19
    3556:	9a 8f       	std	Y+26, r25	; 0x1a
    3558:	ab 8f       	std	Y+27, r26	; 0x1b
    355a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    355c:	69 8d       	ldd	r22, Y+25	; 0x19
    355e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3560:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3562:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e8       	ldi	r19, 0x80	; 128
    3568:	4b e3       	ldi	r20, 0x3B	; 59
    356a:	55 e4       	ldi	r21, 0x45	; 69
    356c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	8d 8b       	std	Y+21, r24	; 0x15
    3576:	9e 8b       	std	Y+22, r25	; 0x16
    3578:	af 8b       	std	Y+23, r26	; 0x17
    357a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    357c:	6d 89       	ldd	r22, Y+21	; 0x15
    357e:	7e 89       	ldd	r23, Y+22	; 0x16
    3580:	8f 89       	ldd	r24, Y+23	; 0x17
    3582:	98 8d       	ldd	r25, Y+24	; 0x18
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e8       	ldi	r20, 0x80	; 128
    358a:	5f e3       	ldi	r21, 0x3F	; 63
    358c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3590:	88 23       	and	r24, r24
    3592:	2c f4       	brge	.+10     	; 0x359e <HKEYPAD_u8GetPressedKey+0xb0>
		__ticks = 1;
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	9c 8b       	std	Y+20, r25	; 0x14
    359a:	8b 8b       	std	Y+19, r24	; 0x13
    359c:	3f c0       	rjmp	.+126    	; 0x361c <HKEYPAD_u8GetPressedKey+0x12e>
	else if (__tmp > 65535)
    359e:	6d 89       	ldd	r22, Y+21	; 0x15
    35a0:	7e 89       	ldd	r23, Y+22	; 0x16
    35a2:	8f 89       	ldd	r24, Y+23	; 0x17
    35a4:	98 8d       	ldd	r25, Y+24	; 0x18
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	3f ef       	ldi	r19, 0xFF	; 255
    35aa:	4f e7       	ldi	r20, 0x7F	; 127
    35ac:	57 e4       	ldi	r21, 0x47	; 71
    35ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    35b2:	18 16       	cp	r1, r24
    35b4:	4c f5       	brge	.+82     	; 0x3608 <HKEYPAD_u8GetPressedKey+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b6:	69 8d       	ldd	r22, Y+25	; 0x19
    35b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e2       	ldi	r20, 0x20	; 32
    35c4:	51 e4       	ldi	r21, 0x41	; 65
    35c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	bc 01       	movw	r22, r24
    35d0:	cd 01       	movw	r24, r26
    35d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	9c 8b       	std	Y+20, r25	; 0x14
    35dc:	8b 8b       	std	Y+19, r24	; 0x13
    35de:	0f c0       	rjmp	.+30     	; 0x35fe <HKEYPAD_u8GetPressedKey+0x110>
    35e0:	8c e2       	ldi	r24, 0x2C	; 44
    35e2:	91 e0       	ldi	r25, 0x01	; 1
    35e4:	9a 8b       	std	Y+18, r25	; 0x12
    35e6:	89 8b       	std	Y+17, r24	; 0x11
    35e8:	89 89       	ldd	r24, Y+17	; 0x11
    35ea:	9a 89       	ldd	r25, Y+18	; 0x12
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <HKEYPAD_u8GetPressedKey+0xfe>
    35f0:	9a 8b       	std	Y+18, r25	; 0x12
    35f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f4:	8b 89       	ldd	r24, Y+19	; 0x13
    35f6:	9c 89       	ldd	r25, Y+20	; 0x14
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	9c 8b       	std	Y+20, r25	; 0x14
    35fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3600:	9c 89       	ldd	r25, Y+20	; 0x14
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	69 f7       	brne	.-38     	; 0x35e0 <HKEYPAD_u8GetPressedKey+0xf2>
    3606:	14 c0       	rjmp	.+40     	; 0x3630 <HKEYPAD_u8GetPressedKey+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3608:	6d 89       	ldd	r22, Y+21	; 0x15
    360a:	7e 89       	ldd	r23, Y+22	; 0x16
    360c:	8f 89       	ldd	r24, Y+23	; 0x17
    360e:	98 8d       	ldd	r25, Y+24	; 0x18
    3610:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	9c 8b       	std	Y+20, r25	; 0x14
    361a:	8b 8b       	std	Y+19, r24	; 0x13
    361c:	8b 89       	ldd	r24, Y+19	; 0x13
    361e:	9c 89       	ldd	r25, Y+20	; 0x14
    3620:	98 8b       	std	Y+16, r25	; 0x10
    3622:	8f 87       	std	Y+15, r24	; 0x0f
    3624:	8f 85       	ldd	r24, Y+15	; 0x0f
    3626:	98 89       	ldd	r25, Y+16	; 0x10
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	f1 f7       	brne	.-4      	; 0x3628 <HKEYPAD_u8GetPressedKey+0x13a>
    362c:	98 8b       	std	Y+16, r25	; 0x10
    362e:	8f 87       	std	Y+15, r24	; 0x0f
			{
				// Debouncing Delay
				_delay_ms(DEBOUNCING_DELAY_ms);
				PinValue= MDIO_GetPinVal(KEYPAD_PORT, ArrOfCols[ColNo]);
    3630:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3632:	88 2f       	mov	r24, r24
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	fc 01       	movw	r30, r24
    3638:	e2 5b       	subi	r30, 0xB2	; 178
    363a:	fd 4f       	sbci	r31, 0xFD	; 253
    363c:	90 81       	ld	r25, Z
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	69 2f       	mov	r22, r25
    3642:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <MDIO_GetPinVal>
    3646:	88 a3       	std	Y+32, r24	; 0x20
				if(PinValue == KEY_PRESSED)
    3648:	88 a1       	ldd	r24, Y+32	; 0x20
    364a:	88 23       	and	r24, r24
    364c:	09 f0       	breq	.+2      	; 0x3650 <HKEYPAD_u8GetPressedKey+0x162>
    364e:	98 c0       	rjmp	.+304    	; 0x3780 <HKEYPAD_u8GetPressedKey+0x292>
    3650:	7e c0       	rjmp	.+252    	; 0x374e <HKEYPAD_u8GetPressedKey+0x260>
				{
					while(PinValue == KEY_PRESSED) // Polling of Flag
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	a0 ef       	ldi	r26, 0xF0	; 240
    3658:	b1 e4       	ldi	r27, 0x41	; 65
    365a:	8b 87       	std	Y+11, r24	; 0x0b
    365c:	9c 87       	std	Y+12, r25	; 0x0c
    365e:	ad 87       	std	Y+13, r26	; 0x0d
    3660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3662:	6b 85       	ldd	r22, Y+11	; 0x0b
    3664:	7c 85       	ldd	r23, Y+12	; 0x0c
    3666:	8d 85       	ldd	r24, Y+13	; 0x0d
    3668:	9e 85       	ldd	r25, Y+14	; 0x0e
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e8       	ldi	r19, 0x80	; 128
    366e:	4b e3       	ldi	r20, 0x3B	; 59
    3670:	55 e4       	ldi	r21, 0x45	; 69
    3672:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	8f 83       	std	Y+7, r24	; 0x07
    367c:	98 87       	std	Y+8, r25	; 0x08
    367e:	a9 87       	std	Y+9, r26	; 0x09
    3680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3682:	6f 81       	ldd	r22, Y+7	; 0x07
    3684:	78 85       	ldd	r23, Y+8	; 0x08
    3686:	89 85       	ldd	r24, Y+9	; 0x09
    3688:	9a 85       	ldd	r25, Y+10	; 0x0a
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e8       	ldi	r20, 0x80	; 128
    3690:	5f e3       	ldi	r21, 0x3F	; 63
    3692:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3696:	88 23       	and	r24, r24
    3698:	2c f4       	brge	.+10     	; 0x36a4 <HKEYPAD_u8GetPressedKey+0x1b6>
		__ticks = 1;
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
    36a2:	3f c0       	rjmp	.+126    	; 0x3722 <HKEYPAD_u8GetPressedKey+0x234>
	else if (__tmp > 65535)
    36a4:	6f 81       	ldd	r22, Y+7	; 0x07
    36a6:	78 85       	ldd	r23, Y+8	; 0x08
    36a8:	89 85       	ldd	r24, Y+9	; 0x09
    36aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	3f ef       	ldi	r19, 0xFF	; 255
    36b0:	4f e7       	ldi	r20, 0x7F	; 127
    36b2:	57 e4       	ldi	r21, 0x47	; 71
    36b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    36b8:	18 16       	cp	r1, r24
    36ba:	4c f5       	brge	.+82     	; 0x370e <HKEYPAD_u8GetPressedKey+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36be:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	40 e2       	ldi	r20, 0x20	; 32
    36ca:	51 e4       	ldi	r21, 0x41	; 65
    36cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	bc 01       	movw	r22, r24
    36d6:	cd 01       	movw	r24, r26
    36d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	9e 83       	std	Y+6, r25	; 0x06
    36e2:	8d 83       	std	Y+5, r24	; 0x05
    36e4:	0f c0       	rjmp	.+30     	; 0x3704 <HKEYPAD_u8GetPressedKey+0x216>
    36e6:	8c e2       	ldi	r24, 0x2C	; 44
    36e8:	91 e0       	ldi	r25, 0x01	; 1
    36ea:	9c 83       	std	Y+4, r25	; 0x04
    36ec:	8b 83       	std	Y+3, r24	; 0x03
    36ee:	8b 81       	ldd	r24, Y+3	; 0x03
    36f0:	9c 81       	ldd	r25, Y+4	; 0x04
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	f1 f7       	brne	.-4      	; 0x36f2 <HKEYPAD_u8GetPressedKey+0x204>
    36f6:	9c 83       	std	Y+4, r25	; 0x04
    36f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fa:	8d 81       	ldd	r24, Y+5	; 0x05
    36fc:	9e 81       	ldd	r25, Y+6	; 0x06
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	9e 83       	std	Y+6, r25	; 0x06
    3702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3704:	8d 81       	ldd	r24, Y+5	; 0x05
    3706:	9e 81       	ldd	r25, Y+6	; 0x06
    3708:	00 97       	sbiw	r24, 0x00	; 0
    370a:	69 f7       	brne	.-38     	; 0x36e6 <HKEYPAD_u8GetPressedKey+0x1f8>
    370c:	14 c0       	rjmp	.+40     	; 0x3736 <HKEYPAD_u8GetPressedKey+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370e:	6f 81       	ldd	r22, Y+7	; 0x07
    3710:	78 85       	ldd	r23, Y+8	; 0x08
    3712:	89 85       	ldd	r24, Y+9	; 0x09
    3714:	9a 85       	ldd	r25, Y+10	; 0x0a
    3716:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	9e 83       	std	Y+6, r25	; 0x06
    3720:	8d 83       	std	Y+5, r24	; 0x05
    3722:	8d 81       	ldd	r24, Y+5	; 0x05
    3724:	9e 81       	ldd	r25, Y+6	; 0x06
    3726:	9a 83       	std	Y+2, r25	; 0x02
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	9a 81       	ldd	r25, Y+2	; 0x02
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	f1 f7       	brne	.-4      	; 0x372e <HKEYPAD_u8GetPressedKey+0x240>
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(DEBOUNCING_DELAY_ms);
						PinValue= MDIO_GetPinVal(KEYPAD_PORT, ArrOfCols[ColNo]);
    3736:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3738:	88 2f       	mov	r24, r24
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	fc 01       	movw	r30, r24
    373e:	e2 5b       	subi	r30, 0xB2	; 178
    3740:	fd 4f       	sbci	r31, 0xFD	; 253
    3742:	90 81       	ld	r25, Z
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	69 2f       	mov	r22, r25
    3748:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <MDIO_GetPinVal>
    374c:	88 a3       	std	Y+32, r24	; 0x20
				// Debouncing Delay
				_delay_ms(DEBOUNCING_DELAY_ms);
				PinValue= MDIO_GetPinVal(KEYPAD_PORT, ArrOfCols[ColNo]);
				if(PinValue == KEY_PRESSED)
				{
					while(PinValue == KEY_PRESSED) // Polling of Flag
    374e:	88 a1       	ldd	r24, Y+32	; 0x20
    3750:	88 23       	and	r24, r24
    3752:	09 f4       	brne	.+2      	; 0x3756 <HKEYPAD_u8GetPressedKey+0x268>
    3754:	7e cf       	rjmp	.-260    	; 0x3652 <HKEYPAD_u8GetPressedKey+0x164>
					{
						_delay_ms(DEBOUNCING_DELAY_ms);
						PinValue= MDIO_GetPinVal(KEYPAD_PORT, ArrOfCols[ColNo]);
					} // End of While Loop

					KeyMap = ArrofKeyValues[RowNo][ColNo]; // Get Pressed Key Value
    3756:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3758:	48 2f       	mov	r20, r24
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    375e:	28 2f       	mov	r18, r24
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	ca 01       	movw	r24, r20
    3764:	88 0f       	add	r24, r24
    3766:	99 1f       	adc	r25, r25
    3768:	88 0f       	add	r24, r24
    376a:	99 1f       	adc	r25, r25
    376c:	82 0f       	add	r24, r18
    376e:	93 1f       	adc	r25, r19
    3770:	fc 01       	movw	r30, r24
    3772:	ea 5d       	subi	r30, 0xDA	; 218
    3774:	fd 4f       	sbci	r31, 0xFD	; 253
    3776:	80 81       	ld	r24, Z
    3778:	89 a3       	std	Y+33, r24	; 0x21
					Flag = FLAG_UP; // Notification for ROWs Loop to break and Return
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	8d 8f       	std	Y+29, r24	; 0x1d
    377e:	07 c0       	rjmp	.+14     	; 0x378e <HKEYPAD_u8GetPressedKey+0x2a0>
	{
		// Activate One Row
		MDIO_vSetPinVal(KEYPAD_PORT , ArrOfRows[RowNo], DIO_LOW);

		// Check on COls
		for(ColNo=0; ColNo < KEYPAD_COL_NO; ColNo++)
    3780:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3782:	8f 5f       	subi	r24, 0xFF	; 255
    3784:	8e 8f       	std	Y+30, r24	; 0x1e
    3786:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3788:	84 30       	cpi	r24, 0x04	; 4
    378a:	08 f4       	brcc	.+2      	; 0x378e <HKEYPAD_u8GetPressedKey+0x2a0>
    378c:	cf ce       	rjmp	.-610    	; 0x352c <HKEYPAD_u8GetPressedKey+0x3e>
				}
			}
		} // End of COLs Loop

		// De-Activate One Row
		MDIO_vSetPinVal(KEYPAD_PORT , ArrOfRows[RowNo], DIO_HIGH);
    378e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3790:	88 2f       	mov	r24, r24
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	fc 01       	movw	r30, r24
    3796:	e6 5b       	subi	r30, 0xB6	; 182
    3798:	fd 4f       	sbci	r31, 0xFD	; 253
    379a:	90 81       	ld	r25, Z
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	69 2f       	mov	r22, r25
    37a0:	41 e0       	ldi	r20, 0x01	; 1
    37a2:	0e 94 04 0c 	call	0x1808	; 0x1808 <MDIO_vSetPinVal>

		if(Flag == FLAG_UP) // Check if Key was Pressed
    37a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37a8:	81 30       	cpi	r24, 0x01	; 1
    37aa:	39 f0       	breq	.+14     	; 0x37ba <HKEYPAD_u8GetPressedKey+0x2cc>
u8 HKEYPAD_u8GetPressedKey(void)
{
	u8 KeyMap = NO_KEY_PRESSED ;
	u8 PinValue ,RowNo=0 , ColNo=0  , Flag=FLAG_DOWN;

	for (RowNo=0; RowNo < KEYPAD_ROW_NO; RowNo++ )
    37ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37ae:	8f 5f       	subi	r24, 0xFF	; 255
    37b0:	8f 8f       	std	Y+31, r24	; 0x1f
    37b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37b4:	84 30       	cpi	r24, 0x04	; 4
    37b6:	08 f4       	brcc	.+2      	; 0x37ba <HKEYPAD_u8GetPressedKey+0x2cc>
    37b8:	ab ce       	rjmp	.-682    	; 0x3510 <HKEYPAD_u8GetPressedKey+0x22>
			break; // break ROWs Loop
		}

	}// End of ROWs Loop

	return KeyMap;
    37ba:	89 a1       	ldd	r24, Y+33	; 0x21
}
    37bc:	a1 96       	adiw	r28, 0x21	; 33
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	cd bf       	out	0x3d, r28	; 61
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	08 95       	ret

000037ce <HKEYPAD_u16MultiDigitInput>:

u16 HKEYPAD_u16MultiDigitInput(void)
{
    37ce:	df 93       	push	r29
    37d0:	cf 93       	push	r28
    37d2:	00 d0       	rcall	.+0      	; 0x37d4 <HKEYPAD_u16MultiDigitInput+0x6>
    37d4:	0f 92       	push	r0
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
	u16 Number =0;
    37da:	1b 82       	std	Y+3, r1	; 0x03
    37dc:	1a 82       	std	Y+2, r1	; 0x02
	u8 key;

	while(1)
	{
		key = HKEYPAD_u8GetPressedKey();
    37de:	0e 94 77 1a 	call	0x34ee	; 0x34ee <HKEYPAD_u8GetPressedKey>
    37e2:	89 83       	std	Y+1, r24	; 0x01

		if(key != NO_KEY_PRESSED)
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	8f 3f       	cpi	r24, 0xFF	; 255
    37e8:	d1 f3       	breq	.-12     	; 0x37de <HKEYPAD_u16MultiDigitInput+0x10>
		{
			if (key == '#')
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	83 32       	cpi	r24, 0x23	; 35
    37ee:	d1 f0       	breq	.+52     	; 0x3824 <HKEYPAD_u16MultiDigitInput+0x56>
			{
				break;
			}
			else
			{
				key -= '0';
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	80 53       	subi	r24, 0x30	; 48
    37f4:	89 83       	std	Y+1, r24	; 0x01
				if(key >= 0 && key <= 9)
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	8a 30       	cpi	r24, 0x0A	; 10
    37fa:	88 f7       	brcc	.-30     	; 0x37de <HKEYPAD_u16MultiDigitInput+0x10>
				{
					Number = Number * 10 + key;
    37fc:	8a 81       	ldd	r24, Y+2	; 0x02
    37fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3800:	9c 01       	movw	r18, r24
    3802:	22 0f       	add	r18, r18
    3804:	33 1f       	adc	r19, r19
    3806:	c9 01       	movw	r24, r18
    3808:	88 0f       	add	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	28 0f       	add	r18, r24
    3812:	39 1f       	adc	r19, r25
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	88 2f       	mov	r24, r24
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	82 0f       	add	r24, r18
    381c:	93 1f       	adc	r25, r19
    381e:	9b 83       	std	Y+3, r25	; 0x03
    3820:	8a 83       	std	Y+2, r24	; 0x02
    3822:	dd cf       	rjmp	.-70     	; 0x37de <HKEYPAD_u16MultiDigitInput+0x10>
				}
			}
		}
	}
		return Number;
    3824:	8a 81       	ldd	r24, Y+2	; 0x02
    3826:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	cf 91       	pop	r28
    3830:	df 91       	pop	r29
    3832:	08 95       	ret

00003834 <__udivmodhi4>:
    3834:	aa 1b       	sub	r26, r26
    3836:	bb 1b       	sub	r27, r27
    3838:	51 e1       	ldi	r21, 0x11	; 17
    383a:	07 c0       	rjmp	.+14     	; 0x384a <__udivmodhi4_ep>

0000383c <__udivmodhi4_loop>:
    383c:	aa 1f       	adc	r26, r26
    383e:	bb 1f       	adc	r27, r27
    3840:	a6 17       	cp	r26, r22
    3842:	b7 07       	cpc	r27, r23
    3844:	10 f0       	brcs	.+4      	; 0x384a <__udivmodhi4_ep>
    3846:	a6 1b       	sub	r26, r22
    3848:	b7 0b       	sbc	r27, r23

0000384a <__udivmodhi4_ep>:
    384a:	88 1f       	adc	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	5a 95       	dec	r21
    3850:	a9 f7       	brne	.-22     	; 0x383c <__udivmodhi4_loop>
    3852:	80 95       	com	r24
    3854:	90 95       	com	r25
    3856:	bc 01       	movw	r22, r24
    3858:	cd 01       	movw	r24, r26
    385a:	08 95       	ret

0000385c <__prologue_saves__>:
    385c:	2f 92       	push	r2
    385e:	3f 92       	push	r3
    3860:	4f 92       	push	r4
    3862:	5f 92       	push	r5
    3864:	6f 92       	push	r6
    3866:	7f 92       	push	r7
    3868:	8f 92       	push	r8
    386a:	9f 92       	push	r9
    386c:	af 92       	push	r10
    386e:	bf 92       	push	r11
    3870:	cf 92       	push	r12
    3872:	df 92       	push	r13
    3874:	ef 92       	push	r14
    3876:	ff 92       	push	r15
    3878:	0f 93       	push	r16
    387a:	1f 93       	push	r17
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	ca 1b       	sub	r28, r26
    3886:	db 0b       	sbc	r29, r27
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	09 94       	ijmp

00003894 <__epilogue_restores__>:
    3894:	2a 88       	ldd	r2, Y+18	; 0x12
    3896:	39 88       	ldd	r3, Y+17	; 0x11
    3898:	48 88       	ldd	r4, Y+16	; 0x10
    389a:	5f 84       	ldd	r5, Y+15	; 0x0f
    389c:	6e 84       	ldd	r6, Y+14	; 0x0e
    389e:	7d 84       	ldd	r7, Y+13	; 0x0d
    38a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    38a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    38a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    38a6:	b9 84       	ldd	r11, Y+9	; 0x09
    38a8:	c8 84       	ldd	r12, Y+8	; 0x08
    38aa:	df 80       	ldd	r13, Y+7	; 0x07
    38ac:	ee 80       	ldd	r14, Y+6	; 0x06
    38ae:	fd 80       	ldd	r15, Y+5	; 0x05
    38b0:	0c 81       	ldd	r16, Y+4	; 0x04
    38b2:	1b 81       	ldd	r17, Y+3	; 0x03
    38b4:	aa 81       	ldd	r26, Y+2	; 0x02
    38b6:	b9 81       	ldd	r27, Y+1	; 0x01
    38b8:	ce 0f       	add	r28, r30
    38ba:	d1 1d       	adc	r29, r1
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	cd bf       	out	0x3d, r28	; 61
    38c6:	ed 01       	movw	r28, r26
    38c8:	08 95       	ret

000038ca <_exit>:
    38ca:	f8 94       	cli

000038cc <__stop_program>:
    38cc:	ff cf       	rjmp	.-2      	; 0x38cc <__stop_program>
