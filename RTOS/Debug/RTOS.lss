
RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800060  00800060  00000fb8  2**0
                  ALLOC
  2 .stab         000016d4  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fbe  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_10>
  2c:	0c 94 76 06 	jmp	0xcec	; 0xcec <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 37       	cpi	r26, 0x77	; 119
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  74:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TogLed1>:


#define F_CPU 8000000UL

void TogLed1()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	HLED_voidToggleLED(DIO_PORTA , PIN0);
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	0e 94 c6 04 	call	0x98c	; 0x98c <HLED_voidToggleLED>
}
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	08 95       	ret

00000092 <TogLed2>:

void TogLed2()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	HLED_voidToggleLED(DIO_PORTA , PIN1);
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	0e 94 c6 04 	call	0x98c	; 0x98c <HLED_voidToggleLED>
}
  a2:	cf 91       	pop	r28
  a4:	df 91       	pop	r29
  a6:	08 95       	ret

000000a8 <TogLed3>:

void TogLed3()
{
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	HLED_voidToggleLED(DIO_PORTA , PIN2);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	0e 94 c6 04 	call	0x98c	; 0x98c <HLED_voidToggleLED>
}
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <main>:


int main()
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
//	MDIO_voidInit();

	MDIO_voidSetPinDirection(DIO_PORTA,PIN0 , DIO_OUTPUT);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	0e 94 94 00 	call	0x128	; 0x128 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIO_PORTA,PIN1 , DIO_OUTPUT);
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	0e 94 94 00 	call	0x128	; 0x128 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIO_PORTA,PIN2 , DIO_OUTPUT);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	62 e0       	ldi	r22, 0x02	; 2
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	0e 94 94 00 	call	0x128	; 0x128 <MDIO_voidSetPinDirection>
	SRTOS_voidInitArrayFunctions();
  e4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SRTOS_voidInitArrayFunctions>

	SRTOS_voidCreateTask(0, 1000, 0 , TogLed1);
  e8:	2e e3       	ldi	r18, 0x3E	; 62
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	68 ee       	ldi	r22, 0xE8	; 232
  f0:	73 e0       	ldi	r23, 0x03	; 3
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	0e 94 03 05 	call	0xa06	; 0xa06 <SRTOS_voidCreateTask>
	SRTOS_voidCreateTask(1, 2000, 0 , TogLed1);
  fa:	2e e3       	ldi	r18, 0x3E	; 62
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	60 ed       	ldi	r22, 0xD0	; 208
 102:	77 e0       	ldi	r23, 0x07	; 7
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	0e 94 03 05 	call	0xa06	; 0xa06 <SRTOS_voidCreateTask>
	SRTOS_voidCreateTask(2, 5000, 0 , TogLed1);
 10c:	2e e3       	ldi	r18, 0x3E	; 62
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	68 e8       	ldi	r22, 0x88	; 136
 114:	73 e1       	ldi	r23, 0x13	; 19
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	0e 94 03 05 	call	0xa06	; 0xa06 <SRTOS_voidCreateTask>

	SRTOS_voidInit();
 11e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <SRTOS_voidInit>
	MGI_voidEnable();
 122:	0e 94 88 04 	call	0x910	; 0x910 <MGI_voidEnable>
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x68>

00000128 <MDIO_voidSetPinDirection>:


// MDIO_voidSetPinDirection(DIO_PORTA, PIN0, DIO_OUTPUT);

void MDIO_voidSetPinDirection(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_pinDirection)
{
 128:	df 93       	push	r29
 12a:	cf 93       	push	r28
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	2d 97       	sbiw	r28, 0x0d	; 13
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	89 83       	std	Y+1, r24	; 0x01
 13e:	6a 83       	std	Y+2, r22	; 0x02
 140:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT) )
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	84 30       	cpi	r24, 0x04	; 4
 146:	08 f0       	brcs	.+2      	; 0x14a <MDIO_voidSetPinDirection+0x22>
 148:	09 c1       	rjmp	.+530    	; 0x35c <MDIO_voidSetPinDirection+0x234>
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	08 f0       	brcs	.+2      	; 0x152 <MDIO_voidSetPinDirection+0x2a>
 150:	05 c1       	rjmp	.+522    	; 0x35c <MDIO_voidSetPinDirection+0x234>
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	08 f0       	brcs	.+2      	; 0x15a <MDIO_voidSetPinDirection+0x32>
 158:	01 c1       	rjmp	.+514    	; 0x35c <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_portID)
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	3d 87       	std	Y+13, r19	; 0x0d
 162:	2c 87       	std	Y+12, r18	; 0x0c
 164:	8c 85       	ldd	r24, Y+12	; 0x0c
 166:	9d 85       	ldd	r25, Y+13	; 0x0d
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	91 05       	cpc	r25, r1
 16c:	09 f4       	brne	.+2      	; 0x170 <MDIO_voidSetPinDirection+0x48>
 16e:	4f c0       	rjmp	.+158    	; 0x20e <MDIO_voidSetPinDirection+0xe6>
 170:	2c 85       	ldd	r18, Y+12	; 0x0c
 172:	3d 85       	ldd	r19, Y+13	; 0x0d
 174:	22 30       	cpi	r18, 0x02	; 2
 176:	31 05       	cpc	r19, r1
 178:	2c f4       	brge	.+10     	; 0x184 <MDIO_voidSetPinDirection+0x5c>
 17a:	8c 85       	ldd	r24, Y+12	; 0x0c
 17c:	9d 85       	ldd	r25, Y+13	; 0x0d
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	71 f0       	breq	.+28     	; 0x19e <MDIO_voidSetPinDirection+0x76>
 182:	ec c0       	rjmp	.+472    	; 0x35c <MDIO_voidSetPinDirection+0x234>
 184:	2c 85       	ldd	r18, Y+12	; 0x0c
 186:	3d 85       	ldd	r19, Y+13	; 0x0d
 188:	22 30       	cpi	r18, 0x02	; 2
 18a:	31 05       	cpc	r19, r1
 18c:	09 f4       	brne	.+2      	; 0x190 <MDIO_voidSetPinDirection+0x68>
 18e:	77 c0       	rjmp	.+238    	; 0x27e <MDIO_voidSetPinDirection+0x156>
 190:	8c 85       	ldd	r24, Y+12	; 0x0c
 192:	9d 85       	ldd	r25, Y+13	; 0x0d
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	91 05       	cpc	r25, r1
 198:	09 f4       	brne	.+2      	; 0x19c <MDIO_voidSetPinDirection+0x74>
 19a:	a9 c0       	rjmp	.+338    	; 0x2ee <MDIO_voidSetPinDirection+0x1c6>
 19c:	df c0       	rjmp	.+446    	; 0x35c <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_pinDirection)
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3b 87       	std	Y+11, r19	; 0x0b
 1a6:	2a 87       	std	Y+10, r18	; 0x0a
 1a8:	8a 85       	ldd	r24, Y+10	; 0x0a
 1aa:	9b 85       	ldd	r25, Y+11	; 0x0b
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	31 f0       	breq	.+12     	; 0x1bc <MDIO_voidSetPinDirection+0x94>
 1b0:	2a 85       	ldd	r18, Y+10	; 0x0a
 1b2:	3b 85       	ldd	r19, Y+11	; 0x0b
 1b4:	21 30       	cpi	r18, 0x01	; 1
 1b6:	31 05       	cpc	r19, r1
 1b8:	b1 f0       	breq	.+44     	; 0x1e6 <MDIO_voidSetPinDirection+0xbe>
 1ba:	d0 c0       	rjmp	.+416    	; 0x35c <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
 1bc:	aa e3       	ldi	r26, 0x3A	; 58
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	ea e3       	ldi	r30, 0x3A	; 58
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	48 2f       	mov	r20, r24
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 2e       	mov	r0, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <MDIO_voidSetPinDirection+0xb2>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <MDIO_voidSetPinDirection+0xae>
 1de:	80 95       	com	r24
 1e0:	84 23       	and	r24, r20
 1e2:	8c 93       	st	X, r24
 1e4:	bb c0       	rjmp	.+374    	; 0x35c <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
 1e6:	aa e3       	ldi	r26, 0x3A	; 58
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	ea e3       	ldi	r30, 0x3A	; 58
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	8a 81       	ldd	r24, Y+2	; 0x02
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 2e       	mov	r0, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <MDIO_voidSetPinDirection+0xdc>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <MDIO_voidSetPinDirection+0xd8>
 208:	84 2b       	or	r24, r20
 20a:	8c 93       	st	X, r24
 20c:	a7 c0       	rjmp	.+334    	; 0x35c <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinDirection)
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	39 87       	std	Y+9, r19	; 0x09
 216:	28 87       	std	Y+8, r18	; 0x08
 218:	88 85       	ldd	r24, Y+8	; 0x08
 21a:	99 85       	ldd	r25, Y+9	; 0x09
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	31 f0       	breq	.+12     	; 0x22c <MDIO_voidSetPinDirection+0x104>
 220:	28 85       	ldd	r18, Y+8	; 0x08
 222:	39 85       	ldd	r19, Y+9	; 0x09
 224:	21 30       	cpi	r18, 0x01	; 1
 226:	31 05       	cpc	r19, r1
 228:	b1 f0       	breq	.+44     	; 0x256 <MDIO_voidSetPinDirection+0x12e>
 22a:	98 c0       	rjmp	.+304    	; 0x35c <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
 22c:	a7 e3       	ldi	r26, 0x37	; 55
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e7 e3       	ldi	r30, 0x37	; 55
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <MDIO_voidSetPinDirection+0x122>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <MDIO_voidSetPinDirection+0x11e>
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	8c 93       	st	X, r24
 254:	83 c0       	rjmp	.+262    	; 0x35c <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
 256:	a7 e3       	ldi	r26, 0x37	; 55
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e7 e3       	ldi	r30, 0x37	; 55
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	48 2f       	mov	r20, r24
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 2e       	mov	r0, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <MDIO_voidSetPinDirection+0x14c>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <MDIO_voidSetPinDirection+0x148>
 278:	84 2b       	or	r24, r20
 27a:	8c 93       	st	X, r24
 27c:	6f c0       	rjmp	.+222    	; 0x35c <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinDirection)
 27e:	8b 81       	ldd	r24, Y+3	; 0x03
 280:	28 2f       	mov	r18, r24
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	3f 83       	std	Y+7, r19	; 0x07
 286:	2e 83       	std	Y+6, r18	; 0x06
 288:	8e 81       	ldd	r24, Y+6	; 0x06
 28a:	9f 81       	ldd	r25, Y+7	; 0x07
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	31 f0       	breq	.+12     	; 0x29c <MDIO_voidSetPinDirection+0x174>
 290:	2e 81       	ldd	r18, Y+6	; 0x06
 292:	3f 81       	ldd	r19, Y+7	; 0x07
 294:	21 30       	cpi	r18, 0x01	; 1
 296:	31 05       	cpc	r19, r1
 298:	b1 f0       	breq	.+44     	; 0x2c6 <MDIO_voidSetPinDirection+0x19e>
 29a:	60 c0       	rjmp	.+192    	; 0x35c <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
 29c:	a4 e3       	ldi	r26, 0x34	; 52
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	e4 e3       	ldi	r30, 0x34	; 52
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	48 2f       	mov	r20, r24
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 2e       	mov	r0, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <MDIO_voidSetPinDirection+0x192>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <MDIO_voidSetPinDirection+0x18e>
 2be:	80 95       	com	r24
 2c0:	84 23       	and	r24, r20
 2c2:	8c 93       	st	X, r24
 2c4:	4b c0       	rjmp	.+150    	; 0x35c <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
 2c6:	a4 e3       	ldi	r26, 0x34	; 52
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e4 e3       	ldi	r30, 0x34	; 52
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	48 2f       	mov	r20, r24
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	28 2f       	mov	r18, r24
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 2e       	mov	r0, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <MDIO_voidSetPinDirection+0x1bc>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <MDIO_voidSetPinDirection+0x1b8>
 2e8:	84 2b       	or	r24, r20
 2ea:	8c 93       	st	X, r24
 2ec:	37 c0       	rjmp	.+110    	; 0x35c <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinDirection)
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	3d 83       	std	Y+5, r19	; 0x05
 2f6:	2c 83       	std	Y+4, r18	; 0x04
 2f8:	8c 81       	ldd	r24, Y+4	; 0x04
 2fa:	9d 81       	ldd	r25, Y+5	; 0x05
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	31 f0       	breq	.+12     	; 0x30c <MDIO_voidSetPinDirection+0x1e4>
 300:	2c 81       	ldd	r18, Y+4	; 0x04
 302:	3d 81       	ldd	r19, Y+5	; 0x05
 304:	21 30       	cpi	r18, 0x01	; 1
 306:	31 05       	cpc	r19, r1
 308:	b1 f0       	breq	.+44     	; 0x336 <MDIO_voidSetPinDirection+0x20e>
 30a:	28 c0       	rjmp	.+80     	; 0x35c <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
 30c:	a1 e3       	ldi	r26, 0x31	; 49
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e1 e3       	ldi	r30, 0x31	; 49
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	48 2f       	mov	r20, r24
 318:	8a 81       	ldd	r24, Y+2	; 0x02
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 2e       	mov	r0, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <MDIO_voidSetPinDirection+0x202>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <MDIO_voidSetPinDirection+0x1fe>
 32e:	80 95       	com	r24
 330:	84 23       	and	r24, r20
 332:	8c 93       	st	X, r24
 334:	13 c0       	rjmp	.+38     	; 0x35c <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
 336:	a1 e3       	ldi	r26, 0x31	; 49
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	e1 e3       	ldi	r30, 0x31	; 49
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	48 2f       	mov	r20, r24
 342:	8a 81       	ldd	r24, Y+2	; 0x02
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 2e       	mov	r0, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <MDIO_voidSetPinDirection+0x22c>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <MDIO_voidSetPinDirection+0x228>
 358:	84 2b       	or	r24, r20
 35a:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
 35c:	2d 96       	adiw	r28, 0x0d	; 13
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	cf 91       	pop	r28
 36a:	df 91       	pop	r29
 36c:	08 95       	ret

0000036e <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_pinValue)
{
 36e:	df 93       	push	r29
 370:	cf 93       	push	r28
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	2d 97       	sbiw	r28, 0x0d	; 13
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	89 83       	std	Y+1, r24	; 0x01
 384:	6a 83       	std	Y+2, r22	; 0x02
 386:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_SET) )
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	84 30       	cpi	r24, 0x04	; 4
 38c:	08 f0       	brcs	.+2      	; 0x390 <MDIO_voidSetPinValue+0x22>
 38e:	09 c1       	rjmp	.+530    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	88 30       	cpi	r24, 0x08	; 8
 394:	08 f0       	brcs	.+2      	; 0x398 <MDIO_voidSetPinValue+0x2a>
 396:	05 c1       	rjmp	.+522    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <MDIO_voidSetPinValue+0x32>
 39e:	01 c1       	rjmp	.+514    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
	{
		switch (A_portID)
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	28 2f       	mov	r18, r24
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	3d 87       	std	Y+13, r19	; 0x0d
 3a8:	2c 87       	std	Y+12, r18	; 0x0c
 3aa:	8c 85       	ldd	r24, Y+12	; 0x0c
 3ac:	9d 85       	ldd	r25, Y+13	; 0x0d
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	91 05       	cpc	r25, r1
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <MDIO_voidSetPinValue+0x48>
 3b4:	4f c0       	rjmp	.+158    	; 0x454 <MDIO_voidSetPinValue+0xe6>
 3b6:	2c 85       	ldd	r18, Y+12	; 0x0c
 3b8:	3d 85       	ldd	r19, Y+13	; 0x0d
 3ba:	22 30       	cpi	r18, 0x02	; 2
 3bc:	31 05       	cpc	r19, r1
 3be:	2c f4       	brge	.+10     	; 0x3ca <MDIO_voidSetPinValue+0x5c>
 3c0:	8c 85       	ldd	r24, Y+12	; 0x0c
 3c2:	9d 85       	ldd	r25, Y+13	; 0x0d
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	71 f0       	breq	.+28     	; 0x3e4 <MDIO_voidSetPinValue+0x76>
 3c8:	ec c0       	rjmp	.+472    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
 3ca:	2c 85       	ldd	r18, Y+12	; 0x0c
 3cc:	3d 85       	ldd	r19, Y+13	; 0x0d
 3ce:	22 30       	cpi	r18, 0x02	; 2
 3d0:	31 05       	cpc	r19, r1
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <MDIO_voidSetPinValue+0x68>
 3d4:	77 c0       	rjmp	.+238    	; 0x4c4 <MDIO_voidSetPinValue+0x156>
 3d6:	8c 85       	ldd	r24, Y+12	; 0x0c
 3d8:	9d 85       	ldd	r25, Y+13	; 0x0d
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	91 05       	cpc	r25, r1
 3de:	09 f4       	brne	.+2      	; 0x3e2 <MDIO_voidSetPinValue+0x74>
 3e0:	a9 c0       	rjmp	.+338    	; 0x534 <MDIO_voidSetPinValue+0x1c6>
 3e2:	df c0       	rjmp	.+446    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_pinValue)
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	3b 87       	std	Y+11, r19	; 0x0b
 3ec:	2a 87       	std	Y+10, r18	; 0x0a
 3ee:	8a 85       	ldd	r24, Y+10	; 0x0a
 3f0:	9b 85       	ldd	r25, Y+11	; 0x0b
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	31 f0       	breq	.+12     	; 0x402 <MDIO_voidSetPinValue+0x94>
 3f6:	2a 85       	ldd	r18, Y+10	; 0x0a
 3f8:	3b 85       	ldd	r19, Y+11	; 0x0b
 3fa:	21 30       	cpi	r18, 0x01	; 1
 3fc:	31 05       	cpc	r19, r1
 3fe:	b1 f0       	breq	.+44     	; 0x42c <MDIO_voidSetPinValue+0xbe>
 400:	d0 c0       	rjmp	.+416    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_pinID);
 402:	ab e3       	ldi	r26, 0x3B	; 59
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	eb e3       	ldi	r30, 0x3B	; 59
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	48 2f       	mov	r20, r24
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 2e       	mov	r0, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <MDIO_voidSetPinValue+0xb2>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <MDIO_voidSetPinValue+0xae>
 424:	80 95       	com	r24
 426:	84 23       	and	r24, r20
 428:	8c 93       	st	X, r24
 42a:	bb c0       	rjmp	.+374    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_pinID);
 42c:	ab e3       	ldi	r26, 0x3B	; 59
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	eb e3       	ldi	r30, 0x3B	; 59
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <MDIO_voidSetPinValue+0xdc>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <MDIO_voidSetPinValue+0xd8>
 44e:	84 2b       	or	r24, r20
 450:	8c 93       	st	X, r24
 452:	a7 c0       	rjmp	.+334    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_pinValue)
 454:	8b 81       	ldd	r24, Y+3	; 0x03
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	39 87       	std	Y+9, r19	; 0x09
 45c:	28 87       	std	Y+8, r18	; 0x08
 45e:	88 85       	ldd	r24, Y+8	; 0x08
 460:	99 85       	ldd	r25, Y+9	; 0x09
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	31 f0       	breq	.+12     	; 0x472 <MDIO_voidSetPinValue+0x104>
 466:	28 85       	ldd	r18, Y+8	; 0x08
 468:	39 85       	ldd	r19, Y+9	; 0x09
 46a:	21 30       	cpi	r18, 0x01	; 1
 46c:	31 05       	cpc	r19, r1
 46e:	b1 f0       	breq	.+44     	; 0x49c <MDIO_voidSetPinValue+0x12e>
 470:	98 c0       	rjmp	.+304    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_pinID);
 472:	a8 e3       	ldi	r26, 0x38	; 56
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	e8 e3       	ldi	r30, 0x38	; 56
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	48 2f       	mov	r20, r24
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 2e       	mov	r0, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <MDIO_voidSetPinValue+0x122>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <MDIO_voidSetPinValue+0x11e>
 494:	80 95       	com	r24
 496:	84 23       	and	r24, r20
 498:	8c 93       	st	X, r24
 49a:	83 c0       	rjmp	.+262    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_pinID);
 49c:	a8 e3       	ldi	r26, 0x38	; 56
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	e8 e3       	ldi	r30, 0x38	; 56
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	48 2f       	mov	r20, r24
 4a8:	8a 81       	ldd	r24, Y+2	; 0x02
 4aa:	28 2f       	mov	r18, r24
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 2e       	mov	r0, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <MDIO_voidSetPinValue+0x14c>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <MDIO_voidSetPinValue+0x148>
 4be:	84 2b       	or	r24, r20
 4c0:	8c 93       	st	X, r24
 4c2:	6f c0       	rjmp	.+222    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_pinValue)
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	3f 83       	std	Y+7, r19	; 0x07
 4cc:	2e 83       	std	Y+6, r18	; 0x06
 4ce:	8e 81       	ldd	r24, Y+6	; 0x06
 4d0:	9f 81       	ldd	r25, Y+7	; 0x07
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	31 f0       	breq	.+12     	; 0x4e2 <MDIO_voidSetPinValue+0x174>
 4d6:	2e 81       	ldd	r18, Y+6	; 0x06
 4d8:	3f 81       	ldd	r19, Y+7	; 0x07
 4da:	21 30       	cpi	r18, 0x01	; 1
 4dc:	31 05       	cpc	r19, r1
 4de:	b1 f0       	breq	.+44     	; 0x50c <MDIO_voidSetPinValue+0x19e>
 4e0:	60 c0       	rjmp	.+192    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_pinID);
 4e2:	a5 e3       	ldi	r26, 0x35	; 53
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e5 e3       	ldi	r30, 0x35	; 53
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	48 2f       	mov	r20, r24
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 2e       	mov	r0, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <MDIO_voidSetPinValue+0x192>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <MDIO_voidSetPinValue+0x18e>
 504:	80 95       	com	r24
 506:	84 23       	and	r24, r20
 508:	8c 93       	st	X, r24
 50a:	4b c0       	rjmp	.+150    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_pinID);
 50c:	a5 e3       	ldi	r26, 0x35	; 53
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	e5 e3       	ldi	r30, 0x35	; 53
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	48 2f       	mov	r20, r24
 518:	8a 81       	ldd	r24, Y+2	; 0x02
 51a:	28 2f       	mov	r18, r24
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 2e       	mov	r0, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <MDIO_voidSetPinValue+0x1bc>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	0a 94       	dec	r0
 52c:	e2 f7       	brpl	.-8      	; 0x526 <MDIO_voidSetPinValue+0x1b8>
 52e:	84 2b       	or	r24, r20
 530:	8c 93       	st	X, r24
 532:	37 c0       	rjmp	.+110    	; 0x5a2 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_pinValue)
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	28 2f       	mov	r18, r24
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	3d 83       	std	Y+5, r19	; 0x05
 53c:	2c 83       	std	Y+4, r18	; 0x04
 53e:	8c 81       	ldd	r24, Y+4	; 0x04
 540:	9d 81       	ldd	r25, Y+5	; 0x05
 542:	00 97       	sbiw	r24, 0x00	; 0
 544:	31 f0       	breq	.+12     	; 0x552 <MDIO_voidSetPinValue+0x1e4>
 546:	2c 81       	ldd	r18, Y+4	; 0x04
 548:	3d 81       	ldd	r19, Y+5	; 0x05
 54a:	21 30       	cpi	r18, 0x01	; 1
 54c:	31 05       	cpc	r19, r1
 54e:	b1 f0       	breq	.+44     	; 0x57c <MDIO_voidSetPinValue+0x20e>
 550:	28 c0       	rjmp	.+80     	; 0x5a2 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_pinID);
 552:	a2 e3       	ldi	r26, 0x32	; 50
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e2 e3       	ldi	r30, 0x32	; 50
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	48 2f       	mov	r20, r24
 55e:	8a 81       	ldd	r24, Y+2	; 0x02
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 2e       	mov	r0, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <MDIO_voidSetPinValue+0x202>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <MDIO_voidSetPinValue+0x1fe>
 574:	80 95       	com	r24
 576:	84 23       	and	r24, r20
 578:	8c 93       	st	X, r24
 57a:	13 c0       	rjmp	.+38     	; 0x5a2 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_pinID);
 57c:	a2 e3       	ldi	r26, 0x32	; 50
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	e2 e3       	ldi	r30, 0x32	; 50
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	48 2f       	mov	r20, r24
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	28 2f       	mov	r18, r24
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 2e       	mov	r0, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <MDIO_voidSetPinValue+0x22c>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	0a 94       	dec	r0
 59c:	e2 f7       	brpl	.-8      	; 0x596 <MDIO_voidSetPinValue+0x228>
 59e:	84 2b       	or	r24, r20
 5a0:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
 5a2:	2d 96       	adiw	r28, 0x0d	; 13
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	cf 91       	pop	r28
 5b0:	df 91       	pop	r29
 5b2:	08 95       	ret

000005b4 <MDIO_getPinValue>:




DIO_VALUE_e MDIO_getPinValue(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
 5b4:	df 93       	push	r29
 5b6:	cf 93       	push	r28
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <MDIO_getPinValue+0x6>
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <MDIO_getPinValue+0x8>
 5bc:	0f 92       	push	r0
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	8a 83       	std	Y+2, r24	; 0x02
 5c4:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;

	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	84 30       	cpi	r24, 0x04	; 4
 5ca:	08 f0       	brcs	.+2      	; 0x5ce <MDIO_getPinValue+0x1a>
 5cc:	6b c0       	rjmp	.+214    	; 0x6a4 <MDIO_getPinValue+0xf0>
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	88 30       	cpi	r24, 0x08	; 8
 5d2:	08 f0       	brcs	.+2      	; 0x5d6 <MDIO_getPinValue+0x22>
 5d4:	67 c0       	rjmp	.+206    	; 0x6a4 <MDIO_getPinValue+0xf0>
	{
		switch (A_portID)
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	28 2f       	mov	r18, r24
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	3d 83       	std	Y+5, r19	; 0x05
 5de:	2c 83       	std	Y+4, r18	; 0x04
 5e0:	4c 81       	ldd	r20, Y+4	; 0x04
 5e2:	5d 81       	ldd	r21, Y+5	; 0x05
 5e4:	41 30       	cpi	r20, 0x01	; 1
 5e6:	51 05       	cpc	r21, r1
 5e8:	41 f1       	breq	.+80     	; 0x63a <MDIO_getPinValue+0x86>
 5ea:	8c 81       	ldd	r24, Y+4	; 0x04
 5ec:	9d 81       	ldd	r25, Y+5	; 0x05
 5ee:	82 30       	cpi	r24, 0x02	; 2
 5f0:	91 05       	cpc	r25, r1
 5f2:	34 f4       	brge	.+12     	; 0x600 <MDIO_getPinValue+0x4c>
 5f4:	2c 81       	ldd	r18, Y+4	; 0x04
 5f6:	3d 81       	ldd	r19, Y+5	; 0x05
 5f8:	21 15       	cp	r18, r1
 5fa:	31 05       	cpc	r19, r1
 5fc:	61 f0       	breq	.+24     	; 0x616 <MDIO_getPinValue+0x62>
 5fe:	52 c0       	rjmp	.+164    	; 0x6a4 <MDIO_getPinValue+0xf0>
 600:	4c 81       	ldd	r20, Y+4	; 0x04
 602:	5d 81       	ldd	r21, Y+5	; 0x05
 604:	42 30       	cpi	r20, 0x02	; 2
 606:	51 05       	cpc	r21, r1
 608:	51 f1       	breq	.+84     	; 0x65e <MDIO_getPinValue+0xaa>
 60a:	8c 81       	ldd	r24, Y+4	; 0x04
 60c:	9d 81       	ldd	r25, Y+5	; 0x05
 60e:	83 30       	cpi	r24, 0x03	; 3
 610:	91 05       	cpc	r25, r1
 612:	b9 f1       	breq	.+110    	; 0x682 <MDIO_getPinValue+0xce>
 614:	47 c0       	rjmp	.+142    	; 0x6a4 <MDIO_getPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
 616:	e9 e3       	ldi	r30, 0x39	; 57
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	8b 81       	ldd	r24, Y+3	; 0x03
 622:	88 2f       	mov	r24, r24
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	a9 01       	movw	r20, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <MDIO_getPinValue+0x7a>
 62a:	55 95       	asr	r21
 62c:	47 95       	ror	r20
 62e:	8a 95       	dec	r24
 630:	e2 f7       	brpl	.-8      	; 0x62a <MDIO_getPinValue+0x76>
 632:	ca 01       	movw	r24, r20
 634:	81 70       	andi	r24, 0x01	; 1
 636:	89 83       	std	Y+1, r24	; 0x01
 638:	35 c0       	rjmp	.+106    	; 0x6a4 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
 63a:	e6 e3       	ldi	r30, 0x36	; 54
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	88 2f       	mov	r24, r24
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	a9 01       	movw	r20, r18
 64c:	02 c0       	rjmp	.+4      	; 0x652 <MDIO_getPinValue+0x9e>
 64e:	55 95       	asr	r21
 650:	47 95       	ror	r20
 652:	8a 95       	dec	r24
 654:	e2 f7       	brpl	.-8      	; 0x64e <MDIO_getPinValue+0x9a>
 656:	ca 01       	movw	r24, r20
 658:	81 70       	andi	r24, 0x01	; 1
 65a:	89 83       	std	Y+1, r24	; 0x01
 65c:	23 c0       	rjmp	.+70     	; 0x6a4 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
 65e:	e3 e3       	ldi	r30, 0x33	; 51
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	88 2f       	mov	r24, r24
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	a9 01       	movw	r20, r18
 670:	02 c0       	rjmp	.+4      	; 0x676 <MDIO_getPinValue+0xc2>
 672:	55 95       	asr	r21
 674:	47 95       	ror	r20
 676:	8a 95       	dec	r24
 678:	e2 f7       	brpl	.-8      	; 0x672 <MDIO_getPinValue+0xbe>
 67a:	ca 01       	movw	r24, r20
 67c:	81 70       	andi	r24, 0x01	; 1
 67e:	89 83       	std	Y+1, r24	; 0x01
 680:	11 c0       	rjmp	.+34     	; 0x6a4 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
 682:	e0 e3       	ldi	r30, 0x30	; 48
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	80 81       	ld	r24, Z
 688:	28 2f       	mov	r18, r24
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	8b 81       	ldd	r24, Y+3	; 0x03
 68e:	88 2f       	mov	r24, r24
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	a9 01       	movw	r20, r18
 694:	02 c0       	rjmp	.+4      	; 0x69a <MDIO_getPinValue+0xe6>
 696:	55 95       	asr	r21
 698:	47 95       	ror	r20
 69a:	8a 95       	dec	r24
 69c:	e2 f7       	brpl	.-8      	; 0x696 <MDIO_getPinValue+0xe2>
 69e:	ca 01       	movw	r24, r20
 6a0:	81 70       	andi	r24, 0x01	; 1
 6a2:	89 83       	std	Y+1, r24	; 0x01
	{
		// Do Nothing
	}


	return local_PinValue;
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
}
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	0f 90       	pop	r0
 6b0:	cf 91       	pop	r28
 6b2:	df 91       	pop	r29
 6b4:	08 95       	ret

000006b6 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
 6b6:	df 93       	push	r29
 6b8:	cf 93       	push	r28
 6ba:	00 d0       	rcall	.+0      	; 0x6bc <MDIO_voidTogglePinValue+0x6>
 6bc:	00 d0       	rcall	.+0      	; 0x6be <MDIO_voidTogglePinValue+0x8>
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
 6c2:	89 83       	std	Y+1, r24	; 0x01
 6c4:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= PIN7) )
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	84 30       	cpi	r24, 0x04	; 4
 6ca:	08 f0       	brcs	.+2      	; 0x6ce <MDIO_voidTogglePinValue+0x18>
 6cc:	72 c0       	rjmp	.+228    	; 0x7b2 <MDIO_voidTogglePinValue+0xfc>
 6ce:	8a 81       	ldd	r24, Y+2	; 0x02
 6d0:	88 30       	cpi	r24, 0x08	; 8
 6d2:	08 f0       	brcs	.+2      	; 0x6d6 <MDIO_voidTogglePinValue+0x20>
 6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_portID)
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	28 2f       	mov	r18, r24
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	3c 83       	std	Y+4, r19	; 0x04
 6de:	2b 83       	std	Y+3, r18	; 0x03
 6e0:	8b 81       	ldd	r24, Y+3	; 0x03
 6e2:	9c 81       	ldd	r25, Y+4	; 0x04
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	91 05       	cpc	r25, r1
 6e8:	49 f1       	breq	.+82     	; 0x73c <MDIO_voidTogglePinValue+0x86>
 6ea:	2b 81       	ldd	r18, Y+3	; 0x03
 6ec:	3c 81       	ldd	r19, Y+4	; 0x04
 6ee:	22 30       	cpi	r18, 0x02	; 2
 6f0:	31 05       	cpc	r19, r1
 6f2:	2c f4       	brge	.+10     	; 0x6fe <MDIO_voidTogglePinValue+0x48>
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	9c 81       	ldd	r25, Y+4	; 0x04
 6f8:	00 97       	sbiw	r24, 0x00	; 0
 6fa:	61 f0       	breq	.+24     	; 0x714 <MDIO_voidTogglePinValue+0x5e>
 6fc:	5a c0       	rjmp	.+180    	; 0x7b2 <MDIO_voidTogglePinValue+0xfc>
 6fe:	2b 81       	ldd	r18, Y+3	; 0x03
 700:	3c 81       	ldd	r19, Y+4	; 0x04
 702:	22 30       	cpi	r18, 0x02	; 2
 704:	31 05       	cpc	r19, r1
 706:	71 f1       	breq	.+92     	; 0x764 <MDIO_voidTogglePinValue+0xae>
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	9c 81       	ldd	r25, Y+4	; 0x04
 70c:	83 30       	cpi	r24, 0x03	; 3
 70e:	91 05       	cpc	r25, r1
 710:	e9 f1       	breq	.+122    	; 0x78c <MDIO_voidTogglePinValue+0xd6>
 712:	4f c0       	rjmp	.+158    	; 0x7b2 <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
 714:	ab e3       	ldi	r26, 0x3B	; 59
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	eb e3       	ldi	r30, 0x3B	; 59
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	48 2f       	mov	r20, r24
 720:	8a 81       	ldd	r24, Y+2	; 0x02
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 2e       	mov	r0, r18
 72c:	02 c0       	rjmp	.+4      	; 0x732 <MDIO_voidTogglePinValue+0x7c>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	0a 94       	dec	r0
 734:	e2 f7       	brpl	.-8      	; 0x72e <MDIO_voidTogglePinValue+0x78>
 736:	84 27       	eor	r24, r20
 738:	8c 93       	st	X, r24
 73a:	3b c0       	rjmp	.+118    	; 0x7b2 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
 73c:	a8 e3       	ldi	r26, 0x38	; 56
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	e8 e3       	ldi	r30, 0x38	; 56
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	48 2f       	mov	r20, r24
 748:	8a 81       	ldd	r24, Y+2	; 0x02
 74a:	28 2f       	mov	r18, r24
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 2e       	mov	r0, r18
 754:	02 c0       	rjmp	.+4      	; 0x75a <MDIO_voidTogglePinValue+0xa4>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	0a 94       	dec	r0
 75c:	e2 f7       	brpl	.-8      	; 0x756 <MDIO_voidTogglePinValue+0xa0>
 75e:	84 27       	eor	r24, r20
 760:	8c 93       	st	X, r24
 762:	27 c0       	rjmp	.+78     	; 0x7b2 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
 764:	a5 e3       	ldi	r26, 0x35	; 53
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	e5 e3       	ldi	r30, 0x35	; 53
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	48 2f       	mov	r20, r24
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	28 2f       	mov	r18, r24
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 2e       	mov	r0, r18
 77c:	02 c0       	rjmp	.+4      	; 0x782 <MDIO_voidTogglePinValue+0xcc>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <MDIO_voidTogglePinValue+0xc8>
 786:	84 27       	eor	r24, r20
 788:	8c 93       	st	X, r24
 78a:	13 c0       	rjmp	.+38     	; 0x7b2 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
 78c:	a2 e3       	ldi	r26, 0x32	; 50
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	e2 e3       	ldi	r30, 0x32	; 50
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	48 2f       	mov	r20, r24
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 2e       	mov	r0, r18
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <MDIO_voidTogglePinValue+0xf4>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	0a 94       	dec	r0
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <MDIO_voidTogglePinValue+0xf0>
 7ae:	84 27       	eor	r24, r20
 7b0:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	cf 91       	pop	r28
 7bc:	df 91       	pop	r29
 7be:	08 95       	ret

000007c0 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (DIO_PORT_e A_portID, u8 A_u8PortDirection)
{
 7c0:	df 93       	push	r29
 7c2:	cf 93       	push	r28
 7c4:	00 d0       	rcall	.+0      	; 0x7c6 <MDIO_voidSetPortDirection+0x6>
 7c6:	00 d0       	rcall	.+0      	; 0x7c8 <MDIO_voidSetPortDirection+0x8>
 7c8:	cd b7       	in	r28, 0x3d	; 61
 7ca:	de b7       	in	r29, 0x3e	; 62
 7cc:	89 83       	std	Y+1, r24	; 0x01
 7ce:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	84 30       	cpi	r24, 0x04	; 4
 7d4:	90 f5       	brcc	.+100    	; 0x83a <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_portID)
 7d6:	89 81       	ldd	r24, Y+1	; 0x01
 7d8:	28 2f       	mov	r18, r24
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	3c 83       	std	Y+4, r19	; 0x04
 7de:	2b 83       	std	Y+3, r18	; 0x03
 7e0:	8b 81       	ldd	r24, Y+3	; 0x03
 7e2:	9c 81       	ldd	r25, Y+4	; 0x04
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	91 05       	cpc	r25, r1
 7e8:	d1 f0       	breq	.+52     	; 0x81e <MDIO_voidSetPortDirection+0x5e>
 7ea:	2b 81       	ldd	r18, Y+3	; 0x03
 7ec:	3c 81       	ldd	r19, Y+4	; 0x04
 7ee:	22 30       	cpi	r18, 0x02	; 2
 7f0:	31 05       	cpc	r19, r1
 7f2:	2c f4       	brge	.+10     	; 0x7fe <MDIO_voidSetPortDirection+0x3e>
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	9c 81       	ldd	r25, Y+4	; 0x04
 7f8:	00 97       	sbiw	r24, 0x00	; 0
 7fa:	61 f0       	breq	.+24     	; 0x814 <MDIO_voidSetPortDirection+0x54>
 7fc:	1e c0       	rjmp	.+60     	; 0x83a <MDIO_voidSetPortDirection+0x7a>
 7fe:	2b 81       	ldd	r18, Y+3	; 0x03
 800:	3c 81       	ldd	r19, Y+4	; 0x04
 802:	22 30       	cpi	r18, 0x02	; 2
 804:	31 05       	cpc	r19, r1
 806:	81 f0       	breq	.+32     	; 0x828 <MDIO_voidSetPortDirection+0x68>
 808:	8b 81       	ldd	r24, Y+3	; 0x03
 80a:	9c 81       	ldd	r25, Y+4	; 0x04
 80c:	83 30       	cpi	r24, 0x03	; 3
 80e:	91 05       	cpc	r25, r1
 810:	81 f0       	breq	.+32     	; 0x832 <MDIO_voidSetPortDirection+0x72>
 812:	13 c0       	rjmp	.+38     	; 0x83a <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
 814:	ea e3       	ldi	r30, 0x3A	; 58
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	8a 81       	ldd	r24, Y+2	; 0x02
 81a:	80 83       	st	Z, r24
 81c:	0e c0       	rjmp	.+28     	; 0x83a <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
 81e:	e7 e3       	ldi	r30, 0x37	; 55
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	8a 81       	ldd	r24, Y+2	; 0x02
 824:	80 83       	st	Z, r24
 826:	09 c0       	rjmp	.+18     	; 0x83a <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
 828:	e4 e3       	ldi	r30, 0x34	; 52
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	8a 81       	ldd	r24, Y+2	; 0x02
 82e:	80 83       	st	Z, r24
 830:	04 c0       	rjmp	.+8      	; 0x83a <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
 832:	e1 e3       	ldi	r30, 0x31	; 49
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	8a 81       	ldd	r24, Y+2	; 0x02
 838:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	cf 91       	pop	r28
 844:	df 91       	pop	r29
 846:	08 95       	ret

00000848 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_portID, u8 A_u8PortValue)
{
 848:	df 93       	push	r29
 84a:	cf 93       	push	r28
 84c:	00 d0       	rcall	.+0      	; 0x84e <MDIO_voidSetPortValue+0x6>
 84e:	00 d0       	rcall	.+0      	; 0x850 <MDIO_voidSetPortValue+0x8>
 850:	cd b7       	in	r28, 0x3d	; 61
 852:	de b7       	in	r29, 0x3e	; 62
 854:	89 83       	std	Y+1, r24	; 0x01
 856:	6a 83       	std	Y+2, r22	; 0x02
	// Input Validation
	if ( (A_portID <= DIO_PORTD) )
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	84 30       	cpi	r24, 0x04	; 4
 85c:	90 f5       	brcc	.+100    	; 0x8c2 <__stack+0x63>
	{
		switch (A_portID)
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	28 2f       	mov	r18, r24
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	3c 83       	std	Y+4, r19	; 0x04
 866:	2b 83       	std	Y+3, r18	; 0x03
 868:	8b 81       	ldd	r24, Y+3	; 0x03
 86a:	9c 81       	ldd	r25, Y+4	; 0x04
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	91 05       	cpc	r25, r1
 870:	d1 f0       	breq	.+52     	; 0x8a6 <__stack+0x47>
 872:	2b 81       	ldd	r18, Y+3	; 0x03
 874:	3c 81       	ldd	r19, Y+4	; 0x04
 876:	22 30       	cpi	r18, 0x02	; 2
 878:	31 05       	cpc	r19, r1
 87a:	2c f4       	brge	.+10     	; 0x886 <__stack+0x27>
 87c:	8b 81       	ldd	r24, Y+3	; 0x03
 87e:	9c 81       	ldd	r25, Y+4	; 0x04
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	61 f0       	breq	.+24     	; 0x89c <__stack+0x3d>
 884:	1e c0       	rjmp	.+60     	; 0x8c2 <__stack+0x63>
 886:	2b 81       	ldd	r18, Y+3	; 0x03
 888:	3c 81       	ldd	r19, Y+4	; 0x04
 88a:	22 30       	cpi	r18, 0x02	; 2
 88c:	31 05       	cpc	r19, r1
 88e:	81 f0       	breq	.+32     	; 0x8b0 <__stack+0x51>
 890:	8b 81       	ldd	r24, Y+3	; 0x03
 892:	9c 81       	ldd	r25, Y+4	; 0x04
 894:	83 30       	cpi	r24, 0x03	; 3
 896:	91 05       	cpc	r25, r1
 898:	81 f0       	breq	.+32     	; 0x8ba <__stack+0x5b>
 89a:	13 c0       	rjmp	.+38     	; 0x8c2 <__stack+0x63>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
 89c:	eb e3       	ldi	r30, 0x3B	; 59
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	8a 81       	ldd	r24, Y+2	; 0x02
 8a2:	80 83       	st	Z, r24
 8a4:	0e c0       	rjmp	.+28     	; 0x8c2 <__stack+0x63>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
 8a6:	e8 e3       	ldi	r30, 0x38	; 56
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	8a 81       	ldd	r24, Y+2	; 0x02
 8ac:	80 83       	st	Z, r24
 8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <__stack+0x63>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
 8b0:	e5 e3       	ldi	r30, 0x35	; 53
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	8a 81       	ldd	r24, Y+2	; 0x02
 8b6:	80 83       	st	Z, r24
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <__stack+0x63>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
 8ba:	e2 e3       	ldi	r30, 0x32	; 50
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	8a 81       	ldd	r24, Y+2	; 0x02
 8c0:	80 83       	st	Z, r24
	}
	else
	{
		// Do Nothing
	}
}
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	0f 90       	pop	r0
 8c8:	0f 90       	pop	r0
 8ca:	cf 91       	pop	r28
 8cc:	df 91       	pop	r29
 8ce:	08 95       	ret

000008d0 <MDIO_voidInit>:


void MDIO_voidInit (void)
{
 8d0:	df 93       	push	r29
 8d2:	cf 93       	push	r28
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
 8d8:	ea e3       	ldi	r30, 0x3A	; 58
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	87 e0       	ldi	r24, 0x07	; 7
 8de:	80 83       	st	Z, r24
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
 8e0:	e7 e3       	ldi	r30, 0x37	; 55
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	10 82       	st	Z, r1
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
 8e6:	e4 e3       	ldi	r30, 0x34	; 52
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	10 82       	st	Z, r1
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
 8ec:	e1 e3       	ldi	r30, 0x31	; 49
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	10 82       	st	Z, r1
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	/**********************************************************************/

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
 8f2:	eb e3       	ldi	r30, 0x3B	; 59
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
 8f8:	e8 e3       	ldi	r30, 0x38	; 56
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	10 82       	st	Z, r1
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
 8fe:	e5 e3       	ldi	r30, 0x35	; 53
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
 904:	e2 e3       	ldi	r30, 0x32	; 50
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
 90a:	cf 91       	pop	r28
 90c:	df 91       	pop	r29
 90e:	08 95       	ret

00000910 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_Interface.h"
#include "../Include/MCAL/GI/GI_Private.h"
#include "../Include/MCAL/GI/GI_Cfg.h"

void MGI_voidEnable(void)
{
 910:	df 93       	push	r29
 912:	cf 93       	push	r28
 914:	cd b7       	in	r28, 0x3d	; 61
 916:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , GLOBAL_INTERUPPT_ENABLE_BIT);
 918:	af e5       	ldi	r26, 0x5F	; 95
 91a:	b0 e0       	ldi	r27, 0x00	; 0
 91c:	ef e5       	ldi	r30, 0x5F	; 95
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	80 68       	ori	r24, 0x80	; 128
 924:	8c 93       	st	X, r24
}
 926:	cf 91       	pop	r28
 928:	df 91       	pop	r29
 92a:	08 95       	ret

0000092c <MGI_voidDisable>:

void MGI_voidDisable(void)
{
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	cd b7       	in	r28, 0x3d	; 61
 932:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , GLOBAL_INTERUPPT_ENABLE_BIT);
 934:	af e5       	ldi	r26, 0x5F	; 95
 936:	b0 e0       	ldi	r27, 0x00	; 0
 938:	ef e5       	ldi	r30, 0x5F	; 95
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	80 81       	ld	r24, Z
 93e:	8f 77       	andi	r24, 0x7F	; 127
 940:	8c 93       	st	X, r24
}
 942:	cf 91       	pop	r28
 944:	df 91       	pop	r29
 946:	08 95       	ret

00000948 <HLED_voidTurnLEDOn>:
#include "../Include/HAL/LED/LED_Private.h"
#include "../Include/HAL/LED/LED_cfg.h"


void HLED_voidTurnLEDOn(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
 948:	df 93       	push	r29
 94a:	cf 93       	push	r28
 94c:	00 d0       	rcall	.+0      	; 0x94e <HLED_voidTurnLEDOn+0x6>
 94e:	cd b7       	in	r28, 0x3d	; 61
 950:	de b7       	in	r29, 0x3e	; 62
 952:	89 83       	std	Y+1, r24	; 0x01
 954:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_portID ,A_pinID , DIO_SET);
 956:	89 81       	ldd	r24, Y+1	; 0x01
 958:	6a 81       	ldd	r22, Y+2	; 0x02
 95a:	41 e0       	ldi	r20, 0x01	; 1
 95c:	0e 94 b7 01 	call	0x36e	; 0x36e <MDIO_voidSetPinValue>
}
 960:	0f 90       	pop	r0
 962:	0f 90       	pop	r0
 964:	cf 91       	pop	r28
 966:	df 91       	pop	r29
 968:	08 95       	ret

0000096a <HLED_voidTurnLEDOff>:
void HLED_voidTurnLEDOff(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
 96a:	df 93       	push	r29
 96c:	cf 93       	push	r28
 96e:	00 d0       	rcall	.+0      	; 0x970 <HLED_voidTurnLEDOff+0x6>
 970:	cd b7       	in	r28, 0x3d	; 61
 972:	de b7       	in	r29, 0x3e	; 62
 974:	89 83       	std	Y+1, r24	; 0x01
 976:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_portID ,A_pinID , DIO_RESET);
 978:	89 81       	ldd	r24, Y+1	; 0x01
 97a:	6a 81       	ldd	r22, Y+2	; 0x02
 97c:	40 e0       	ldi	r20, 0x00	; 0
 97e:	0e 94 b7 01 	call	0x36e	; 0x36e <MDIO_voidSetPinValue>
}
 982:	0f 90       	pop	r0
 984:	0f 90       	pop	r0
 986:	cf 91       	pop	r28
 988:	df 91       	pop	r29
 98a:	08 95       	ret

0000098c <HLED_voidToggleLED>:
void HLED_voidToggleLED(DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
 98c:	df 93       	push	r29
 98e:	cf 93       	push	r28
 990:	00 d0       	rcall	.+0      	; 0x992 <HLED_voidToggleLED+0x6>
 992:	cd b7       	in	r28, 0x3d	; 61
 994:	de b7       	in	r29, 0x3e	; 62
 996:	89 83       	std	Y+1, r24	; 0x01
 998:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_portID,A_pinID);
 99a:	89 81       	ldd	r24, Y+1	; 0x01
 99c:	6a 81       	ldd	r22, Y+2	; 0x02
 99e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_voidTogglePinValue>
}
 9a2:	0f 90       	pop	r0
 9a4:	0f 90       	pop	r0
 9a6:	cf 91       	pop	r28
 9a8:	df 91       	pop	r29
 9aa:	08 95       	ret

000009ac <SRTOS_voidInit>:

RTOS_TCB Global_RTOSArrOfTasks[RTO_u8_MAX_NUMBER_TASKS];


void SRTOS_voidInit(void)
{
 9ac:	df 93       	push	r29
 9ae:	cf 93       	push	r28
 9b0:	cd b7       	in	r28, 0x3d	; 61
 9b2:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_voidSetCTCCallback(SRTOS_voidScheduler);
 9b4:	88 e5       	ldi	r24, 0x58	; 88
 9b6:	95 e0       	ldi	r25, 0x05	; 5
 9b8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <MTIMER0_voidSetCTCCallback>
	MTIMER0_voidInit();
 9bc:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <MTIMER0_voidInit>
}
 9c0:	cf 91       	pop	r28
 9c2:	df 91       	pop	r29
 9c4:	08 95       	ret

000009c6 <SRTOS_voidInitArrayFunctions>:

void SRTOS_voidInitArrayFunctions(void)
{
 9c6:	df 93       	push	r29
 9c8:	cf 93       	push	r28
 9ca:	0f 92       	push	r0
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Counter=0;
 9d0:	19 82       	std	Y+1, r1	; 0x01
 9d2:	12 c0       	rjmp	.+36     	; 0x9f8 <SRTOS_voidInitArrayFunctions+0x32>
	for ( ; local_u8Counter < RTO_u8_MAX_NUMBER_TASKS ; local_u8Counter++)
	{
		Global_RTOSArrOfTasks[local_u8Counter].pf = NULL;
 9d4:	89 81       	ldd	r24, Y+1	; 0x01
 9d6:	28 2f       	mov	r18, r24
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	c9 01       	movw	r24, r18
 9dc:	88 0f       	add	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	82 0f       	add	r24, r18
 9e2:	93 1f       	adc	r25, r19
 9e4:	88 0f       	add	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	fc 01       	movw	r30, r24
 9ea:	e7 59       	subi	r30, 0x97	; 151
 9ec:	ff 4f       	sbci	r31, 0xFF	; 255
 9ee:	11 82       	std	Z+1, r1	; 0x01
 9f0:	10 82       	st	Z, r1
}

void SRTOS_voidInitArrayFunctions(void)
{
	u8 local_u8Counter=0;
	for ( ; local_u8Counter < RTO_u8_MAX_NUMBER_TASKS ; local_u8Counter++)
 9f2:	89 81       	ldd	r24, Y+1	; 0x01
 9f4:	8f 5f       	subi	r24, 0xFF	; 255
 9f6:	89 83       	std	Y+1, r24	; 0x01
 9f8:	89 81       	ldd	r24, Y+1	; 0x01
 9fa:	83 30       	cpi	r24, 0x03	; 3
 9fc:	58 f3       	brcs	.-42     	; 0x9d4 <SRTOS_voidInitArrayFunctions+0xe>
	{
		Global_RTOSArrOfTasks[local_u8Counter].pf = NULL;
	}
}
 9fe:	0f 90       	pop	r0
 a00:	cf 91       	pop	r28
 a02:	df 91       	pop	r29
 a04:	08 95       	ret

00000a06 <SRTOS_voidCreateTask>:

void SRTOS_voidCreateTask (u8 A_u8priority, u16 A_u16Periodicity, u16 A_u16FirstDelay, void (*pf)(void))
{
 a06:	df 93       	push	r29
 a08:	cf 93       	push	r28
 a0a:	cd b7       	in	r28, 0x3d	; 61
 a0c:	de b7       	in	r29, 0x3e	; 62
 a0e:	27 97       	sbiw	r28, 0x07	; 7
 a10:	0f b6       	in	r0, 0x3f	; 63
 a12:	f8 94       	cli
 a14:	de bf       	out	0x3e, r29	; 62
 a16:	0f be       	out	0x3f, r0	; 63
 a18:	cd bf       	out	0x3d, r28	; 61
 a1a:	89 83       	std	Y+1, r24	; 0x01
 a1c:	7b 83       	std	Y+3, r23	; 0x03
 a1e:	6a 83       	std	Y+2, r22	; 0x02
 a20:	5d 83       	std	Y+5, r21	; 0x05
 a22:	4c 83       	std	Y+4, r20	; 0x04
 a24:	3f 83       	std	Y+7, r19	; 0x07
 a26:	2e 83       	std	Y+6, r18	; 0x06
	if ((A_u8priority < RTO_u8_MAX_NUMBER_TASKS) && (pf != NULL))
 a28:	89 81       	ldd	r24, Y+1	; 0x01
 a2a:	83 30       	cpi	r24, 0x03	; 3
 a2c:	c0 f5       	brcc	.+112    	; 0xa9e <SRTOS_voidCreateTask+0x98>
 a2e:	8e 81       	ldd	r24, Y+6	; 0x06
 a30:	9f 81       	ldd	r25, Y+7	; 0x07
 a32:	00 97       	sbiw	r24, 0x00	; 0
 a34:	a1 f1       	breq	.+104    	; 0xa9e <SRTOS_voidCreateTask+0x98>
	{
		Global_RTOSArrOfTasks[A_u8priority].FirstDelay  = A_u16FirstDelay;
 a36:	89 81       	ldd	r24, Y+1	; 0x01
 a38:	28 2f       	mov	r18, r24
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	c9 01       	movw	r24, r18
 a3e:	88 0f       	add	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	82 0f       	add	r24, r18
 a44:	93 1f       	adc	r25, r19
 a46:	88 0f       	add	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	fc 01       	movw	r30, r24
 a4c:	eb 59       	subi	r30, 0x9B	; 155
 a4e:	ff 4f       	sbci	r31, 0xFF	; 255
 a50:	8c 81       	ldd	r24, Y+4	; 0x04
 a52:	9d 81       	ldd	r25, Y+5	; 0x05
 a54:	91 83       	std	Z+1, r25	; 0x01
 a56:	80 83       	st	Z, r24
		Global_RTOSArrOfTasks[A_u8priority].Periodicity = A_u16Periodicity;
 a58:	89 81       	ldd	r24, Y+1	; 0x01
 a5a:	28 2f       	mov	r18, r24
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	c9 01       	movw	r24, r18
 a60:	88 0f       	add	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	82 0f       	add	r24, r18
 a66:	93 1f       	adc	r25, r19
 a68:	01 96       	adiw	r24, 0x01	; 1
 a6a:	88 0f       	add	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	fc 01       	movw	r30, r24
 a70:	eb 59       	subi	r30, 0x9B	; 155
 a72:	ff 4f       	sbci	r31, 0xFF	; 255
 a74:	8a 81       	ldd	r24, Y+2	; 0x02
 a76:	9b 81       	ldd	r25, Y+3	; 0x03
 a78:	91 83       	std	Z+1, r25	; 0x01
 a7a:	80 83       	st	Z, r24
		Global_RTOSArrOfTasks[A_u8priority].pf          = pf;
 a7c:	89 81       	ldd	r24, Y+1	; 0x01
 a7e:	28 2f       	mov	r18, r24
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	c9 01       	movw	r24, r18
 a84:	88 0f       	add	r24, r24
 a86:	99 1f       	adc	r25, r25
 a88:	82 0f       	add	r24, r18
 a8a:	93 1f       	adc	r25, r19
 a8c:	88 0f       	add	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	fc 01       	movw	r30, r24
 a92:	e7 59       	subi	r30, 0x97	; 151
 a94:	ff 4f       	sbci	r31, 0xFF	; 255
 a96:	8e 81       	ldd	r24, Y+6	; 0x06
 a98:	9f 81       	ldd	r25, Y+7	; 0x07
 a9a:	91 83       	std	Z+1, r25	; 0x01
 a9c:	80 83       	st	Z, r24
	}
}
 a9e:	27 96       	adiw	r28, 0x07	; 7
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	f8 94       	cli
 aa4:	de bf       	out	0x3e, r29	; 62
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	cd bf       	out	0x3d, r28	; 61
 aaa:	cf 91       	pop	r28
 aac:	df 91       	pop	r29
 aae:	08 95       	ret

00000ab0 <SRTOS_voidScheduler>:

void SRTOS_voidScheduler (void)
{
 ab0:	df 93       	push	r29
 ab2:	cf 93       	push	r28
 ab4:	0f 92       	push	r0
 ab6:	cd b7       	in	r28, 0x3d	; 61
 ab8:	de b7       	in	r29, 0x3e	; 62
	u8 static counter=0;
	counter++;
 aba:	80 91 60 00 	lds	r24, 0x0060
 abe:	8f 5f       	subi	r24, 0xFF	; 255
 ac0:	80 93 60 00 	sts	0x0060, r24

	if (counter == 5)
 ac4:	80 91 60 00 	lds	r24, 0x0060
 ac8:	85 30       	cpi	r24, 0x05	; 5
 aca:	09 f0       	breq	.+2      	; 0xace <SRTOS_voidScheduler+0x1e>
 acc:	80 c0       	rjmp	.+256    	; 0xbce <SRTOS_voidScheduler+0x11e>
	{
		counter = 0;
 ace:	10 92 60 00 	sts	0x0060, r1
		u8 local_u8Counter=0;
 ad2:	19 82       	std	Y+1, r1	; 0x01
 ad4:	78 c0       	rjmp	.+240    	; 0xbc6 <SRTOS_voidScheduler+0x116>
		for ( ; local_u8Counter < RTO_u8_MAX_NUMBER_TASKS ; local_u8Counter++)
		{
			if (Global_RTOSArrOfTasks[local_u8Counter].FirstDelay == 0)
 ad6:	89 81       	ldd	r24, Y+1	; 0x01
 ad8:	28 2f       	mov	r18, r24
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	c9 01       	movw	r24, r18
 ade:	88 0f       	add	r24, r24
 ae0:	99 1f       	adc	r25, r25
 ae2:	82 0f       	add	r24, r18
 ae4:	93 1f       	adc	r25, r19
 ae6:	88 0f       	add	r24, r24
 ae8:	99 1f       	adc	r25, r25
 aea:	fc 01       	movw	r30, r24
 aec:	eb 59       	subi	r30, 0x9B	; 155
 aee:	ff 4f       	sbci	r31, 0xFF	; 255
 af0:	80 81       	ld	r24, Z
 af2:	91 81       	ldd	r25, Z+1	; 0x01
 af4:	00 97       	sbiw	r24, 0x00	; 0
 af6:	09 f0       	breq	.+2      	; 0xafa <SRTOS_voidScheduler+0x4a>
 af8:	45 c0       	rjmp	.+138    	; 0xb84 <SRTOS_voidScheduler+0xd4>
			{
				if (Global_RTOSArrOfTasks[local_u8Counter].pf != NULL)
 afa:	89 81       	ldd	r24, Y+1	; 0x01
 afc:	28 2f       	mov	r18, r24
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	c9 01       	movw	r24, r18
 b02:	88 0f       	add	r24, r24
 b04:	99 1f       	adc	r25, r25
 b06:	82 0f       	add	r24, r18
 b08:	93 1f       	adc	r25, r19
 b0a:	88 0f       	add	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	fc 01       	movw	r30, r24
 b10:	e7 59       	subi	r30, 0x97	; 151
 b12:	ff 4f       	sbci	r31, 0xFF	; 255
 b14:	80 81       	ld	r24, Z
 b16:	91 81       	ldd	r25, Z+1	; 0x01
 b18:	00 97       	sbiw	r24, 0x00	; 0
 b1a:	89 f0       	breq	.+34     	; 0xb3e <SRTOS_voidScheduler+0x8e>
				{
					Global_RTOSArrOfTasks[local_u8Counter].pf();
 b1c:	89 81       	ldd	r24, Y+1	; 0x01
 b1e:	28 2f       	mov	r18, r24
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	c9 01       	movw	r24, r18
 b24:	88 0f       	add	r24, r24
 b26:	99 1f       	adc	r25, r25
 b28:	82 0f       	add	r24, r18
 b2a:	93 1f       	adc	r25, r19
 b2c:	88 0f       	add	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	fc 01       	movw	r30, r24
 b32:	e7 59       	subi	r30, 0x97	; 151
 b34:	ff 4f       	sbci	r31, 0xFF	; 255
 b36:	01 90       	ld	r0, Z+
 b38:	f0 81       	ld	r31, Z
 b3a:	e0 2d       	mov	r30, r0
 b3c:	09 95       	icall
				}
				Global_RTOSArrOfTasks[local_u8Counter].FirstDelay = Global_RTOSArrOfTasks[local_u8Counter].Periodicity - 1;
 b3e:	89 81       	ldd	r24, Y+1	; 0x01
 b40:	48 2f       	mov	r20, r24
 b42:	50 e0       	ldi	r21, 0x00	; 0
 b44:	89 81       	ldd	r24, Y+1	; 0x01
 b46:	28 2f       	mov	r18, r24
 b48:	30 e0       	ldi	r19, 0x00	; 0
 b4a:	c9 01       	movw	r24, r18
 b4c:	88 0f       	add	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	82 0f       	add	r24, r18
 b52:	93 1f       	adc	r25, r19
 b54:	01 96       	adiw	r24, 0x01	; 1
 b56:	88 0f       	add	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	fc 01       	movw	r30, r24
 b5c:	eb 59       	subi	r30, 0x9B	; 155
 b5e:	ff 4f       	sbci	r31, 0xFF	; 255
 b60:	80 81       	ld	r24, Z
 b62:	91 81       	ldd	r25, Z+1	; 0x01
 b64:	9c 01       	movw	r18, r24
 b66:	21 50       	subi	r18, 0x01	; 1
 b68:	30 40       	sbci	r19, 0x00	; 0
 b6a:	ca 01       	movw	r24, r20
 b6c:	88 0f       	add	r24, r24
 b6e:	99 1f       	adc	r25, r25
 b70:	84 0f       	add	r24, r20
 b72:	95 1f       	adc	r25, r21
 b74:	88 0f       	add	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	fc 01       	movw	r30, r24
 b7a:	eb 59       	subi	r30, 0x9B	; 155
 b7c:	ff 4f       	sbci	r31, 0xFF	; 255
 b7e:	31 83       	std	Z+1, r19	; 0x01
 b80:	20 83       	st	Z, r18
 b82:	1e c0       	rjmp	.+60     	; 0xbc0 <SRTOS_voidScheduler+0x110>
			}
			else
			{
				Global_RTOSArrOfTasks[local_u8Counter].FirstDelay--;
 b84:	89 81       	ldd	r24, Y+1	; 0x01
 b86:	28 2f       	mov	r18, r24
 b88:	30 e0       	ldi	r19, 0x00	; 0
 b8a:	c9 01       	movw	r24, r18
 b8c:	88 0f       	add	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	82 0f       	add	r24, r18
 b92:	93 1f       	adc	r25, r19
 b94:	88 0f       	add	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	fc 01       	movw	r30, r24
 b9a:	eb 59       	subi	r30, 0x9B	; 155
 b9c:	ff 4f       	sbci	r31, 0xFF	; 255
 b9e:	80 81       	ld	r24, Z
 ba0:	91 81       	ldd	r25, Z+1	; 0x01
 ba2:	ac 01       	movw	r20, r24
 ba4:	41 50       	subi	r20, 0x01	; 1
 ba6:	50 40       	sbci	r21, 0x00	; 0
 ba8:	c9 01       	movw	r24, r18
 baa:	88 0f       	add	r24, r24
 bac:	99 1f       	adc	r25, r25
 bae:	82 0f       	add	r24, r18
 bb0:	93 1f       	adc	r25, r19
 bb2:	88 0f       	add	r24, r24
 bb4:	99 1f       	adc	r25, r25
 bb6:	fc 01       	movw	r30, r24
 bb8:	eb 59       	subi	r30, 0x9B	; 155
 bba:	ff 4f       	sbci	r31, 0xFF	; 255
 bbc:	51 83       	std	Z+1, r21	; 0x01
 bbe:	40 83       	st	Z, r20

	if (counter == 5)
	{
		counter = 0;
		u8 local_u8Counter=0;
		for ( ; local_u8Counter < RTO_u8_MAX_NUMBER_TASKS ; local_u8Counter++)
 bc0:	89 81       	ldd	r24, Y+1	; 0x01
 bc2:	8f 5f       	subi	r24, 0xFF	; 255
 bc4:	89 83       	std	Y+1, r24	; 0x01
 bc6:	89 81       	ldd	r24, Y+1	; 0x01
 bc8:	83 30       	cpi	r24, 0x03	; 3
 bca:	08 f4       	brcc	.+2      	; 0xbce <SRTOS_voidScheduler+0x11e>
 bcc:	84 cf       	rjmp	.-248    	; 0xad6 <SRTOS_voidScheduler+0x26>
			{
				Global_RTOSArrOfTasks[local_u8Counter].FirstDelay--;
			}
		}
	}
}
 bce:	0f 90       	pop	r0
 bd0:	cf 91       	pop	r28
 bd2:	df 91       	pop	r29
 bd4:	08 95       	ret

00000bd6 <MTIMER0_voidInit>:

void (*TIMER0_OVF_CALLBACK)(void) = NULL;
void (*TIMER0_CTC_CALLBACK)(void) = NULL;

void MTIMER0_voidInit (void)
{
 bd6:	df 93       	push	r29
 bd8:	cf 93       	push	r28
 bda:	cd b7       	in	r28, 0x3d	; 61
 bdc:	de b7       	in	r29, 0x3e	; 62

	#elif TIMER0_MODE == PHASE_CORRECT_MODE

	#elif TIMER0_MODE == CTC_MODE
		// Set Wave Generation Mode to CTC Mode
		SET_BIT(TCCR0,3);
 bde:	a3 e5       	ldi	r26, 0x53	; 83
 be0:	b0 e0       	ldi	r27, 0x00	; 0
 be2:	e3 e5       	ldi	r30, 0x53	; 83
 be4:	f0 e0       	ldi	r31, 0x00	; 0
 be6:	80 81       	ld	r24, Z
 be8:	88 60       	ori	r24, 0x08	; 8
 bea:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,6);
 bec:	a3 e5       	ldi	r26, 0x53	; 83
 bee:	b0 e0       	ldi	r27, 0x00	; 0
 bf0:	e3 e5       	ldi	r30, 0x53	; 83
 bf2:	f0 e0       	ldi	r31, 0x00	; 0
 bf4:	80 81       	ld	r24, Z
 bf6:	8f 7b       	andi	r24, 0xBF	; 191
 bf8:	8c 93       	st	X, r24

		// Turn on OVF Interrupt
		SET_BIT(TIMSK,1);
 bfa:	a9 e5       	ldi	r26, 0x59	; 89
 bfc:	b0 e0       	ldi	r27, 0x00	; 0
 bfe:	e9 e5       	ldi	r30, 0x59	; 89
 c00:	f0 e0       	ldi	r31, 0x00	; 0
 c02:	80 81       	ld	r24, Z
 c04:	82 60       	ori	r24, 0x02	; 2
 c06:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,0);
 c08:	a9 e5       	ldi	r26, 0x59	; 89
 c0a:	b0 e0       	ldi	r27, 0x00	; 0
 c0c:	e9 e5       	ldi	r30, 0x59	; 89
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	80 81       	ld	r24, Z
 c12:	8e 7f       	andi	r24, 0xFE	; 254
 c14:	8c 93       	st	X, r24

		OCR0 = OCR0_VALUE;
 c16:	ec e5       	ldi	r30, 0x5C	; 92
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	87 ec       	ldi	r24, 0xC7	; 199
 c1c:	80 83       	st	Z, r24

		// Start Timer by setting its Clock
		TCCR0 &= TIMER0_CLK_MASK;
 c1e:	a3 e5       	ldi	r26, 0x53	; 83
 c20:	b0 e0       	ldi	r27, 0x00	; 0
 c22:	e3 e5       	ldi	r30, 0x53	; 83
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	80 81       	ld	r24, Z
 c28:	88 7f       	andi	r24, 0xF8	; 248
 c2a:	8c 93       	st	X, r24
		TCCR0 |= TIMER0_CLK_CFG;
 c2c:	a3 e5       	ldi	r26, 0x53	; 83
 c2e:	b0 e0       	ldi	r27, 0x00	; 0
 c30:	e3 e5       	ldi	r30, 0x53	; 83
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	80 81       	ld	r24, Z
 c36:	82 60       	ori	r24, 0x02	; 2
 c38:	8c 93       	st	X, r24
		// set OC0 Pin Mode (Inverting or Non-Inverting)
		// Start Timer
		TCCR0 &= TIMER0_CLK_OC0_MASK;
		TCCR0 |= (TIMER0_CLK_CFG | (OC0_FAST_PWM_MODE	<<4));
	#endif
}
 c3a:	cf 91       	pop	r28
 c3c:	df 91       	pop	r29
 c3e:	08 95       	ret

00000c40 <MTIMER0_voidSetPreloadValue>:

void MTIMER0_voidSetPreloadValue (u8 A_u8NoOfTicks)
{
 c40:	df 93       	push	r29
 c42:	cf 93       	push	r28
 c44:	0f 92       	push	r0
 c46:	cd b7       	in	r28, 0x3d	; 61
 c48:	de b7       	in	r29, 0x3e	; 62
 c4a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8NoOfTicks;
 c4c:	e2 e5       	ldi	r30, 0x52	; 82
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
 c50:	89 81       	ldd	r24, Y+1	; 0x01
 c52:	80 83       	st	Z, r24
}
 c54:	0f 90       	pop	r0
 c56:	cf 91       	pop	r28
 c58:	df 91       	pop	r29
 c5a:	08 95       	ret

00000c5c <MTIMER0_voidSetOCR0Value>:

void MTIMER0_voidSetOCR0Value (u8 A_u8OCR0Value)
{
 c5c:	df 93       	push	r29
 c5e:	cf 93       	push	r28
 c60:	0f 92       	push	r0
 c62:	cd b7       	in	r28, 0x3d	; 61
 c64:	de b7       	in	r29, 0x3e	; 62
 c66:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
 c68:	ec e5       	ldi	r30, 0x5C	; 92
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	89 81       	ldd	r24, Y+1	; 0x01
 c6e:	80 83       	st	Z, r24
}
 c70:	0f 90       	pop	r0
 c72:	cf 91       	pop	r28
 c74:	df 91       	pop	r29
 c76:	08 95       	ret

00000c78 <MTIMER0_voidStopTimer>:

void MTIMER0_voidStopTimer()
{
 c78:	df 93       	push	r29
 c7a:	cf 93       	push	r28
 c7c:	cd b7       	in	r28, 0x3d	; 61
 c7e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLK_MASK;
 c80:	a3 e5       	ldi	r26, 0x53	; 83
 c82:	b0 e0       	ldi	r27, 0x00	; 0
 c84:	e3 e5       	ldi	r30, 0x53	; 83
 c86:	f0 e0       	ldi	r31, 0x00	; 0
 c88:	80 81       	ld	r24, Z
 c8a:	88 7f       	andi	r24, 0xF8	; 248
 c8c:	8c 93       	st	X, r24
}
 c8e:	cf 91       	pop	r28
 c90:	df 91       	pop	r29
 c92:	08 95       	ret

00000c94 <MTIMER0_voidSetOVFCallback>:


void MTIMER0_voidSetOVFCallback (void (*A_PtrToFunc)(void))
{
 c94:	df 93       	push	r29
 c96:	cf 93       	push	r28
 c98:	00 d0       	rcall	.+0      	; 0xc9a <MTIMER0_voidSetOVFCallback+0x6>
 c9a:	cd b7       	in	r28, 0x3d	; 61
 c9c:	de b7       	in	r29, 0x3e	; 62
 c9e:	9a 83       	std	Y+2, r25	; 0x02
 ca0:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
 ca2:	89 81       	ldd	r24, Y+1	; 0x01
 ca4:	9a 81       	ldd	r25, Y+2	; 0x02
 ca6:	00 97       	sbiw	r24, 0x00	; 0
 ca8:	31 f0       	breq	.+12     	; 0xcb6 <MTIMER0_voidSetOVFCallback+0x22>
	{
		TIMER0_OVF_CALLBACK = A_PtrToFunc;
 caa:	89 81       	ldd	r24, Y+1	; 0x01
 cac:	9a 81       	ldd	r25, Y+2	; 0x02
 cae:	90 93 62 00 	sts	0x0062, r25
 cb2:	80 93 61 00 	sts	0x0061, r24
	}
}
 cb6:	0f 90       	pop	r0
 cb8:	0f 90       	pop	r0
 cba:	cf 91       	pop	r28
 cbc:	df 91       	pop	r29
 cbe:	08 95       	ret

00000cc0 <MTIMER0_voidSetCTCCallback>:

void MTIMER0_voidSetCTCCallback (void (*A_PtrToFunc)(void))
{
 cc0:	df 93       	push	r29
 cc2:	cf 93       	push	r28
 cc4:	00 d0       	rcall	.+0      	; 0xcc6 <MTIMER0_voidSetCTCCallback+0x6>
 cc6:	cd b7       	in	r28, 0x3d	; 61
 cc8:	de b7       	in	r29, 0x3e	; 62
 cca:	9a 83       	std	Y+2, r25	; 0x02
 ccc:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
 cce:	89 81       	ldd	r24, Y+1	; 0x01
 cd0:	9a 81       	ldd	r25, Y+2	; 0x02
 cd2:	00 97       	sbiw	r24, 0x00	; 0
 cd4:	31 f0       	breq	.+12     	; 0xce2 <MTIMER0_voidSetCTCCallback+0x22>
	{
		TIMER0_CTC_CALLBACK = A_PtrToFunc;
 cd6:	89 81       	ldd	r24, Y+1	; 0x01
 cd8:	9a 81       	ldd	r25, Y+2	; 0x02
 cda:	90 93 64 00 	sts	0x0064, r25
 cde:	80 93 63 00 	sts	0x0063, r24
	}
}
 ce2:	0f 90       	pop	r0
 ce4:	0f 90       	pop	r0
 ce6:	cf 91       	pop	r28
 ce8:	df 91       	pop	r29
 cea:	08 95       	ret

00000cec <__vector_11>:



void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 cec:	1f 92       	push	r1
 cee:	0f 92       	push	r0
 cf0:	0f b6       	in	r0, 0x3f	; 63
 cf2:	0f 92       	push	r0
 cf4:	11 24       	eor	r1, r1
 cf6:	2f 93       	push	r18
 cf8:	3f 93       	push	r19
 cfa:	4f 93       	push	r20
 cfc:	5f 93       	push	r21
 cfe:	6f 93       	push	r22
 d00:	7f 93       	push	r23
 d02:	8f 93       	push	r24
 d04:	9f 93       	push	r25
 d06:	af 93       	push	r26
 d08:	bf 93       	push	r27
 d0a:	ef 93       	push	r30
 d0c:	ff 93       	push	r31
 d0e:	df 93       	push	r29
 d10:	cf 93       	push	r28
 d12:	cd b7       	in	r28, 0x3d	; 61
 d14:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CALLBACK != NULL)
 d16:	80 91 61 00 	lds	r24, 0x0061
 d1a:	90 91 62 00 	lds	r25, 0x0062
 d1e:	00 97       	sbiw	r24, 0x00	; 0
 d20:	29 f0       	breq	.+10     	; 0xd2c <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
 d22:	e0 91 61 00 	lds	r30, 0x0061
 d26:	f0 91 62 00 	lds	r31, 0x0062
 d2a:	09 95       	icall
	}
}
 d2c:	cf 91       	pop	r28
 d2e:	df 91       	pop	r29
 d30:	ff 91       	pop	r31
 d32:	ef 91       	pop	r30
 d34:	bf 91       	pop	r27
 d36:	af 91       	pop	r26
 d38:	9f 91       	pop	r25
 d3a:	8f 91       	pop	r24
 d3c:	7f 91       	pop	r23
 d3e:	6f 91       	pop	r22
 d40:	5f 91       	pop	r21
 d42:	4f 91       	pop	r20
 d44:	3f 91       	pop	r19
 d46:	2f 91       	pop	r18
 d48:	0f 90       	pop	r0
 d4a:	0f be       	out	0x3f, r0	; 63
 d4c:	0f 90       	pop	r0
 d4e:	1f 90       	pop	r1
 d50:	18 95       	reti

00000d52 <__vector_10>:


void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 d52:	1f 92       	push	r1
 d54:	0f 92       	push	r0
 d56:	0f b6       	in	r0, 0x3f	; 63
 d58:	0f 92       	push	r0
 d5a:	11 24       	eor	r1, r1
 d5c:	2f 93       	push	r18
 d5e:	3f 93       	push	r19
 d60:	4f 93       	push	r20
 d62:	5f 93       	push	r21
 d64:	6f 93       	push	r22
 d66:	7f 93       	push	r23
 d68:	8f 93       	push	r24
 d6a:	9f 93       	push	r25
 d6c:	af 93       	push	r26
 d6e:	bf 93       	push	r27
 d70:	ef 93       	push	r30
 d72:	ff 93       	push	r31
 d74:	df 93       	push	r29
 d76:	cf 93       	push	r28
 d78:	cd b7       	in	r28, 0x3d	; 61
 d7a:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_CTC_CALLBACK != NULL)
 d7c:	80 91 63 00 	lds	r24, 0x0063
 d80:	90 91 64 00 	lds	r25, 0x0064
 d84:	00 97       	sbiw	r24, 0x00	; 0
 d86:	29 f0       	breq	.+10     	; 0xd92 <__vector_10+0x40>
	{
		TIMER0_CTC_CALLBACK();
 d88:	e0 91 63 00 	lds	r30, 0x0063
 d8c:	f0 91 64 00 	lds	r31, 0x0064
 d90:	09 95       	icall
	}
}
 d92:	cf 91       	pop	r28
 d94:	df 91       	pop	r29
 d96:	ff 91       	pop	r31
 d98:	ef 91       	pop	r30
 d9a:	bf 91       	pop	r27
 d9c:	af 91       	pop	r26
 d9e:	9f 91       	pop	r25
 da0:	8f 91       	pop	r24
 da2:	7f 91       	pop	r23
 da4:	6f 91       	pop	r22
 da6:	5f 91       	pop	r21
 da8:	4f 91       	pop	r20
 daa:	3f 91       	pop	r19
 dac:	2f 91       	pop	r18
 dae:	0f 90       	pop	r0
 db0:	0f be       	out	0x3f, r0	; 63
 db2:	0f 90       	pop	r0
 db4:	1f 90       	pop	r1
 db6:	18 95       	reti

00000db8 <MTIMER1_voidInit>:


void MTIMER1_voidInit()
{
 db8:	df 93       	push	r29
 dba:	cf 93       	push	r28
 dbc:	cd b7       	in	r28, 0x3d	; 61
 dbe:	de b7       	in	r29, 0x3e	; 62
	// Select TIMER 1 MODE ==> 14
	CLR_BIT(TCCR1A,0);
 dc0:	af e4       	ldi	r26, 0x4F	; 79
 dc2:	b0 e0       	ldi	r27, 0x00	; 0
 dc4:	ef e4       	ldi	r30, 0x4F	; 79
 dc6:	f0 e0       	ldi	r31, 0x00	; 0
 dc8:	80 81       	ld	r24, Z
 dca:	8e 7f       	andi	r24, 0xFE	; 254
 dcc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
 dce:	af e4       	ldi	r26, 0x4F	; 79
 dd0:	b0 e0       	ldi	r27, 0x00	; 0
 dd2:	ef e4       	ldi	r30, 0x4F	; 79
 dd4:	f0 e0       	ldi	r31, 0x00	; 0
 dd6:	80 81       	ld	r24, Z
 dd8:	82 60       	ori	r24, 0x02	; 2
 dda:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
 ddc:	ae e4       	ldi	r26, 0x4E	; 78
 dde:	b0 e0       	ldi	r27, 0x00	; 0
 de0:	ee e4       	ldi	r30, 0x4E	; 78
 de2:	f0 e0       	ldi	r31, 0x00	; 0
 de4:	80 81       	ld	r24, Z
 de6:	88 60       	ori	r24, 0x08	; 8
 de8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
 dea:	ae e4       	ldi	r26, 0x4E	; 78
 dec:	b0 e0       	ldi	r27, 0x00	; 0
 dee:	ee e4       	ldi	r30, 0x4E	; 78
 df0:	f0 e0       	ldi	r31, 0x00	; 0
 df2:	80 81       	ld	r24, Z
 df4:	80 61       	ori	r24, 0x10	; 16
 df6:	8c 93       	st	X, r24

	// Non-Inverting Mode for OC1A
	CLR_BIT(TCCR1A,6);
 df8:	af e4       	ldi	r26, 0x4F	; 79
 dfa:	b0 e0       	ldi	r27, 0x00	; 0
 dfc:	ef e4       	ldi	r30, 0x4F	; 79
 dfe:	f0 e0       	ldi	r31, 0x00	; 0
 e00:	80 81       	ld	r24, Z
 e02:	8f 7b       	andi	r24, 0xBF	; 191
 e04:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,7);
 e06:	af e4       	ldi	r26, 0x4F	; 79
 e08:	b0 e0       	ldi	r27, 0x00	; 0
 e0a:	ef e4       	ldi	r30, 0x4F	; 79
 e0c:	f0 e0       	ldi	r31, 0x00	; 0
 e0e:	80 81       	ld	r24, Z
 e10:	80 68       	ori	r24, 0x80	; 128
 e12:	8c 93       	st	X, r24

	// ICR1 = 19999
	ICR1 = 19999;
 e14:	e6 e4       	ldi	r30, 0x46	; 70
 e16:	f0 e0       	ldi	r31, 0x00	; 0
 e18:	8f e1       	ldi	r24, 0x1F	; 31
 e1a:	9e e4       	ldi	r25, 0x4E	; 78
 e1c:	91 83       	std	Z+1, r25	; 0x01
 e1e:	80 83       	st	Z, r24

	//OCR1A
	OCR1A = 1500;
 e20:	ea e4       	ldi	r30, 0x4A	; 74
 e22:	f0 e0       	ldi	r31, 0x00	; 0
 e24:	8c ed       	ldi	r24, 0xDC	; 220
 e26:	95 e0       	ldi	r25, 0x05	; 5
 e28:	91 83       	std	Z+1, r25	; 0x01
 e2a:	80 83       	st	Z, r24

	// Start Timer
	CLR_BIT(TCCR1B,2);
 e2c:	ae e4       	ldi	r26, 0x4E	; 78
 e2e:	b0 e0       	ldi	r27, 0x00	; 0
 e30:	ee e4       	ldi	r30, 0x4E	; 78
 e32:	f0 e0       	ldi	r31, 0x00	; 0
 e34:	80 81       	ld	r24, Z
 e36:	8b 7f       	andi	r24, 0xFB	; 251
 e38:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
 e3a:	ae e4       	ldi	r26, 0x4E	; 78
 e3c:	b0 e0       	ldi	r27, 0x00	; 0
 e3e:	ee e4       	ldi	r30, 0x4E	; 78
 e40:	f0 e0       	ldi	r31, 0x00	; 0
 e42:	80 81       	ld	r24, Z
 e44:	82 60       	ori	r24, 0x02	; 2
 e46:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
 e48:	ae e4       	ldi	r26, 0x4E	; 78
 e4a:	b0 e0       	ldi	r27, 0x00	; 0
 e4c:	ee e4       	ldi	r30, 0x4E	; 78
 e4e:	f0 e0       	ldi	r31, 0x00	; 0
 e50:	80 81       	ld	r24, Z
 e52:	8e 7f       	andi	r24, 0xFE	; 254
 e54:	8c 93       	st	X, r24
}
 e56:	cf 91       	pop	r28
 e58:	df 91       	pop	r29
 e5a:	08 95       	ret

00000e5c <MTIMER1_voidSetOCR1AValue>:

void MTIMER1_voidSetOCR1AValue (u16 A_u16Value)
{
 e5c:	df 93       	push	r29
 e5e:	cf 93       	push	r28
 e60:	00 d0       	rcall	.+0      	; 0xe62 <MTIMER1_voidSetOCR1AValue+0x6>
 e62:	cd b7       	in	r28, 0x3d	; 61
 e64:	de b7       	in	r29, 0x3e	; 62
 e66:	9a 83       	std	Y+2, r25	; 0x02
 e68:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16Value;
 e6a:	ea e4       	ldi	r30, 0x4A	; 74
 e6c:	f0 e0       	ldi	r31, 0x00	; 0
 e6e:	89 81       	ldd	r24, Y+1	; 0x01
 e70:	9a 81       	ldd	r25, Y+2	; 0x02
 e72:	91 83       	std	Z+1, r25	; 0x01
 e74:	80 83       	st	Z, r24
}
 e76:	0f 90       	pop	r0
 e78:	0f 90       	pop	r0
 e7a:	cf 91       	pop	r28
 e7c:	df 91       	pop	r29
 e7e:	08 95       	ret

00000e80 <MTIMER1_voidInitSWICU>:

void MTIMER1_voidInitSWICU()
{
 e80:	df 93       	push	r29
 e82:	cf 93       	push	r28
 e84:	cd b7       	in	r28, 0x3d	; 61
 e86:	de b7       	in	r29, 0x3e	; 62
	// Start Timer by setting prescaler
	CLR_BIT(TCCR1B,2);
 e88:	ae e4       	ldi	r26, 0x4E	; 78
 e8a:	b0 e0       	ldi	r27, 0x00	; 0
 e8c:	ee e4       	ldi	r30, 0x4E	; 78
 e8e:	f0 e0       	ldi	r31, 0x00	; 0
 e90:	80 81       	ld	r24, Z
 e92:	8b 7f       	andi	r24, 0xFB	; 251
 e94:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
 e96:	ae e4       	ldi	r26, 0x4E	; 78
 e98:	b0 e0       	ldi	r27, 0x00	; 0
 e9a:	ee e4       	ldi	r30, 0x4E	; 78
 e9c:	f0 e0       	ldi	r31, 0x00	; 0
 e9e:	80 81       	ld	r24, Z
 ea0:	82 60       	ori	r24, 0x02	; 2
 ea2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
 ea4:	ae e4       	ldi	r26, 0x4E	; 78
 ea6:	b0 e0       	ldi	r27, 0x00	; 0
 ea8:	ee e4       	ldi	r30, 0x4E	; 78
 eaa:	f0 e0       	ldi	r31, 0x00	; 0
 eac:	80 81       	ld	r24, Z
 eae:	8e 7f       	andi	r24, 0xFE	; 254
 eb0:	8c 93       	st	X, r24
}
 eb2:	cf 91       	pop	r28
 eb4:	df 91       	pop	r29
 eb6:	08 95       	ret

00000eb8 <MTIMERS_voidSetTimer1Value>:
void MTIMERS_voidSetTimer1Value(u16 A_u16Value)
{
 eb8:	df 93       	push	r29
 eba:	cf 93       	push	r28
 ebc:	00 d0       	rcall	.+0      	; 0xebe <MTIMERS_voidSetTimer1Value+0x6>
 ebe:	cd b7       	in	r28, 0x3d	; 61
 ec0:	de b7       	in	r29, 0x3e	; 62
 ec2:	9a 83       	std	Y+2, r25	; 0x02
 ec4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u16Value;
 ec6:	ec e4       	ldi	r30, 0x4C	; 76
 ec8:	f0 e0       	ldi	r31, 0x00	; 0
 eca:	89 81       	ldd	r24, Y+1	; 0x01
 ecc:	9a 81       	ldd	r25, Y+2	; 0x02
 ece:	91 83       	std	Z+1, r25	; 0x01
 ed0:	80 83       	st	Z, r24
}
 ed2:	0f 90       	pop	r0
 ed4:	0f 90       	pop	r0
 ed6:	cf 91       	pop	r28
 ed8:	df 91       	pop	r29
 eda:	08 95       	ret

00000edc <MTIMERS_u16ReadTimer1Value>:

u16 MTIMERS_u16ReadTimer1Value(void)
{
 edc:	df 93       	push	r29
 ede:	cf 93       	push	r28
 ee0:	cd b7       	in	r28, 0x3d	; 61
 ee2:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
 ee4:	ec e4       	ldi	r30, 0x4C	; 76
 ee6:	f0 e0       	ldi	r31, 0x00	; 0
 ee8:	80 81       	ld	r24, Z
 eea:	91 81       	ldd	r25, Z+1	; 0x01
}
 eec:	cf 91       	pop	r28
 eee:	df 91       	pop	r29
 ef0:	08 95       	ret

00000ef2 <MWDT_voidEnable>:
#include "../Include/MCAL/WDT/WDT_Interface.h"
#include "../Include/MCAL/WDT/WDT_Private.h"
#include "../Include/MCAL/WDT/WDT_Cfg.h"

void MWDT_voidEnable(WDT_TIME_e A_TimeToReset)
{
 ef2:	df 93       	push	r29
 ef4:	cf 93       	push	r28
 ef6:	0f 92       	push	r0
 ef8:	cd b7       	in	r28, 0x3d	; 61
 efa:	de b7       	in	r29, 0x3e	; 62
 efc:	89 83       	std	Y+1, r24	; 0x01
	WDTCR =0x00;
 efe:	e1 e4       	ldi	r30, 0x41	; 65
 f00:	f0 e0       	ldi	r31, 0x00	; 0
 f02:	10 82       	st	Z, r1
	WDTCR |= (1<<WDE) | (A_TimeToReset);
 f04:	a1 e4       	ldi	r26, 0x41	; 65
 f06:	b0 e0       	ldi	r27, 0x00	; 0
 f08:	e1 e4       	ldi	r30, 0x41	; 65
 f0a:	f0 e0       	ldi	r31, 0x00	; 0
 f0c:	90 81       	ld	r25, Z
 f0e:	89 81       	ldd	r24, Y+1	; 0x01
 f10:	89 2b       	or	r24, r25
 f12:	88 60       	ori	r24, 0x08	; 8
 f14:	8c 93       	st	X, r24
}
 f16:	0f 90       	pop	r0
 f18:	cf 91       	pop	r28
 f1a:	df 91       	pop	r29
 f1c:	08 95       	ret

00000f1e <MWDT_voidDisable>:
void MWDT_voidDisable(void)
{
 f1e:	df 93       	push	r29
 f20:	cf 93       	push	r28
 f22:	cd b7       	in	r28, 0x3d	; 61
 f24:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<WDE) | (1<<WDTOE);
 f26:	a1 e4       	ldi	r26, 0x41	; 65
 f28:	b0 e0       	ldi	r27, 0x00	; 0
 f2a:	e1 e4       	ldi	r30, 0x41	; 65
 f2c:	f0 e0       	ldi	r31, 0x00	; 0
 f2e:	80 81       	ld	r24, Z
 f30:	88 61       	ori	r24, 0x18	; 24
 f32:	8c 93       	st	X, r24
	WDTCR = 0x00;
 f34:	e1 e4       	ldi	r30, 0x41	; 65
 f36:	f0 e0       	ldi	r31, 0x00	; 0
 f38:	10 82       	st	Z, r1
}
 f3a:	cf 91       	pop	r28
 f3c:	df 91       	pop	r29
 f3e:	08 95       	ret

00000f40 <_exit>:
 f40:	f8 94       	cli

00000f42 <__stop_program>:
 f42:	ff cf       	rjmp	.-2      	; 0xf42 <__stop_program>
